// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –î–£–ï–õ–û–ì
const WebSocket = require('ws');

const PORT = process.env.PORT || 8080;
const wss = new WebSocket.Server({ port: PORT });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç
const rooms = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–æ–º–Ω–∞—Ç—ã
function generateRoomId() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let id = '';
    for (let i = 0; i < 6; i++) {
        id += chars[Math.floor(Math.random() * chars.length)];
    }
    return id;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
function sendToClient(ws, message) {
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(message));
    }
}

// Broadcast –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
function broadcastToRoom(roomId, message, excludeWs = null) {
    const room = rooms.get(roomId);
    if (!room) return;

    [room.host, room.guest].forEach(client => {
        if (client && client !== excludeWs) {
            sendToClient(client, message);
        }
    });
}

console.log(`üéÆ WebSocket —Å–µ—Ä–≤–µ—Ä –î–£–ï–õ–û–ì –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

wss.on('connection', (ws) => {
    console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

    ws.on('message', (data) => {
        try {
            const message = JSON.parse(data);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ:', message.type);

            switch (message.type) {
                case 'CREATE_ROOM': {
                    const roomId = generateRoomId();
                    rooms.set(roomId, {
                        id: roomId,
                        host: ws,
                        guest: null,
                        hostId: message.playerId,
                        guestId: null,
                        gameState: null
                    });

                    ws.roomId = roomId;
                    ws.isHost = true;

                    sendToClient(ws, {
                        type: 'ROOM_CREATED',
                        roomId: roomId
                    });

                    console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`);
                    break;
                }

                case 'JOIN_ROOM': {
                    const { roomId, playerId } = message;
                    const room = rooms.get(roomId);

                    if (!room) {
                        sendToClient(ws, {
                            type: 'ERROR',
                            error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                        });
                        break;
                    }

                    if (room.guest) {
                        sendToClient(ws, {
                            type: 'ERROR',
                            error: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'
                        });
                        break;
                    }

                    room.guest = ws;
                    room.guestId = playerId;
                    ws.roomId = roomId;
                    ws.isHost = false;

                    sendToClient(ws, {
                        type: 'ROOM_JOINED',
                        roomId: roomId
                    });

                    // –£–≤–µ–¥–æ–º–∏—Ç—å —Ö–æ—Å—Ç–∞
                    sendToClient(room.host, {
                        type: 'OPPONENT_JOINED',
                        opponentId: playerId
                    });

                    console.log(`üë• –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

                    // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                    broadcastToRoom(roomId, {
                        type: 'GAME_START',
                        hostId: room.hostId,
                        guestId: room.guestId
                    });

                    break;
                }

                case 'PLAYER_MOVE': {
                    const { roomId, card } = message;
                    const room = rooms.get(roomId);

                    if (!room) {
                        sendToClient(ws, {
                            type: 'ERROR',
                            error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                        });
                        break;
                    }

                    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
                    const opponent = ws.isHost ? room.guest : room.host;
                    if (opponent) {
                        sendToClient(opponent, {
                            type: 'OPPONENT_MOVE',
                            card: card
                        });
                    }

                    console.log(`üé¥ –•–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
                    break;
                }

                case 'SYNC_STATE': {
                    const { roomId, state } = message;
                    const room = rooms.get(roomId);

                    if (!room) break;

                    room.gameState = state;

                    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Å—Ç—é
                    if (room.guest) {
                        sendToClient(room.guest, {
                            type: 'GAME_STATE',
                            state: state
                        });
                    }

                    break;
                }

                case 'GAME_OVER': {
                    const { roomId, winner } = message;
                    broadcastToRoom(roomId, {
                        type: 'GAME_OVER',
                        winner: winner
                    });

                    console.log(`üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`);
                    break;
                }

                default:
                    console.log('‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            sendToClient(ws, {
                type: 'ERROR',
                error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    });

    ws.on('close', () => {
        console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

        // –ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        if (ws.roomId) {
            const room = rooms.get(ws.roomId);
            if (room) {
                const opponent = ws.isHost ? room.guest : room.host;
                if (opponent) {
                    sendToClient(opponent, {
                        type: 'OPPONENT_DISCONNECTED'
                    });
                }

                // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
                if (!room.host || room.host.readyState !== WebSocket.OPEN) {
                    rooms.delete(ws.roomId);
                    console.log(`üóëÔ∏è  –ö–æ–º–Ω–∞—Ç–∞ ${ws.roomId} —É–¥–∞–ª–µ–Ω–∞`);
                }
            }
        }
    });

    ws.on('error', (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
});

// –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    rooms.forEach((room, roomId) => {
        const hostAlive = room.host && room.host.readyState === WebSocket.OPEN;
        const guestAlive = room.guest && room.guest.readyState === WebSocket.OPEN;

        if (!hostAlive && !guestAlive) {
            rooms.delete(roomId);
            console.log(`üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
        }
    });
}, 5 * 60 * 1000);

console.log('‚ú® –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
