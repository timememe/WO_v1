// –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ –î–£–ï–õ–û–ì
// –ó–∞–ø—É—Å–∫: –æ—Ç–∫—Ä–æ–π—Ç–µ test.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫ game.js

class GameTester {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
        this.warnings = [];
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    createMockCharacter(logic = 4, emotion = 4) {
        return {
            logic,
            maxLogic: logic,
            emotion,
            maxEmotion: emotion,
            points: 0,
            logicDepleted: false,
            emotionDepleted: false,
            negativeTurns: 0,
            cards: [],
            discardPile: [],
            lastCard: null
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–∞—Ä—Ç—ã
    createMockCard(options = {}) {
        return {
            category: options.category || '–ê—Ç–∞–∫–∞',
            name: options.name || '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
            effect: options.effect || 'logic',
            damage: options.damage,
            heal: options.heal,
            shield: options.shield,
            text: options.text || '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
            desc: options.desc || '–û–ø–∏—Å–∞–Ω–∏–µ',
            used: false,
            fromDiscard: false,
            usesLeft: options.usesLeft
        };
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
    test(name, fn) {
        this.tests.push({ name, fn });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è
    assert(condition, message) {
        if (!condition) {
            throw new Error(message || 'Assertion failed');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    assertEqual(actual, expected, message) {
        if (actual !== expected) {
            throw new Error(
                message || `Expected ${expected}, got ${actual}`
            );
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ (–¥–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)
    assertClose(actual, expected, tolerance = 0.01, message) {
        if (Math.abs(actual - expected) > tolerance) {
            throw new Error(
                message || `Expected ~${expected}, got ${actual}`
            );
        }
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
    warn(message) {
        this.warnings.push(message);
    }

    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async run() {
        console.log('%cüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏...', 'color: #3498db; font-size: 16px; font-weight: bold');
        console.log('');

        this.passed = 0;
        this.failed = 0;
        this.warnings = [];

        for (const test of this.tests) {
            try {
                await test.fn.call(this);
                this.passed++;
                console.log(`%c‚úì ${test.name}`, 'color: #2ecc71');
            } catch (error) {
                this.failed++;
                console.error(`%c‚úó ${test.name}`, 'color: #e74c3c');
                console.error(`  ${error.message}`);
                console.error(error.stack);
            }
        }

        console.log('');
        console.log('%c' + '='.repeat(50), 'color: #95a5a6');
        console.log(
            `%c–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: %c${this.passed} –ø—Ä–æ–π–¥–µ–Ω–æ%c, %c${this.failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`,
            'color: #34495e; font-weight: bold',
            'color: #2ecc71; font-weight: bold',
            'color: #34495e',
            'color: #e74c3c; font-weight: bold'
        );

        if (this.warnings.length > 0) {
            console.log('');
            console.log(`%c‚ö†Ô∏è  ${this.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ:`, 'color: #f39c12; font-weight: bold');
            this.warnings.forEach(w => console.log(`%c  ‚Ä¢ ${w}`, 'color: #f39c12'));
        }

        console.log('%c' + '='.repeat(50), 'color: #95a5a6');

        return { passed: this.passed, failed: this.failed, warnings: this.warnings };
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
const tester = new GameTester();

// ============================================
// –¢–ï–°–¢–´ –ú–ï–•–ê–ù–ò–ö–ò –ö–ê–†–¢
// ============================================

tester.test('–ê—Ç–∞–∫–∞ –Ω–∞–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω', function() {
    const attacker = this.createMockCharacter();
    const defender = this.createMockCharacter();
    const card = this.createMockCard({ damage: 2, effect: 'logic' });

    // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–±–µ–∑ gameEngine)
    const damageMultiplier = 1.0; // emotion = 4
    const finalDamage = Math.floor(card.damage * damageMultiplier);
    defender.logic -= finalDamage;

    this.assertEqual(defender.logic, 2, '–£—Ä–æ–Ω 2 –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å –ª–æ–≥–∏–∫—É —Å 4 –¥–æ 2');
});

tester.test('–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –æ—Ç —ç–º–æ—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', function() {
    const testCases = [
        { emotion: 0, multiplier: 0.5 },
        { emotion: 1, multiplier: 0.75 },
        { emotion: 2, multiplier: 0.75 },
        { emotion: 3, multiplier: 1.0 },
        { emotion: 4, multiplier: 1.0 },
        { emotion: 5, multiplier: 1.25 },
        { emotion: 6, multiplier: 1.25 },
        { emotion: 7, multiplier: 1.5 }
    ];

    testCases.forEach(({ emotion, multiplier }) => {
        const attacker = this.createMockCharacter(4, emotion);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π —Ä–∞—Å—á–µ—Ç
        let calcMultiplier;
        if (emotion <= 0) calcMultiplier = 0.5;
        else if (emotion <= 2) calcMultiplier = 0.75;
        else if (emotion <= 4) calcMultiplier = 1.0;
        else if (emotion <= 6) calcMultiplier = 1.25;
        else calcMultiplier = 1.5;

        this.assertEqual(calcMultiplier, multiplier,
            `–ü—Ä–∏ —ç–º–æ—Ü–∏—è—Ö ${emotion} –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${multiplier}`);
    });
});

tester.test('–õ–∏–º–∏—Ç —Ä—É–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≥–∏–∫–∏', function() {
    const testCases = [
        { logic: 0, limit: 3 },
        { logic: 1, limit: 4 },
        { logic: 2, limit: 4 },
        { logic: 3, limit: 5 },
        { logic: 4, limit: 5 },
        { logic: 5, limit: 6 },
        { logic: 6, limit: 6 },
        { logic: 7, limit: 7 },
        { logic: 8, limit: 7 }
    ];

    testCases.forEach(({ logic, limit }) => {
        const char = this.createMockCharacter(logic, 4);
        let calcLimit;
        if (logic <= 0) calcLimit = 3;
        else if (logic <= 2) calcLimit = 4;
        else if (logic <= 4) calcLimit = 5;
        else if (logic <= 6) calcLimit = 6;
        else calcLimit = 7;

        this.assertEqual(calcLimit, limit,
            `–ü—Ä–∏ –ª–æ–≥–∏–∫–µ ${logic} –ª–∏–º–∏—Ç —Ä—É–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${limit}`);
    });
});

tester.test('–©–∏—Ç –ø–æ–≥–ª–æ—â–∞–µ—Ç —É—Ä–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', function() {
    const defender = this.createMockCharacter();
    defender.shield = 3;
    defender.logic = 4;

    let damage = 5;
    const absorbed = Math.min(defender.shield, damage);
    defender.shield -= absorbed;
    damage -= absorbed;
    defender.logic -= damage;

    this.assertEqual(defender.shield, 0, '–©–∏—Ç 3 –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—É—à–∏—Ç—å—Å—è');
    this.assertEqual(defender.logic, 2, '–û—Å—Ç–∞—Ç–æ–∫ —É—Ä–æ–Ω–∞ (2) –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤ –ª–æ–≥–∏–∫—É');
});

tester.test('–©–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–∞–±—ã–π —É—Ä–æ–Ω', function() {
    const defender = this.createMockCharacter();
    defender.shield = 5;
    defender.logic = 4;

    let damage = 2;
    const absorbed = Math.min(defender.shield, damage);
    defender.shield -= absorbed;
    damage -= absorbed;
    if (damage > 0) defender.logic -= damage;

    this.assertEqual(defender.shield, 3, '–©–∏—Ç –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è —Å 5 –¥–æ 3');
    this.assertEqual(defender.logic, 4, '–õ–æ–≥–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è');
});

tester.test('–ê—Ç–∞–∫–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É (+50% —É—Ä–æ–Ω–∞)', function() {
    const baseDamage = 2;
    const bonusDamage = Math.floor(baseDamage * 1.5);

    this.assertEqual(bonusDamage, 3,
        '–ê—Ç–∞–∫–∞ 2 —Å –±–æ–Ω—É—Å–æ–º –ø—Ä–æ—Ç–∏–≤ –ó–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç—å 3 —É—Ä–æ–Ω–∞');
});

tester.test('–ó–∞—â–∏—Ç–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ –£–∫–ª–æ–Ω–µ–Ω–∏—è (+50% –ª–µ—á–µ–Ω–∏—è)', function() {
    const baseHeal = 2;
    const bonusHeal = Math.floor(baseHeal * 1.5);

    this.assertEqual(bonusHeal, 3,
        '–ó–∞—â–∏—Ç–∞ 2 —Å –±–æ–Ω—É—Å–æ–º –ø—Ä–æ—Ç–∏–≤ –£–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –ª–µ—á–∏—Ç—å 3');
});

tester.test('–ó–µ—Ä–∫–∞–ª–æ –∫–æ–ø–∏—Ä—É–µ—Ç 75% —É—Ä–æ–Ω–∞ –∞—Ç–∞–∫–∏', function() {
    const enemyDamage = 4;
    const mirrorModifier = 0.75;
    const damageMultiplier = 1.0; // emotion = 4
    const mirrorDamage = Math.floor(enemyDamage * mirrorModifier * damageMultiplier);

    this.assertEqual(mirrorDamage, 3,
        '–ó–µ—Ä–∫–∞–ª–æ –¥–æ–ª–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å 3 —É—Ä–æ–Ω–∞ –∏–∑ 4 (75%)');
});

// ============================================
// –¢–ï–°–¢–´ –ë–ê–õ–ê–ù–°–ê
// ============================================

tester.test('–ë–∞–ª–∞–Ω—Å: –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞–≤–Ω—ã', function() {
    const player = this.createMockCharacter(4, 4);
    const enemy = this.createMockCharacter(4, 4);

    this.assertEqual(player.logic, enemy.logic, '–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–æ–π');
    this.assertEqual(player.emotion, enemy.emotion, '–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º–∏');
});

tester.test('–ë–∞–ª–∞–Ω—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –∏ –ª–µ—á–µ–Ω–∏—è', async function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã
    const response = await fetch('cards.json');
    const cardData = await response.json();

    const playerCards = cardData.basePlayerCards;
    const enemyCards = cardData.baseEnemyCards;
    const defenseCards = cardData.defenseCards;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω
    let totalDamage = 0;
    let damageCount = 0;
    [...playerCards, ...enemyCards].forEach(card => {
        if (card.damage) {
            totalDamage += card.damage * (card.usesLeft || 1);
            damageCount += (card.usesLeft || 1);
        }
    });
    const avgDamage = totalDamage / damageCount;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –ª–µ—á–µ–Ω–∏–µ
    let totalHeal = 0;
    let healCount = 0;
    defenseCards.forEach(card => {
        if (card.heal) {
            totalHeal += card.heal;
            healCount++;
        }
    });
    const avgHeal = totalHeal / healCount;

    console.log(`  –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω: ${avgDamage.toFixed(2)}, –°—Ä–µ–¥–Ω–µ–µ –ª–µ—á–µ–Ω–∏–µ: ${avgHeal.toFixed(2)}`);

    // –ë–∞–ª–∞–Ω—Å: –ª–µ—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ –∏–ª–∏ —á—É—Ç—å –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–Ω–∞
    if (avgHeal < avgDamage * 0.8) {
        this.warn('–õ–µ—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±–æ–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Ä–æ–Ω–æ–º');
    }
    if (avgHeal > avgDamage * 1.5) {
        this.warn('–õ–µ—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Ä–æ–Ω–æ–º');
    }
});

tester.test('–ë–∞–ª–∞–Ω—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–∞—Ä—Ç', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();

    const allCards = [...cardData.basePlayerCards, ...cardData.baseEnemyCards];

    let totalUses = 0;
    let cardCount = 0;
    allCards.forEach(card => {
        totalUses += (card.usesLeft || 1);
        cardCount++;
    });

    const avgUses = totalUses / cardCount;
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É: ${avgUses.toFixed(2)}`);

    if (avgUses < 1.5) {
        this.warn('–ö–∞—Ä—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ');
    }
});

tester.test('–ë–∞–ª–∞–Ω—Å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —É–±–∏–≤–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();

    const allAttackCards = [...cardData.basePlayerCards, ...cardData.baseEnemyCards, ...cardData.rareAttackCards];

    let maxDamage = 0;
    allAttackCards.forEach(card => {
        if (card.damage) {
            // –° –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º (1.5 –ø—Ä–∏ —ç–º–æ—Ü–∏—è—Ö > 6)
            // –ò –±–æ–Ω—É—Å–æ–º –ø—Ä–æ—Ç–∏–≤ –∑–∞—â–∏—Ç—ã (+50%)
            const potentialDamage = Math.floor(card.damage * 1.5 * 1.5);
            maxDamage = Math.max(maxDamage, potentialDamage);
        }
    });

    console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –∑–∞ —Ö–æ–¥: ${maxDamage}`);

    const startHP = 4 + 4; // logic + emotion
    if (maxDamage >= startHP) {
        this.warn(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω (${maxDamage}) –º–æ–∂–µ—Ç —É–±–∏—Ç—å –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥ (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ HP: ${startHP})`);
    }
});

// ============================================
// –¢–ï–°–¢–´ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í
// ============================================

tester.test('–ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', function() {
    const char = this.createMockCharacter();
    char.logic = -2;
    char.emotion = -3;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –∫—Ä–∞—à–∏—Ç—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    const multiplier = char.emotion <= 0 ? 0.5 : 1.0;
    this.assertEqual(multiplier, 0.5, '–ü—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.5');
});

tester.test('–ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', function() {
    const char = this.createMockCharacter(100, 100);

    // –õ–∏–º–∏—Ç —Ä—É–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º
    let handLimit;
    if (char.logic <= 0) handLimit = 3;
    else if (char.logic <= 2) handLimit = 4;
    else if (char.logic <= 4) handLimit = 5;
    else if (char.logic <= 6) handLimit = 6;
    else handLimit = 7;

    this.assertEqual(handLimit, 7, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ä—É–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 7');

    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º
    let damageMultiplier;
    if (char.emotion <= 0) damageMultiplier = 0.5;
    else if (char.emotion <= 2) damageMultiplier = 0.75;
    else if (char.emotion <= 4) damageMultiplier = 1.0;
    else if (char.emotion <= 6) damageMultiplier = 1.25;
    else damageMultiplier = 1.5;

    this.assertEqual(damageMultiplier, 1.5, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.5');
});

tester.test('–ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –ö–∞—Ä—Ç–∞ –±–µ–∑ —É—Ä–æ–Ω–∞ –∏ –ª–µ—á–µ–Ω–∏—è', function() {
    const card = this.createMockCard({ category: '–£–∫–ª–æ–Ω–µ–Ω–∏–µ', effect: 'cancel' });

    this.assert(!card.damage && !card.heal,
        '–ö–∞—Ä—Ç–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å —É—Ä–æ–Ω–∞ –∏ –ª–µ—á–µ–Ω–∏—è');
});

tester.test('–ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –û—Ç–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã –±–µ–∑ lastCardEffects', function() {
    const source = this.createMockCharacter();
    const target = this.createMockCharacter();

    // –û—Ç–º–µ–Ω–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ª–æ–º–∞—Ç—å –∏–≥—Ä—É
    this.assert(!source.lastCardEffects, 'lastCardEffects –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å undefined');
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
});

tester.test('–ü—Ä–æ–≤–µ—Ä–∫–∞: –ù–µ—Ç –¥—É–±–ª–µ–π –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–µ', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–∏
    const usedNames = new Set();
    const hand = [];

    // –ë–µ—Ä–µ–º 4 –∫–∞—Ä—Ç—ã (2 –∞—Ç–∞–∫–∏, 1 –∑–∞—â–∏—Ç–∞, 1 —É–∫–ª–æ–Ω–µ–Ω–∏–µ)
    cardData.basePlayerCards.slice(0, 2).forEach(card => {
        if (!usedNames.has(card.name)) {
            hand.push(card);
            usedNames.add(card.name);
        }
    });

    this.assertEqual(hand.length, usedNames.size,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω');
});

tester.test('–ü—Ä–æ–≤–µ—Ä–∫–∞: –í—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();

    const allCards = [
        ...cardData.basePlayerCards,
        ...cardData.baseEnemyCards,
        ...cardData.defenseCards,
        ...cardData.evasionCards,
        ...cardData.rareAttackCards
    ];

    allCards.forEach(card => {
        this.assert(card.category, `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å category`);
        this.assert(card.name, '–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å name');
        this.assert(card.effect, `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å effect`);
        this.assert(card.text, `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å text`);
        this.assert(card.desc, `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å desc`);
    });
});

// ============================================
// –¢–ï–°–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
// ============================================

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ê—Ç–∞–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    this.assert(docs.ATTACK_CARDS, '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
    this.assert(docs.ATTACK_CARDS.rules.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∞—Ç–∞–∫');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Ç–∞–∫—É —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
    const baseDamage = 2;
    const testCases = [
        { emotion: 0, expected: 1 },   // 2 * 0.5 = 1
        { emotion: 2, expected: 1 },   // 2 * 0.75 = 1.5 -> 1
        { emotion: 4, expected: 2 },   // 2 * 1.0 = 2
        { emotion: 6, expected: 2 },   // 2 * 1.25 = 2.5 -> 2
        { emotion: 8, expected: 3 }    // 2 * 1.5 = 3
    ];

    testCases.forEach(({ emotion, expected }) => {
        let multiplier;
        if (emotion <= 0) multiplier = 0.5;
        else if (emotion <= 2) multiplier = 0.75;
        else if (emotion <= 4) multiplier = 1.0;
        else if (emotion <= 6) multiplier = 1.25;
        else multiplier = 1.5;

        const finalDamage = Math.floor(baseDamage * multiplier);
        this.assertEqual(finalDamage, expected,
            `–ü—Ä–∏ —ç–º–æ—Ü–∏—è—Ö ${emotion} —É—Ä–æ–Ω ${baseDamage} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${expected}`);
    });
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ó–∞—â–∏—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    this.assert(docs.DEFENSE_CARDS, '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ
    const baseHeal = 3;
    const defender = this.createMockCharacter(2, 2);
    defender.logic += baseHeal;

    this.assertEqual(defender.logic, 5, '–ë–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –ø—Ä–æ—Ç–∏–≤ —É–∫–ª–æ–Ω–µ–Ω–∏—è (+50%)
    const bonusHeal = Math.floor(baseHeal * 1.5);
    this.assertEqual(bonusHeal, 4, '–ë–æ–Ω—É—Å –ø—Ä–æ—Ç–∏–≤ —É–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å +50%');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –£–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    this.assert(docs.EVASION_CARDS, '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —É–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ö–∞–Ω–∏–∫—É –ó–µ—Ä–∫–∞–ª–∞ (75%)
    const evasionCard = cardData.evasionCards.find(c => c.effect === 'mirror');
    this.assert(evasionCard, '–ö–∞—Ä—Ç–∞ –ó–µ—Ä–∫–∞–ª–æ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
    this.assertEqual(evasionCard.modifier, 0.75, '–ó–µ—Ä–∫–∞–ª–æ –¥–æ–ª–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å 75% —É—Ä–æ–Ω–∞');

    const enemyDamage = 4;
    const mirrorDamage = Math.floor(enemyDamage * evasionCard.modifier);
    this.assertEqual(mirrorDamage, 3, '–ó–µ—Ä–∫–∞–ª–æ –¥–æ–ª–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å 3 —É—Ä–æ–Ω–∞ –∏–∑ 4');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const advantageSystem = docs.SPECIAL_MECHANICS.advantageSystem;
    this.assert(advantageSystem.includes('–ê—Ç–∞–∫–∞ > –ó–∞—â–∏—Ç–∞'), '–ê—Ç–∞–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞–¥ –ó–∞—â–∏—Ç–æ–π');
    this.assert(advantageSystem.includes('–ó–∞—â–∏—Ç–∞ > –£–∫–ª–æ–Ω–µ–Ω–∏–µ'), '–ó–∞—â–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞–¥ –£–∫–ª–æ–Ω–µ–Ω–∏–µ–º');
    this.assert(advantageSystem.includes('+50%'), '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å +50%');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å +50%
    const baseDamage = 2;
    const bonusDamage = Math.floor(baseDamage * 1.5);
    this.assertEqual(bonusDamage, 3, '–ë–æ–Ω—É—Å +50% –æ—Ç —É—Ä–æ–Ω–∞ 2 –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å 3');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ú–Ω–æ–∂–∏—Ç–µ–ª—å —ç–º–æ—Ü–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const emotionMultiplierDesc = docs.SPECIAL_MECHANICS.emotionMultiplier;
    this.assert(emotionMultiplierDesc.includes('0=0.5x'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 0 —ç–º–æ—Ü–∏–π = 0.5x');
    this.assert(emotionMultiplierDesc.includes('3-4=1.0x'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 3-4 —ç–º–æ—Ü–∏–π = 1.0x');
    this.assert(emotionMultiplierDesc.includes('7+=1.5x'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 7+ —ç–º–æ—Ü–∏–π = 1.5x');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const testCases = [
        { emotion: 0, multiplier: 0.5 },
        { emotion: 1, multiplier: 0.75 },
        { emotion: 3, multiplier: 1.0 },
        { emotion: 5, multiplier: 1.25 },
        { emotion: 7, multiplier: 1.5 }
    ];

    testCases.forEach(({ emotion, multiplier }) => {
        let calcMultiplier;
        if (emotion <= 0) calcMultiplier = 0.5;
        else if (emotion <= 2) calcMultiplier = 0.75;
        else if (emotion <= 4) calcMultiplier = 1.0;
        else if (emotion <= 6) calcMultiplier = 1.25;
        else calcMultiplier = 1.5;

        this.assertEqual(calcMultiplier, multiplier,
            `–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–∏ ${emotion} —ç–º–æ—Ü–∏—è—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏`);
    });
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –õ–∏–º–∏—Ç —Ä—É–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const handLimitDesc = docs.SPECIAL_MECHANICS.handLimit;
    this.assert(handLimitDesc.includes('0=3'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 0 –ª–æ–≥–∏–∫–∏ = 3 –∫–∞—Ä—Ç—ã');
    this.assert(handLimitDesc.includes('3-4=5'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 3-4 –ª–æ–≥–∏–∫–∏ = 5 –∫–∞—Ä—Ç');
    this.assert(handLimitDesc.includes('7+=7'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å 7+ –ª–æ–≥–∏–∫–∏ = 7 –∫–∞—Ä—Ç');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const testCases = [
        { logic: 0, limit: 3 },
        { logic: 1, limit: 4 },
        { logic: 3, limit: 5 },
        { logic: 5, limit: 6 },
        { logic: 7, limit: 7 }
    ];

    testCases.forEach(({ logic, limit }) => {
        let calcLimit;
        if (logic <= 0) calcLimit = 3;
        else if (logic <= 2) calcLimit = 4;
        else if (logic <= 4) calcLimit = 5;
        else if (logic <= 6) calcLimit = 6;
        else calcLimit = 7;

        this.assertEqual(calcLimit, limit,
            `–õ–∏–º–∏—Ç —Ä—É–∫–∏ –ø—Ä–∏ ${logic} –ª–æ–≥–∏–∫–µ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏`);
    });
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –©–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const shieldDesc = docs.SPECIAL_MECHANICS.shield;
    this.assert(shieldDesc.includes('–ø–æ–≥–ª–æ—â–∞–µ—Ç —É—Ä–æ–Ω'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ —É—Ä–æ–Ω–∞');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —â–∏—Ç–∞
    const defender = this.createMockCharacter();
    defender.shield = 3;
    defender.logic = 4;

    let damage = 5;
    const absorbed = Math.min(defender.shield, damage);
    defender.shield -= absorbed;
    damage -= absorbed;
    defender.logic -= damage;

    this.assertEqual(defender.shield, 0, '–©–∏—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä—É—à–∏—Ç—å—Å—è');
    this.assertEqual(defender.logic, 2, '–û—Å—Ç–∞—Ç–æ–∫ —É—Ä–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤ –ª–æ–≥–∏–∫—É');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–ø–∏—Å–∞–Ω–∏—é', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const victoryDesc = docs.SPECIAL_MECHANICS.victoryConditions;
    this.assert(victoryDesc.includes('–õ–æ–≥–∏–∫–∞ –≤—Ä–∞–≥–∞ <= 0'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–±–µ–¥—É –ø—Ä–∏ –ª–æ–≥–∏–∫–µ <= 0');
    this.assert(victoryDesc.includes('–≠–º–æ—Ü–∏–∏ –≤—Ä–∞–≥–∞ <= 0'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–±–µ–¥—É –ø—Ä–∏ —ç–º–æ—Ü–∏—è—Ö <= 0');
    this.assert(victoryDesc.includes('3 —Ö–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å —É—Å–ª–æ–≤–∏–µ 3 —Ö–æ–¥–æ–≤');
    this.assert(victoryDesc.includes('3 —Ç–æ—á–∫–∞—Ö'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–±–µ–¥—É –ø—Ä–∏ 3 —Ç–æ—á–∫–∞—Ö');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ú–µ—Ö–∞–Ω–∏–∫–∞ fromDiscard —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();
    const docs = cardData._MECHANICS_DOCUMENTATION;

    const fromDiscardDesc = docs.SPECIAL_MECHANICS.fromDiscard;
    this.assert(fromDiscardDesc.includes('–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ');
    this.assert(fromDiscardDesc.includes('discard'), '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Å–±—Ä–æ—Å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const repeatCard = cardData.specialCards.repeatCard;
    this.assert(repeatCard, '–ö–∞—Ä—Ç–∞ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
    this.assertEqual(repeatCard.name, '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', '–ò–º—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ');
});

tester.test('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –í—Å–µ –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', async function() {
    const response = await fetch('cards.json');
    const cardData = await response.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Attack Cards
    [...cardData.basePlayerCards, ...cardData.baseEnemyCards, ...cardData.rareAttackCards].forEach(card => {
        if (card.category === '–ê—Ç–∞–∫–∞') {
            this.assert(card.damage !== undefined, `–ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å damage`);
            this.assert(['logic', 'emotion', 'random'].includes(card.effect),
                `–ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å effect: logic/emotion/random`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Defense Cards
    cardData.defenseCards.forEach(card => {
        this.assertEqual(card.category, '–ó–∞—â–∏—Ç–∞', `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ó–∞—â–∏—Ç–∞`);
        this.assert(card.heal !== undefined || card.shield !== undefined,
            `–ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å heal –∏–ª–∏ shield`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Evasion Cards
    cardData.evasionCards.forEach(card => {
        this.assertEqual(card.category, '–£–∫–ª–æ–Ω–µ–Ω–∏–µ', `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –£–∫–ª–æ–Ω–µ–Ω–∏–µ`);
        this.assert(['cancel', 'mirror', 'reflect'].includes(card.effect),
            `–ö–∞—Ä—Ç–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è "${card.name}" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å effect: cancel/mirror/reflect`);
    });
});

// ============================================
// –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–ù–°–û–õ–ò
// ============================================

window.runTests = () => tester.run();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log('%cüí° –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', 'color: #3498db; font-weight: bold');
console.log('%c–í–≤–µ–¥–∏—Ç–µ %crunTests()%c –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤',
    'color: #95a5a6', 'color: #2ecc71; font-weight: bold', 'color: #95a5a6');
