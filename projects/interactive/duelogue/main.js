console.log('main.js: Script start');

// –î–£–ï–õ–û–ì - –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä—ã –≤–º–µ—Å—Ç–µ

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
let gameEngine = null;
let cardManager = null;
let uiManager = null;
let visualManager = null;
let multiplayer = null;
let isMultiplayerGame = false;
let playerNickname = '';
let opponentNickname = '';

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥
let deckManager = {
    decks: [],
    selectedDeckId: null,

    loadDecks() {
        if (typeof DECKS_DATA !== 'undefined') {
            this.decks = DECKS_DATA.decks;
            this.selectedDeckId = DECKS_DATA.default;
        } else {
            console.error('‚ùå DECKS_DATA –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
            throw new Error('–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–æ–¥–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        return this.decks;
    },

    getSelectedDeck() {
        return this.decks.find(d => d.id === this.selectedDeckId);
    },

    selectDeck(deckId) {
        this.selectedDeckId = deckId;
        localStorage.setItem('selectedDeck', deckId);
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    SERVER_URL: 'wss://wo-server-v1.onrender.com', // Production server
};

// ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ =============

async function initGame() {
    try {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –î–£–ï–õ–û–ì...');

        deckManager.loadDecks();

        // Load custom decks from localStorage
        loadCustomDecks();

        const savedDeck = localStorage.getItem('selectedDeck');
        if (savedDeck && deckManager.decks.find(d => d.id === savedDeck)) {
            deckManager.selectedDeckId = savedDeck;
        }

        uiManager = new UIManager();
        visualManager = new VisualManager();

        multiplayer = new MultiplayerManager();
        multiplayer.playerId = 'player_' + Math.random().toString(36).substr(2, 9);
        console.log(`‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤. ID –∏–≥—Ä–æ–∫–∞: ${multiplayer.playerId}`);

        renderDeckSelector();
        showMainMenu();
        console.log('‚úÖ –î–£–ï–õ–û–ì –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    }
}

function loadCustomDecks() {
    const customDecks = JSON.parse(localStorage.getItem('customDecks') || '[]');
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${customDecks.length} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–ª–æ–¥`);

    customDecks.forEach(customDeck => {
        // Add to CARDS_DATA
        if (typeof CARDS_DATA === 'undefined') {
            window.CARDS_DATA = {};
        }
        CARDS_DATA[`${customDeck.id}.json`] = customDeck.data;

        // Add to deck manager if not already there
        if (!deckManager.decks.find(d => d.id === customDeck.id)) {
            deckManager.decks.push({
                id: customDeck.id,
                name: customDeck.name,
                description: customDeck.description,
                file: `${customDeck.id}.json`,
                theme: 'custom'
            });
        }
    });
}

// ============= –ú–ï–ù–ï–î–ñ–ï–† –ö–û–õ–û–î =============

function renderDeckSelector() {
    const deckList = document.getElementById('deckList');
    if (!deckList) return;

    deckList.innerHTML = '';
    deckManager.decks.forEach(deck => {
        const deckCard = document.createElement('div');
        deckCard.className = 'deck-card';
        if (deck.id === deckManager.selectedDeckId) {
            deckCard.classList.add('selected');
        }
        deckCard.innerHTML = `<div class="deck-card-name">${deck.name}</div><div class="deck-card-desc">${deck.description}</div>`;
        deckCard.addEventListener('click', () => selectDeck(deck.id));
        deckList.appendChild(deckCard);
    });
}

function selectDeck(deckId) {
    deckManager.selectDeck(deckId);
    renderDeckSelector();
}

// ============= –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø =============

function showMainMenu() {
    document.getElementById('menuScreen').classList.remove('hidden');
    document.getElementById('endgameScreen').classList.add('hidden');
    document.getElementById('multiplayerScreen').classList.add('hidden');
    document.getElementById('deckSelectorScreen').classList.add('hidden');
    document.getElementById('gameWrapper').style.display = 'none';
    document.getElementById('pauseButton').classList.add('hidden');
}

function showGameScreen() {
    document.getElementById('menuScreen').classList.add('hidden');
    document.getElementById('multiplayerScreen').classList.add('hidden');
    document.getElementById('deckSelectorScreen').classList.add('hidden');
    document.getElementById('gameWrapper').style.display = 'flex';
    document.getElementById('pauseButton').classList.remove('hidden');
}

function showDeckSelector() {
    document.getElementById('deckSelectorScreen').classList.remove('hidden');
    document.getElementById('menuScreen').classList.add('hidden');
}

function closeDeckSelector() {
    document.getElementById('deckSelectorScreen').classList.add('hidden');
    document.getElementById('menuScreen').classList.remove('hidden');
}

// ============= –†–ï–î–ê–ö–¢–û–† –ö–û–õ–û–î –° AI =============

function showDeckEditor() {
    document.getElementById('deckEditorScreen').classList.remove('hidden');
    document.getElementById('menuScreen').classList.add('hidden');

    // Setup character counter
    const promptInput = document.getElementById('deckPromptInput');
    const charCount = document.getElementById('promptCharCount');
    promptInput.addEventListener('input', () => {
        charCount.textContent = promptInput.value.length;
    });
}

function closeDeckEditor() {
    document.getElementById('deckEditorScreen').classList.add('hidden');
    document.getElementById('menuScreen').classList.remove('hidden');

    // Reset form
    document.getElementById('deckPromptInput').value = '';
    document.getElementById('promptCharCount').textContent = '0';
    document.getElementById('deckEditorStatus').textContent = '';
    document.getElementById('deckEditorLoading').style.display = 'none';
}

async function generateDeck() {
    const promptInput = document.getElementById('deckPromptInput');
    const prompt = promptInput.value.trim();
    const statusEl = document.getElementById('deckEditorStatus');
    const loadingEl = document.getElementById('deckEditorLoading');
    const generateBtn = document.getElementById('generateDeckBtn');

    if (!prompt) {
        statusEl.textContent = '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–µ–±–∞—Ç–æ–≤';
        statusEl.style.color = '#f39c12';
        return;
    }

    if (prompt.length < 20) {
        statusEl.textContent = '‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.';
        statusEl.style.color = '#f39c12';
        return;
    }

    // Disable button and show loading
    generateBtn.disabled = true;
    generateBtn.style.opacity = '0.6';
    generateBtn.style.cursor = 'not-allowed';
    loadingEl.style.display = 'block';
    statusEl.textContent = '';

    try {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–ª–æ–¥—ã...');

        const response = await fetch('https://wo-server-v1.onrender.com/api/generate-deck', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ prompt })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('‚úÖ –ö–æ–ª–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        // Add deck to manager
        addGeneratedDeck(data.deck, data.deckName, data.description);

        // Show success message
        loadingEl.style.display = 'none';
        statusEl.textContent = `‚úÖ –ö–æ–ª–æ–¥–∞ "${data.deckName}" —Å–æ–∑–¥–∞–Ω–∞!`;
        statusEl.style.color = '#27ae60';

        // Switch to deck selector after 2 seconds
        setTimeout(() => {
            closeDeckEditor();
            showDeckSelector();
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–¥—ã:', error);
        loadingEl.style.display = 'none';
        statusEl.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
        statusEl.style.color = '#e74c3c';
    } finally {
        // Re-enable button
        generateBtn.disabled = false;
        generateBtn.style.opacity = '1';
        generateBtn.style.cursor = 'pointer';
    }
}

function addGeneratedDeck(deckData, deckName, description) {
    // Generate unique ID
    const deckId = 'custom_' + Date.now();

    // Add to CARDS_DATA
    if (typeof CARDS_DATA === 'undefined') {
        window.CARDS_DATA = {};
    }
    CARDS_DATA[`${deckId}.json`] = deckData;

    // Add to deck manager
    const newDeck = {
        id: deckId,
        name: deckName,
        description: description,
        file: `${deckId}.json`,
        theme: 'custom'
    };

    deckManager.decks.push(newDeck);

    // Save to localStorage
    const customDecks = JSON.parse(localStorage.getItem('customDecks') || '[]');
    customDecks.push({
        id: deckId,
        name: deckName,
        description: description,
        data: deckData
    });
    localStorage.setItem('customDecks', JSON.stringify(customDecks));

    console.log(`‚úÖ –ö–æ–ª–æ–¥–∞ "${deckName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä`);

    // Refresh deck selector
    renderDeckSelector();
}

function showRules() {
    alert(`–ü–†–ê–í–ò–õ–ê –ò–ì–†–´ –î–£–ï–õ–û–ì

–¶–µ–ª—å: –ü–µ—Ä–≤—ã–º –Ω–∞–±—Ä–∞—Ç—å 3 –æ—á–∫–∞.

–ú–µ—Ö–∞–Ω–∏–∫–∞:
‚Ä¢ –£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –õ–æ–≥–∏–∫–∞ –∏ –≠–º–æ—Ü–∏–∏ (–ø–æ 4 –µ–¥–∏–Ω–∏—Ü—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
‚Ä¢ –ö–∞—Ä—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ç—Ä–∏ —Ç–∏–ø–∞:
  - –ê—Ç–∞–∫–∞: –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ª–æ–≥–∏–∫–µ –∏–ª–∏ —ç–º–æ—Ü–∏—è–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  - –ó–∞—â–∏—Ç–∞: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –∏–ª–∏ —ç–º–æ—Ü–∏–∏
  - –£–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ—Ç–º–µ–Ω—è–µ—Ç, –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ –∑–µ—Ä–∫–∞–ª–∏—Ç –∫–∞—Ä—Ç—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

–û—á–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞:
‚Ä¢ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–∞–¥–∞–µ—Ç –¥–æ 0 ‚Üí +1 –æ—á–∫–æ
‚Ä¢ –≠–º–æ—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–∞–¥–∞—é—Ç –¥–æ 0 ‚Üí +1 –æ—á–∫–æ
‚Ä¢ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –õ–æ–≥–∏–∫–∏ –ò –≠–º–æ—Ü–∏–π 3 —Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥ ‚Üí +1 –æ—á–∫–æ

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –£—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–∏—Ö –≠–º–æ—Ü–∏–π (–º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞)
‚Ä¢ –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∏–º–∏—Ç –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ (–≤—ã—à–µ –ª–æ–≥–∏–∫–∞ = –±–æ–ª—å—à–µ –∫–∞—Ä—Ç)
‚Ä¢ –ê—Ç–∞–∫–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –ó–∞—â–∏—Ç—É —Å –±–æ–Ω—É—Å–æ–º 50%
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ª–æ–≤–∏—Ç –≤ –ª–æ–≤—É—à–∫—É –£–∫–ª–æ–Ω–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–æ–º 50%

–£–¥–∞—á–∏ –≤ –±–∏—Ç–≤–µ!`);
}

function hideMultiplayerScreen() {
    document.getElementById('multiplayerScreen').classList.add('hidden');
}

function showEndgameScreen(isVictory) {
    const endgameScreen = document.getElementById('endgameScreen');
    if (endgameScreen) endgameScreen.classList.remove('hidden');
    document.getElementById('gameWrapper').style.display = 'none';

    const endgameTitle = document.getElementById('endgameTitle');
    if (endgameTitle) {
        endgameTitle.textContent = isVictory ? 'üèÜ –ü–æ–±–µ–¥–∞!' : 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
        endgameTitle.className = isVictory ? 'endgame-title victory' : 'endgame-title defeat';
    }
}

// ============= SINGLE PLAYER =============

async function startSinglePlayerGame() {
    console.log('üéÆ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã');
    isMultiplayerGame = false;
    showGameScreen();

    document.getElementById('dialog').innerHTML = '';
    const selectedDeck = deckManager.getSelectedDeck();
    cardManager = new CardManager();
    await cardManager.loadCards(selectedDeck.file);
    console.log('‚úÖ –ö–∞—Ä—Ç—ã –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    gameEngine = new GameEngine(cardManager, uiManager, visualManager);
    await gameEngine.startGame();
    console.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
}

function restartGame() {
    if (isMultiplayerGame) {
        exitToMenu();
    } else {
        startSinglePlayerGame();
    }
}

function exitToMenu() {
    showMainMenu();
    if (gameEngine) {
        gameEngine.gameActive = false;
        gameEngine = null;
    }
    if (multiplayer && multiplayer.connected) {
        multiplayer.disconnect();
    }
    isMultiplayerGame = false;
}

// ============= MULTIPLAYER =============

async function showMultiplayerScreen() {
    document.getElementById('multiplayerScreen').classList.remove('hidden');
    document.getElementById('menuScreen').classList.add('hidden');
    switchMultiplayerTab('create');

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
    const savedNickname = localStorage.getItem('playerNickname');
    if (savedNickname) {
        document.getElementById('playerNicknameInput').value = savedNickname;
        playerNickname = savedNickname;
    } else {
        playerNickname = '–ò–≥—Ä–æ–∫_' + Math.random().toString(36).substr(2, 5);
        document.getElementById('playerNicknameInput').value = playerNickname;
    }

    if (!multiplayer.connected) {
        try {
            document.getElementById('createStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';
            await multiplayer.connect(CONFIG.SERVER_URL);
            document.getElementById('createStatus').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ';
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');
            setupMultiplayerCallbacks();
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É:', error);
            document.getElementById('createStatus').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.';
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            showMainMenu();
        }
    }
}

function setupMultiplayerCallbacks() {
    multiplayer.onRoomCreated = (roomId) => {
        document.getElementById('roomCodeDisplay').textContent = roomId;
        document.getElementById('roomCreatedPanel').style.display = 'block';
        document.getElementById('createStatus').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...';
    };

    multiplayer.onOpponentJoined = (opponentId, opponentNick) => {
        opponentNickname = opponentNick || '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        console.log(`‚úÖ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${opponentNickname}`);
    };

    multiplayer.onGameStart = async (data) => {
        const isHost = multiplayer.playerId === data.hostId;
        await startMultiplayerGame(isHost);
    };

    multiplayer.onGameStateSync = (state) => {
        if (multiplayer.isHost) return;
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–æ—Å—Ç–∞');
        showGameScreen();
        updatePlayerNames();
        const selectedDeck = deckManager.getSelectedDeck();
        cardManager = new CardManager();
        cardManager.loadCards(selectedDeck.file).then(() => {
            gameEngine = new GameEngine(cardManager, uiManager, visualManager, { isMultiplayer: true, isGuest: true });
            gameEngine.applyState(state);
        });
    };

    multiplayer.onOpponentMove = (cardData) => {
        if (gameEngine) {
            gameEngine.handleOpponentMove(cardData);
        }
    };

    multiplayer.onOpponentDisconnected = () => {
        if (gameEngine && gameEngine.gameActive) {
            alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
            exitToMenu();
        }
    };

    multiplayer.onError = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:', error);
        alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
    };
}

function switchMultiplayerTab(tab) {
    const createTab = document.getElementById('tabCreate');
    const joinTab = document.getElementById('tabJoin');
    const createPanel = document.getElementById('panelCreate');
    const joinPanel = document.getElementById('panelJoin');
    createTab.classList.toggle('active', tab === 'create');
    joinTab.classList.toggle('active', tab === 'join');
    createPanel.classList.toggle('active', tab === 'create');
    joinPanel.classList.toggle('active', tab === 'join');
}

function createRoom() {
    if (!multiplayer || !multiplayer.connected) return alert('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
    playerNickname = document.getElementById('playerNicknameInput').value.trim() || '–ò–≥—Ä–æ–∫_' + Math.random().toString(36).substr(2, 5);
    localStorage.setItem('playerNickname', playerNickname);

    multiplayer.playerNickname = playerNickname;
    multiplayer.createRoom();
}

function joinRoom() {
    if (!multiplayer || !multiplayer.connected) return alert('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
    playerNickname = document.getElementById('playerNicknameInput').value.trim() || '–ò–≥—Ä–æ–∫_' + Math.random().toString(36).substr(2, 5);
    localStorage.setItem('playerNickname', playerNickname);

    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    if (roomCode.length !== 6) return alert('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.');

    multiplayer.playerNickname = playerNickname;
    multiplayer.joinRoom(roomCode);
}

function cancelRoom() {
    hideMultiplayerScreen();
    showMainMenu();
}

async function startMultiplayerGame(isHost) {
    console.log(`üéÆ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–≥—Ä—ã (${isHost ? '–•–æ—Å—Ç' : '–ì–æ—Å—Ç—å'})`);
    isMultiplayerGame = true;

    const selectedDeck = deckManager.getSelectedDeck();
    cardManager = new CardManager();
    await cardManager.loadCards(selectedDeck.file);
    console.log('‚úÖ –ö–∞—Ä—Ç—ã –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    if (isHost) {
        showGameScreen();
        updatePlayerNames();
        gameEngine = new GameEngine(cardManager, uiManager, visualManager, { isMultiplayer: true });
        await gameEngine.initializeMultiplayerGame(true);
        const initialState = gameEngine.getState();
        multiplayer.sendGameState(initialState);
        console.log('üì§ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ—Å—Ç—é');
    } else {
        console.log('üßò –ì–æ—Å—Ç—å –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–æ—Å—Ç–∞...');
        document.getElementById('joinStatus').textContent = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...';
    }
}

function updatePlayerNames() {
    const playerNameEl = document.getElementById('playerNameDisplay');
    const enemyNameEl = document.getElementById('enemyNameDisplay');

    if (isMultiplayerGame) {
        if (playerNameEl) playerNameEl.textContent = playerNickname || '–¢—ã';
        if (enemyNameEl) enemyNameEl.textContent = opponentNickname || '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
    } else {
        if (playerNameEl) playerNameEl.textContent = '–¢—ã';
        if (enemyNameEl) enemyNameEl.textContent = '–°–∫–µ–ø—Ç–∏–∫';
    }
}

console.log('main.js: Assigning functions to window...');

// ============= –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –í WINDOW =============

window.startSinglePlayerGame = startSinglePlayerGame;
window.showMultiplayerScreen = showMultiplayerScreen;
window.showDeckSelector = showDeckSelector;
window.closeDeckSelector = closeDeckSelector;
window.showDeckEditor = showDeckEditor;
window.closeDeckEditor = closeDeckEditor;
window.generateDeck = generateDeck;
window.showRules = showRules;
window.restartGame = restartGame;
window.exitToMenu = exitToMenu;
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.cancelRoom = cancelRoom;
window.switchMultiplayerTab = switchMultiplayerTab;

console.log('main.js: Functions assigned. Script end.');

// ============= –ó–ê–ü–£–°–ö –ò–ì–†–´ =============

window.addEventListener('DOMContentLoaded', initGame);
