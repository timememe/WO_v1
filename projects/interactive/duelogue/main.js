// –î–£–ï–õ–û–ì - –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä—ã –≤–º–µ—Å—Ç–µ

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
let gameEngine = null;
let cardManager = null;
let uiManager = null;
let visualManager = null;
let multiplayer = null;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥
let deckManager = {
    decks: [],
    selectedDeckId: null,

    loadDecks() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ fetch
        if (typeof DECKS_DATA !== 'undefined') {
            this.decks = DECKS_DATA.decks;
            this.selectedDeckId = DECKS_DATA.default;
            console.log('‚úÖ –ö–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', this.decks.length);
        } else {
            console.error('‚ùå DECKS_DATA –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
            throw new Error('–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–æ–¥–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        return this.decks;
    },

    getSelectedDeck() {
        return this.decks.find(d => d.id === this.selectedDeckId);
    },

    selectDeck(deckId) {
        this.selectedDeckId = deckId;
        localStorage.setItem('selectedDeck', deckId);
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    SERVER_URL: 'wss://wo-server-v1.onrender.com', // Production server
    DECKS_PATH: 'decks.json'
};

// ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ =============

async function initGame() {
    try {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –î–£–ï–õ–û–ì...');

        deckManager.loadDecks();
        console.log('‚úÖ –ö–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', deckManager.decks.length);

        const savedDeck = localStorage.getItem('selectedDeck');
        if (savedDeck && deckManager.decks.find(d => d.id === savedDeck)) {
            deckManager.selectedDeckId = savedDeck;
        }

        uiManager = new UIManager();
        console.log('‚úÖ UI –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤');

        visualManager = new VisualManager();
        console.log('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤');

        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MultiplayerManager
        multiplayer = new MultiplayerManager();
        multiplayer.playerId = 'player_' + Math.random().toString(36).substr(2, 9);
        console.log(`‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤. ID –∏–≥—Ä–æ–∫–∞: ${multiplayer.playerId}`);

        renderDeckSelector();
        showMainMenu();
        console.log('‚úÖ –î–£–ï–õ–û–ì –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    }
}

// ... (skip to multiplayer section)

async function showMultiplayerScreen() {
    const multiplayerScreen = document.getElementById('multiplayerScreen');
    const menuScreen = document.getElementById('menuScreen');

    if (multiplayerScreen) multiplayerScreen.classList.remove('hidden');
    if (menuScreen) menuScreen.classList.add('hidden');
    switchMultiplayerTab('create');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!multiplayer.connected) {
        try {
            const createStatus = document.getElementById('createStatus');
            if (createStatus) createStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';
            
            await multiplayer.connect(CONFIG.SERVER_URL);
            
            if (createStatus) createStatus.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ';
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            setupMultiplayerCallbacks();

        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É:', error);
            const createStatus = document.getElementById('createStatus');
            if (createStatus) createStatus.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.';
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            showMainMenu();
        }
    }
}

// ... (skip to createRoom)

async function createRoom() {
    if (!multiplayer || !multiplayer.connected) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.');
        return;
    }
    console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...');
    multiplayer.createRoom();
}

async function joinRoom() {
    if (!multiplayer || !multiplayer.connected) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.');
        return;
    }
    
    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    if (roomCode.length !== 6) {
        alert('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.');
        return;
    }
    console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomCode);
    multiplayer.joinRoom(roomCode);
}

function cancelRoom() {
    console.log('‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
    if (multiplayer) {
        multiplayer.disconnect();
        multiplayer = null;
    }
    document.getElementById('roomCreatedPanel').style.display = 'none';
    hideMultiplayerScreen();
    showMainMenu();
}

function setupMultiplayerCallbacks() {
    multiplayer.onRoomCreated = (roomId) => {
        console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomId);
        document.getElementById('roomCodeDisplay').textContent = roomId;
        document.getElementById('roomCreatedPanel').style.display = 'block';
        const createStatus = document.getElementById('createStatus');
        if (createStatus) createStatus.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...';
    };

    multiplayer.onGameStart = async (data) => {
        console.log('üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –î–∞–Ω–Ω—ã–µ:', data);
        const isHost = multiplayer.playerId === data.hostId;
        await startMultiplayerGame(isHost);
    };

    multiplayer.onGameStateSync = (state) => {
        if (multiplayer.isHost) return; // –•–æ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π

        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–æ—Å—Ç–∞');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        showGameScreen();

        // –ì–æ—Å—Ç—å —Å–æ–∑–¥–∞–µ—Ç –¥–≤–∏–∂–æ–∫, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        gameEngine = new GameEngine(cardManager, uiManager, visualManager, { isMultiplayer: true, isGuest: true });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–æ—Å—Ç–∞
        gameEngine.applyState(state);
    };

    multiplayer.onOpponentMove = (cardData) => {
        if (gameEngine) {
            gameEngine.handleOpponentMove(cardData);
        }
    };

    multiplayer.onOpponentDisconnected = () => {
        if (gameEngine && gameEngine.gameActive) {
            alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
            exitToMenu();
        }
    };

    multiplayer.onError = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:', error);
        const createStatus = document.getElementById('createStatus');
        const joinStatus = document.getElementById('joinStatus');
        if (createStatus) createStatus.textContent = `–û—à–∏–±–∫–∞: ${error}`;
        if (joinStatus) joinStatus.textContent = `–û—à–∏–±–∫–∞: ${error}`;
        alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
    };
}

async function startMultiplayerGame(isHost) {
    console.log(`üéÆ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–≥—Ä—ã (${isHost ? '–•–æ—Å—Ç' : '–ì–æ—Å—Ç—å'})`);
    isMultiplayerGame = true;
    showGameScreen();

    const dialog = document.getElementById('dialog');
    if (dialog) dialog.innerHTML = '';

    const selectedDeck = deckManager.getSelectedDeck();
    cardManager = new CardManager();
    await cardManager.loadCards(selectedDeck.file);
    console.log('‚úÖ –ö–∞—Ä—Ç—ã –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    if (isHost) {
        // –•–æ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Å—Ç—é
        gameEngine = new GameEngine(cardManager, uiManager, visualManager, { isMultiplayer: true });
        await gameEngine.initializeMultiplayerGame(true);
        const initialState = gameEngine.getState();
        multiplayer.sendGameState(initialState);
        console.log('üì§ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ—Å—Ç—é');
    } else {
        // –ì–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ö–æ—Å—Ç–∞ (onGameStateSync)
        console.log('üßò –ì–æ—Å—Ç—å –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–æ—Å—Ç–∞...');
        const joinStatus = document.getElementById('joinStatus');
        if(joinStatus) joinStatus.textContent = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...';
    }
}

// ============= –ü–ê–£–ó–ê =============

function togglePause() {
    const pauseScreen = document.getElementById('pauseScreen');
    const isVisible = !pauseScreen.classList.contains('hidden');

    if (isVisible) {
        hidePauseScreen();
    } else {
        showPauseScreen();
    }
}

function showPauseScreen() {
    const pauseScreen = document.getElementById('pauseScreen');
    if (!pauseScreen || !gameEngine || !gameEngine.gameActive) return;

    pauseScreen.classList.remove('hidden');

    if (gameEngine && gameEngine.visualManager) {
        gameEngine.visualManager.cancelSpeech();
    }
    console.log('‚è∏ –ü–∞—É–∑–∞');
}

function hidePauseScreen() {
    const pauseScreen = document.getElementById('pauseScreen');
    if (pauseScreen) pauseScreen.classList.add('hidden');
    console.log('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ');
}

function resumeGame() {
    hidePauseScreen();
}

// –ö–ª–∞–≤–∏—à–∞ ESC –¥–ª—è –ø–∞—É–∑—ã
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        const pauseScreen = document.getElementById('pauseScreen');
        const menuScreen = document.getElementById('menuScreen');
        const endgameScreen = document.getElementById('endgameScreen');

        if (pauseScreen && menuScreen && endgameScreen) {
            const menuHidden = menuScreen.classList.contains('hidden');
            const endgameHidden = endgameScreen.classList.contains('hidden');
            const pauseHidden = pauseScreen.classList.contains('hidden');

            if (menuHidden && endgameHidden && pauseHidden && gameEngine?.gameActive) {
                showPauseScreen();
            } else if (!pauseHidden) {
                resumeGame();
            }
        }
    }
});

// ============= –ü–†–ê–í–ò–õ–ê –ò–ì–†–´ =============

function showRules() {
    alert(`üìú –ü–†–ê–í–ò–õ–ê –î–£–ï–õ–û–ì–ê

üéØ –¶–ï–õ–¨: –ù–∞–±—Ä–∞—Ç—å 3 –ø–æ–±–µ–¥–Ω—ã—Ö –æ—á–∫–∞ –ø–µ—Ä–≤—ã–º

üí´ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
‚Ä¢ –õ–æ–≥–∏–∫–∞ - —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
‚Ä¢ –≠–º–æ—Ü–∏–∏ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

üé¥ –¢–ò–ü–´ –ö–ê–†–¢:
‚Ä¢ –ê—Ç–∞–∫–∞ (üó°) - —É—Ä–æ–Ω –ø–æ –ª–æ–≥–∏–∫–µ/—ç–º–æ—Ü–∏—è–º
‚Ä¢ –ó–∞—â–∏—Ç–∞ (üõ°) - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —â–∏—Ç
‚Ä¢ –£–∫–ª–æ–Ω–µ–Ω–∏–µ (‚ö°) - –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ

üé≤ –•–û–î –ò–ì–†–´:
1. –ö–∞–∂–¥—ã–π —Ö–æ–¥ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É
2. –ö–∞—Ä—Ç—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
3. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –Ω–∞–±–µ—Ä–µ—Ç 3 –æ—á–∫–∞

–£–¥–∞—á–∏! üéÆ`);
}

// ============= –≠–ö–°–ü–û–†–¢ –õ–û–ì–û–í =============

function exportLogs() {
    if (!gameEngine || !gameEngine.log || gameEngine.log.length === 0) {
        alert('–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É.');
        return;
    }

    const logData = JSON.stringify(gameEngine.log, null, 2);
    const blob = new Blob([logData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `duelogue_log_${new Date().toISOString().slice(0,10)}.json`;
    a.click();

    URL.revokeObjectURL(url);
    console.log('üì• –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
}

// ============= –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï checkVictory =============

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
const originalCheckVictory = GameEngine.prototype.checkVictory;
GameEngine.prototype.checkVictory = function() {
    const result = originalCheckVictory.call(this);

    if (result) {
        const isVictory = this.player.points >= 3;
        setTimeout(() => {
            showEndgameScreen(isVictory);
        }, 2000);
    }

    return result;
};

// ============= –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –í WINDOW =============

window.startSinglePlayerGame = startSinglePlayerGame;
window.showMultiplayerScreen = showMultiplayerScreen;
window.showDeckSelector = showDeckSelector;
window.closeDeckSelector = closeDeckSelector;
window.showRules = showRules;
window.restartGame = restartGame;
window.exitToMenu = exitToMenu;
window.showPauseScreen = showPauseScreen;
window.resumeGame = resumeGame;
window.togglePause = togglePause;
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.cancelRoom = cancelRoom;
window.switchMultiplayerTab = switchMultiplayerTab;
window.exportLogs = exportLogs;

// ============= –ó–ê–ü–£–°–ö –ò–ì–†–´ =============

window.addEventListener('DOMContentLoaded', initGame);

console.log('‚ú® –ú–æ–¥—É–ª—å main.js –∑–∞–≥—Ä—É–∂–µ–Ω');
