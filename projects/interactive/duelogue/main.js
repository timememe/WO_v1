// –î–£–ï–õ–û–ì - –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä—ã –≤–º–µ—Å—Ç–µ

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
let gameEngine = null;
let cardManager = null;
let uiManager = null;
let visualManager = null;
let multiplayer = null;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥
let deckManager = {
    decks: [],
    selectedDeckId: null,

    loadDecks() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ fetch
        if (typeof DECKS_DATA !== 'undefined') {
            this.decks = DECKS_DATA.decks;
            this.selectedDeckId = DECKS_DATA.default;
            console.log('‚úÖ –ö–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', this.decks.length);
        } else {
            console.error('‚ùå DECKS_DATA –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
            throw new Error('–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–æ–¥–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        return this.decks;
    },

    getSelectedDeck() {
        return this.decks.find(d => d.id === this.selectedDeckId);
    },

    selectDeck(deckId) {
        this.selectedDeckId = deckId;
        localStorage.setItem('selectedDeck', deckId);
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    SERVER_URL: 'wss://wo-server-v1.onrender.com', // Production server
    DECKS_PATH: 'decks.json'
};

// ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ =============

async function initGame() {
    try {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –î–£–ï–õ–û–ì...');

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        deckManager.loadDecks();
        console.log('‚úÖ –ö–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', deckManager.decks.length);

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –∏–∑ localStorage
        const savedDeck = localStorage.getItem('selectedDeck');
        if (savedDeck && deckManager.decks.find(d => d.id === savedDeck)) {
            deckManager.selectedDeckId = savedDeck;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI –º–µ–Ω–µ–¥–∂–µ—Ä
        uiManager = new UIManager();
        console.log('‚úÖ UI –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        visualManager = new VisualManager();
        console.log('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤');

        // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–ª–æ–¥
        renderDeckSelector();

        // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        showMainMenu();
        console.log('‚úÖ –î–£–ï–õ–û–ì –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    }
}

// ============= –ú–ï–ù–ï–î–ñ–ï–† –ö–û–õ–û–î =============

function renderDeckSelector() {
    const deckList = document.getElementById('deckList');
    if (!deckList) return;

    deckList.innerHTML = '';

    deckManager.decks.forEach(deck => {
        const deckCard = document.createElement('div');
        deckCard.className = 'deck-card';
        if (deck.id === deckManager.selectedDeckId) {
            deckCard.classList.add('selected');
        }

        deckCard.innerHTML = `
            <div class="deck-card-name">${deck.name}</div>
            <div class="deck-card-desc">${deck.description}</div>
        `;

        deckCard.addEventListener('click', () => selectDeck(deck.id));

        deckList.appendChild(deckCard);
    });
}

function selectDeck(deckId) {
    deckManager.selectDeck(deckId);
    renderDeckSelector();
    console.log('üé¥ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–¥–∞:', deckManager.getSelectedDeck().name);
}

// ============= –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø =============

function showMainMenu() {
    const menuScreen = document.getElementById('menuScreen');
    const endgameScreen = document.getElementById('endgameScreen');
    const multiplayerScreen = document.getElementById('multiplayerScreen');
    const gameWrapper = document.getElementById('gameWrapper');
    const pauseButton = document.getElementById('pauseButton');

    if (menuScreen) menuScreen.classList.remove('hidden');
    if (endgameScreen) endgameScreen.classList.add('hidden');
    if (multiplayerScreen) multiplayerScreen.classList.add('hidden');
    if (gameWrapper) gameWrapper.style.display = 'none';
    if (pauseButton) pauseButton.classList.add('hidden');
}

function hideMainMenu() {
    const menuScreen = document.getElementById('menuScreen');
    if (menuScreen) menuScreen.classList.add('hidden');
}

function showGameScreen() {
    const menuScreen = document.getElementById('menuScreen');
    const endgameScreen = document.getElementById('endgameScreen');
    const multiplayerScreen = document.getElementById('multiplayerScreen');
    const gameWrapper = document.getElementById('gameWrapper');
    const pauseButton = document.getElementById('pauseButton');

    if (menuScreen) menuScreen.classList.add('hidden');
    if (endgameScreen) endgameScreen.classList.add('hidden');
    if (multiplayerScreen) multiplayerScreen.classList.add('hidden');
    if (gameWrapper) gameWrapper.style.display = 'flex';
    if (pauseButton) pauseButton.classList.remove('hidden');
}

function showEndgameScreen(isVictory) {
    const endgameScreen = document.getElementById('endgameScreen');
    const gameWrapper = document.getElementById('gameWrapper');

    if (endgameScreen) endgameScreen.classList.remove('hidden');
    if (gameWrapper) gameWrapper.style.display = 'none';

    const endgameTitle = document.getElementById('endgameTitle');
    if (endgameTitle) {
        if (isVictory) {
            endgameTitle.textContent = 'üèÜ –ü–æ–±–µ–¥–∞!';
            endgameTitle.className = 'endgame-title victory';
        } else {
            endgameTitle.textContent = 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
            endgameTitle.className = 'endgame-title defeat';
        }
    }

    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (gameEngine) {
        const finalPlayerPoints = document.getElementById('finalPlayerPoints');
        const finalEnemyPoints = document.getElementById('finalEnemyPoints');
        const totalTurns = document.getElementById('totalTurns');
        const totalCards = document.getElementById('totalCards');

        if (finalPlayerPoints) finalPlayerPoints.textContent = gameEngine.player.points;
        if (finalEnemyPoints) finalEnemyPoints.textContent = gameEngine.enemy.points;
        if (totalTurns) totalTurns.textContent = gameEngine.turn;
        if (totalCards) totalCards.textContent = gameEngine.player.cards.length + gameEngine.player.discardPile.length;
    }
}

function hideEndgameScreen() {
    const endgameScreen = document.getElementById('endgameScreen');
    if (endgameScreen) endgameScreen.classList.add('hidden');
}

function showMultiplayerScreen() {
    const multiplayerScreen = document.getElementById('multiplayerScreen');
    const menuScreen = document.getElementById('menuScreen');

    if (multiplayerScreen) multiplayerScreen.classList.remove('hidden');
    if (menuScreen) menuScreen.classList.add('hidden');
    switchMultiplayerTab('create');
}

function hideMultiplayerScreen() {
    const multiplayerScreen = document.getElementById('multiplayerScreen');
    if (multiplayerScreen) multiplayerScreen.classList.add('hidden');
}

function showDeckSelector() {
    const deckSelectorScreen = document.getElementById('deckSelectorScreen');
    const menuScreen = document.getElementById('menuScreen');

    if (deckSelectorScreen) deckSelectorScreen.classList.remove('hidden');
    if (menuScreen) menuScreen.classList.add('hidden');
}

function closeDeckSelector() {
    const deckSelectorScreen = document.getElementById('deckSelectorScreen');
    const menuScreen = document.getElementById('menuScreen');

    if (deckSelectorScreen) deckSelectorScreen.classList.add('hidden');
    if (menuScreen) menuScreen.classList.remove('hidden');
}

// ============= SINGLE PLAYER =============

async function startSinglePlayerGame() {
    console.log('üéÆ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã');
    hideMainMenu();
    showGameScreen();

    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
    const dialog = document.getElementById('dialog');
    if (dialog) dialog.innerHTML = '';

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–¥—ã
    const selectedDeck = deckManager.getSelectedDeck();
    console.log('üé¥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã:', selectedDeck.name);

    cardManager = new CardManager();
    await cardManager.loadCards(selectedDeck.file);
    console.log('‚úÖ –ö–∞—Ä—Ç—ã –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
    gameEngine = new GameEngine(cardManager, uiManager, visualManager);
    await gameEngine.startGame();

    console.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
}

function restartGame() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
    hidePauseScreen();
    hideEndgameScreen();
    startSinglePlayerGame();
}

function exitToMenu() {
    console.log('üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    hidePauseScreen();
    hideEndgameScreen();
    showMainMenu();

    // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    if (gameEngine) {
        gameEngine.gameActive = false;
        gameEngine = null;
    }
    if (multiplayer) {
        multiplayer.disconnect();
        multiplayer = null;
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
    const dialog = document.getElementById('dialog');
    if (dialog) dialog.innerHTML = '';
}

// ============= MULTIPLAYER =============

function switchMultiplayerTab(tab) {
    const createTab = document.getElementById('tabCreate');
    const joinTab = document.getElementById('tabJoin');
    const createPanel = document.getElementById('panelCreate');
    const joinPanel = document.getElementById('panelJoin');

    if (tab === 'create') {
        createTab.classList.add('active');
        joinTab.classList.remove('active');
        createPanel.classList.add('active');
        joinPanel.classList.remove('active');
    } else {
        createTab.classList.remove('active');
        joinTab.classList.add('active');
        createPanel.classList.remove('active');
        joinPanel.classList.add('active');
    }
}

async function createRoom() {
    console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...');
    const createStatus = document.getElementById('createStatus');
    if (createStatus) createStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';

    try {
        multiplayer = new MultiplayerManager();
        multiplayer.playerId = 'player_' + Math.random().toString(36).substr(2, 9);

        multiplayer.onRoomCreated = (roomId) => {
            console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomId);
            document.getElementById('roomCodeDisplay').textContent = roomId;
            document.getElementById('roomCreatedPanel').style.display = 'block';
            if (createStatus) createStatus.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...';
        };

        multiplayer.onOpponentJoined = async () => {
            console.log('üë• –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è');
            if (createStatus) createStatus.textContent = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º...';
            await new Promise(resolve => setTimeout(resolve, 1000));
            hideMultiplayerScreen();
            await startMultiplayerGame(true); // –•–æ—Å—Ç
        };

        multiplayer.onError = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:', error);
            if (createStatus) createStatus.textContent = `–û—à–∏–±–∫–∞: ${error}`;
        };

        await multiplayer.connect(CONFIG.SERVER_URL);
        multiplayer.createRoom();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        if (createStatus) createStatus.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8080');
    }
}

async function joinRoom() {
    const roomCode = document.getElementById('roomCodeInput').value.trim().toUpperCase();
    const joinStatus = document.getElementById('joinStatus');

    if (roomCode.length !== 6) {
        if (joinStatus) joinStatus.textContent = '–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥';
        return;
    }

    console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomCode);
    if (joinStatus) joinStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';

    try {
        multiplayer = new MultiplayerManager();
        multiplayer.playerId = 'player_' + Math.random().toString(36).substr(2, 9);

        multiplayer.onRoomJoined = async () => {
            console.log('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ');
            if (joinStatus) joinStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º...';
            await new Promise(resolve => setTimeout(resolve, 1000));
            hideMultiplayerScreen();
            await startMultiplayerGame(false); // –ì–æ—Å—Ç—å
        };

        multiplayer.onError = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            if (joinStatus) joinStatus.textContent = `–û—à–∏–±–∫–∞: ${error}`;
        };

        await multiplayer.connect(CONFIG.SERVER_URL);
        multiplayer.joinRoom(roomCode);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        if (joinStatus) joinStatus.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
}

function cancelRoom() {
    console.log('‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
    if (multiplayer) {
        multiplayer.disconnect();
        multiplayer = null;
    }
    document.getElementById('roomCreatedPanel').style.display = 'none';
    hideMultiplayerScreen();
    showMainMenu();
}

async function startMultiplayerGame(isHost) {
    console.log(`üéÆ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–≥—Ä—ã (${isHost ? '–•–æ—Å—Ç' : '–ì–æ—Å—Ç—å'})`);
    showGameScreen();

    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
    const dialog = document.getElementById('dialog');
    if (dialog) dialog.innerHTML = '';

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–¥—ã
    const selectedDeck = deckManager.getSelectedDeck();
    console.log('üé¥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã:', selectedDeck.name);

    cardManager = new CardManager();
    await cardManager.loadCards(selectedDeck.file);
    console.log('‚úÖ –ö–∞—Ä—Ç—ã –∫–æ–ª–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
    gameEngine = new GameEngine(cardManager, uiManager, visualManager);

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    multiplayer.onOpponentMove = async (cardData) => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', cardData.name);

        const enemyCard = gameEngine.enemy.cards.find(c => c.name === cardData.name);
        if (!enemyCard) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', cardData.name);
            return;
        }

        const {speechText, logText} = gameEngine.applyCard(enemyCard, gameEngine.enemy, gameEngine.player);

        if (speechText) {
            await visualManager.showSpeech(speechText, 'enemy');
        }

        if (enemyCard.usesLeft !== undefined) {
            enemyCard.usesLeft--;
            if (enemyCard.usesLeft <= 0) {
                gameEngine.enemy.cards = gameEngine.enemy.cards.filter(c => c !== enemyCard);
            }
        } else {
            gameEngine.enemy.cards = gameEngine.enemy.cards.filter(c => c !== enemyCard);
        }

        uiManager.renderStats(gameEngine.player, gameEngine.enemy);
        uiManager.renderCards(gameEngine.player.cards, gameEngine.playerTurn, gameEngine.playerHasPlayedCard, playMultiplayerCard);

        gameEngine.playerTurn = true;
        gameEngine.turn++;

        if (gameEngine.checkVictory()) {
            return;
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Ö–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    window.playMultiplayerCard = async function(card) {
        if (!gameEngine.playerTurn || card.used || gameEngine.playerHasPlayedCard || !gameEngine.gameActive) return;

        console.log('üé¥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞:', card.name);

        multiplayer.sendMove({
            name: card.name,
            category: card.category,
            effect: card.effect,
            damage: card.damage,
            heal: card.heal,
            shield: card.shield
        });

        const {speechText, logText} = gameEngine.applyCard(card, gameEngine.player, gameEngine.enemy);

        if (speechText) {
            await visualManager.showSpeech(speechText, 'player');
        }

        if (card.usesLeft !== undefined) {
            card.usesLeft--;
            if (card.usesLeft <= 0) card.used = true;
        } else {
            card.used = true;
        }

        if (card.used) {
            gameEngine.player.cards = gameEngine.player.cards.filter(c => !c.used);
        }

        uiManager.renderStats(gameEngine.player, gameEngine.enemy);
        uiManager.renderCards(gameEngine.player.cards, gameEngine.playerTurn, gameEngine.playerHasPlayedCard, playMultiplayerCard);

        gameEngine.playerTurn = false;
        gameEngine.turn++;

        if (gameEngine.checkVictory()) {
            multiplayer.sendGameOver(multiplayer.playerId);
        }
    };

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
    await gameEngine.startGame();

    // –•–æ—Å—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    gameEngine.playerTurn = isHost;
    uiManager.renderCards(gameEngine.player.cards, gameEngine.playerTurn, gameEngine.playerHasPlayedCard, playMultiplayerCard);

    console.log(`‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. ${isHost ? '–í–∞—à —Ö–æ–¥!' : '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'}`);
}

// ============= –ü–ê–£–ó–ê =============

function togglePause() {
    const pauseScreen = document.getElementById('pauseScreen');
    const isVisible = !pauseScreen.classList.contains('hidden');

    if (isVisible) {
        hidePauseScreen();
    } else {
        showPauseScreen();
    }
}

function showPauseScreen() {
    const pauseScreen = document.getElementById('pauseScreen');
    if (!pauseScreen || !gameEngine || !gameEngine.gameActive) return;

    pauseScreen.classList.remove('hidden');

    if (gameEngine && gameEngine.visualManager) {
        gameEngine.visualManager.cancelSpeech();
    }
    console.log('‚è∏ –ü–∞—É–∑–∞');
}

function hidePauseScreen() {
    const pauseScreen = document.getElementById('pauseScreen');
    if (pauseScreen) pauseScreen.classList.add('hidden');
    console.log('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ');
}

function resumeGame() {
    hidePauseScreen();
}

// –ö–ª–∞–≤–∏—à–∞ ESC –¥–ª—è –ø–∞—É–∑—ã
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        const pauseScreen = document.getElementById('pauseScreen');
        const menuScreen = document.getElementById('menuScreen');
        const endgameScreen = document.getElementById('endgameScreen');

        if (pauseScreen && menuScreen && endgameScreen) {
            const menuHidden = menuScreen.classList.contains('hidden');
            const endgameHidden = endgameScreen.classList.contains('hidden');
            const pauseHidden = pauseScreen.classList.contains('hidden');

            if (menuHidden && endgameHidden && pauseHidden && gameEngine?.gameActive) {
                showPauseScreen();
            } else if (!pauseHidden) {
                resumeGame();
            }
        }
    }
});

// ============= –ü–†–ê–í–ò–õ–ê –ò–ì–†–´ =============

function showRules() {
    alert(`üìú –ü–†–ê–í–ò–õ–ê –î–£–ï–õ–û–ì–ê

üéØ –¶–ï–õ–¨: –ù–∞–±—Ä–∞—Ç—å 3 –ø–æ–±–µ–¥–Ω—ã—Ö –æ—á–∫–∞ –ø–µ—Ä–≤—ã–º

üí´ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
‚Ä¢ –õ–æ–≥–∏–∫–∞ - —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
‚Ä¢ –≠–º–æ—Ü–∏–∏ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

üé¥ –¢–ò–ü–´ –ö–ê–†–¢:
‚Ä¢ –ê—Ç–∞–∫–∞ (üó°) - —É—Ä–æ–Ω –ø–æ –ª–æ–≥–∏–∫–µ/—ç–º–æ—Ü–∏—è–º
‚Ä¢ –ó–∞—â–∏—Ç–∞ (üõ°) - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —â–∏—Ç
‚Ä¢ –£–∫–ª–æ–Ω–µ–Ω–∏–µ (‚ö°) - –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ

üé≤ –•–û–î –ò–ì–†–´:
1. –ö–∞–∂–¥—ã–π —Ö–æ–¥ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É
2. –ö–∞—Ä—Ç—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
3. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –Ω–∞–±–µ—Ä–µ—Ç 3 –æ—á–∫–∞

–£–¥–∞—á–∏! üéÆ`);
}

// ============= –≠–ö–°–ü–û–†–¢ –õ–û–ì–û–í =============

function exportLogs() {
    if (!gameEngine || !gameEngine.log || gameEngine.log.length === 0) {
        alert('–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É.');
        return;
    }

    const logData = JSON.stringify(gameEngine.log, null, 2);
    const blob = new Blob([logData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `duelogue_log_${new Date().toISOString().slice(0,10)}.json`;
    a.click();

    URL.revokeObjectURL(url);
    console.log('üì• –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
}

// ============= –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï checkVictory =============

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
const originalCheckVictory = GameEngine.prototype.checkVictory;
GameEngine.prototype.checkVictory = function() {
    const result = originalCheckVictory.call(this);

    if (result) {
        const isVictory = this.player.points >= 3;
        setTimeout(() => {
            showEndgameScreen(isVictory);
        }, 2000);
    }

    return result;
};

// ============= –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –í WINDOW =============

window.startSinglePlayerGame = startSinglePlayerGame;
window.showMultiplayerScreen = showMultiplayerScreen;
window.showDeckSelector = showDeckSelector;
window.closeDeckSelector = closeDeckSelector;
window.showRules = showRules;
window.restartGame = restartGame;
window.exitToMenu = exitToMenu;
window.showPauseScreen = showPauseScreen;
window.resumeGame = resumeGame;
window.togglePause = togglePause;
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.cancelRoom = cancelRoom;
window.switchMultiplayerTab = switchMultiplayerTab;
window.exportLogs = exportLogs;

// ============= –ó–ê–ü–£–°–ö –ò–ì–†–´ =============

window.addEventListener('DOMContentLoaded', initGame);

console.log('‚ú® –ú–æ–¥—É–ª—å main.js –∑–∞–≥—Ä—É–∂–µ–Ω');
