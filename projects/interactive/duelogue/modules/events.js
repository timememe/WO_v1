// –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –î–£–ï–õ–û–ì
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

class EventManager {
    constructor() {
        this.turnHistory = [];
        this.activeEvent = null;
        this.eventCooldown = 0; // –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
        this.consecutiveDefense = 0;
        this.consecutiveAttack = 0;
        this.consecutiveTactical = 0; // –ê—Ç–∞–∫–∞-–£–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
    recordTurn(playerCard, enemyCard) {
        this.turnHistory.push({
            playerCategory: playerCard?.category || null,
            enemyCategory: enemyCard?.category || null
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Ö–æ–¥–∞–º–∏
        if (this.turnHistory.length > 10) {
            this.turnHistory.shift();
        }
    }

    // –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
    checkForEvents(player, enemy) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É–ª–¥–∞—É–Ω, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
        if (this.eventCooldown > 0) {
            this.eventCooldown--;
            return null;
        }

        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ
        if (this.activeEvent) {
            return this.updateActiveEvent(player, enemy);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)

        // 1. –ü–µ—Ä–µ–ª–æ–º–Ω—ã–π –º–æ–º–µ–Ω—Ç (—Å–∞–º—ã–π –∫—Ä–∏—Ç–∏—á–Ω—ã–π)
        const criticalEvent = this.checkCriticalTurningPoint(player, enemy);
        if (criticalEvent) return criticalEvent;

        // 2. –ú–µ–¥–∏—Ç–∞—Ü–∏—è
        const meditationEvent = this.checkMeditation();
        if (meditationEvent) return meditationEvent;

        // 3. –ü–µ—Ä–µ–ø–∞–ª–∫–∞
        const heatedEvent = this.checkHeatedExchange();
        if (heatedEvent) return heatedEvent;

        // 4. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∞—Ä—Ä–∏–Ω–≥
        const mindGamesEvent = this.checkMindGames();
        if (mindGamesEvent) return mindGamesEvent;

        return null;
    }

    // ========== –°–û–ë–´–¢–ò–ï 1: –ú–ï–î–ò–¢–ê–¶–ò–Ø ==========
    checkMeditation() {
        if (this.turnHistory.length < 3) return null;

        const last3 = this.turnHistory.slice(-3);
        const allDefense = last3.every(turn =>
            turn.playerCategory === '–ó–∞—â–∏—Ç–∞' &&
            turn.enemyCategory === '–ó–∞—â–∏—Ç–∞'
        );

        if (allDefense) {
            this.consecutiveDefense++;

            if (this.consecutiveDefense === 3) {
                this.activeEvent = {
                    type: 'meditation',
                    name: 'üßò –ú–ï–î–ò–¢–ê–¶–ò–Ø',
                    duration: 0,
                    maxDuration: 999, // –ü–æ–∫–∞ –Ω–µ –∞—Ç–∞–∫—É—é—Ç
                    message: '–û–±–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–∫—É—á–∞—Ç—å...'
                };
                return this.activeEvent;
            }
        } else {
            this.consecutiveDefense = 0;
        }

        return null;
    }

    // ========== –°–û–ë–´–¢–ò–ï 2: –ü–ï–†–ï–ü–ê–õ–ö–ê ==========
    checkHeatedExchange() {
        if (this.turnHistory.length < 4) return null;

        const last4 = this.turnHistory.slice(-4);
        const allAttack = last4.every(turn =>
            turn.playerCategory === '–ê—Ç–∞–∫–∞' &&
            turn.enemyCategory === '–ê—Ç–∞–∫–∞'
        );

        if (allAttack) {
            this.consecutiveAttack++;

            if (this.consecutiveAttack === 4) {
                this.activeEvent = {
                    type: 'heated_exchange',
                    name: 'üî• –ü–ï–†–ï–ü–ê–õ–ö–ê',
                    duration: 0,
                    maxDuration: 999, // –ü–æ–∫–∞ –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç
                    message: '–°–ø–æ—Ä—ã –Ω–∞–∫–∞–ª—è—é—Ç—Å—è! –≠–º–æ—Ü–∏–∏ –∑–∞—à–∫–∞–ª–∏–≤–∞—é—Ç, –Ω–æ –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–¥–∞–µ—Ç –æ—Ç —è—Ä–æ—Å—Ç–∏...'
                };
                return this.activeEvent;
            }
        } else {
            this.consecutiveAttack = 0;
        }

        return null;
    }

    // ========== –°–û–ë–´–¢–ò–ï 3: –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –°–ü–ê–†–†–ò–ù–ì ==========
    checkMindGames() {
        if (this.turnHistory.length < 3) return null;

        const last3 = this.turnHistory.slice(-3);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ê—Ç–∞–∫–∞ –∏ –£–∫–ª–æ–Ω–µ–Ω–∏–µ —É –æ–±–æ–∏—Ö
        const tacticalPlay = last3.every(turn => {
            const playerTactical = turn.playerCategory === '–ê—Ç–∞–∫–∞' || turn.playerCategory === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ';
            const enemyTactical = turn.enemyCategory === '–ê—Ç–∞–∫–∞' || turn.enemyCategory === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ';
            return playerTactical && enemyTactical;
        });

        if (tacticalPlay) {
            this.consecutiveTactical++;

            if (this.consecutiveTactical === 3) {
                this.activeEvent = {
                    type: 'mind_games',
                    name: 'üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –°–ü–ê–†–†–ò–ù–ì',
                    duration: 0,
                    maxDuration: 999,
                    message: '–û–±–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä–∞—é—Ç –≤ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã! –õ–æ–≥–∏–∫–∞ –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è, –Ω–æ —É—Ä–æ–Ω —Å–Ω–∏–∂–∞–µ—Ç—Å—è...'
                };
                return this.activeEvent;
            }
        } else {
            this.consecutiveTactical = 0;
        }

        return null;
    }

    // ========== –°–û–ë–´–¢–ò–ï 4: –ü–ï–†–ï–õ–û–ú–ù–´–ô –ú–û–ú–ï–ù–¢ ==========
    checkCriticalTurningPoint(player, enemy) {
        // –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const playerTotal = (player.logic ?? 0) + (player.emotion ?? 0);
        const enemyTotal = (enemy.logic ?? 0) + (enemy.emotion ?? 0);
        const gap = Math.abs(playerTotal - enemyTotal);

        // –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ >= 6 –∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (gap >= 6) {
            const loser = playerTotal < enemyTotal ? player : enemy;
            const winner = playerTotal < enemyTotal ? enemy : player;
            const loserName = loser === player ? '–ò–≥—Ä–æ–∫' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';

            if ((loser.logic < 0 || loser.emotion < 0)) {
                this.activeEvent = {
                    type: 'critical_turning_point',
                    name: '‚ö° –ü–ï–†–ï–õ–û–ú–ù–´–ô –ú–û–ú–ï–ù–¢',
                    duration: 1, // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    maxDuration: 1,
                    loser: loser,
                    winner: winner,
                    loserName: loserName,
                    message: `${loserName} –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—É–±–ª–∏–∫–∞ –≤–æ–ª–Ω—É–µ—Ç—Å—è...`
                };
                return this.activeEvent;
            }
        }

        return null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    updateActiveEvent(player, enemy) {
        if (!this.activeEvent) return null;

        this.activeEvent.duration++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
        const shouldEnd = this.checkEventEnd(player, enemy);

        if (shouldEnd) {
            const endMessage = this.getEventEndMessage();
            this.activeEvent = null;
            this.eventCooldown = 2; // 2 —Ö–æ–¥–∞ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
            this.consecutiveDefense = 0;
            this.consecutiveAttack = 0;
            this.consecutiveTactical = 0;
            return { ended: true, message: endMessage };
        }

        return this.activeEvent;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    checkEventEnd(player, enemy) {
        if (!this.activeEvent) return false;

        const lastTurn = this.turnHistory[this.turnHistory.length - 1];
        if (!lastTurn) return false;

        switch (this.activeEvent.type) {
            case 'meditation':
                // –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∞—Ç–∞–∫–æ–≤–∞–ª –∏–ª–∏ —É–∫–ª–æ–Ω—è–ª—Å—è
                return lastTurn.playerCategory !== '–ó–∞—â–∏—Ç–∞' ||
                       lastTurn.enemyCategory !== '–ó–∞—â–∏—Ç–∞';

            case 'heated_exchange':
                // –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞—â–∏—Ç–∏–ª—Å—è –∏–ª–∏ —É–∫–ª–æ–Ω–∏–ª—Å—è
                return lastTurn.playerCategory !== '–ê—Ç–∞–∫–∞' ||
                       lastTurn.enemyCategory !== '–ê—Ç–∞–∫–∞';

            case 'mind_games':
                // –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ó–∞—â–∏—Ç—É
                return lastTurn.playerCategory === '–ó–∞—â–∏—Ç–∞' ||
                       lastTurn.enemyCategory === '–ó–∞—â–∏—Ç–∞';

            case 'critical_turning_point':
                // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                return this.activeEvent.duration >= this.activeEvent.maxDuration;

            default:
                return false;
        }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–±—ã—Ç–∏—è
    applyEventEffects(player, enemy) {
        if (!this.activeEvent) return null;

        const effects = {
            player: {},
            enemy: {},
            message: null
        };

        switch (this.activeEvent.type) {
            case 'meditation':
                // –≠—Ñ—Ñ–µ–∫—Ç: -1 —ç–º–æ—Ü–∏—è, +1 –ª–æ–≥–∏–∫–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥
                effects.player.emotion = -1;
                effects.player.logic = 1;
                effects.enemy.emotion = -1;
                effects.enemy.logic = 1;
                effects.message = '(–ú–µ–¥–∏—Ç–∞—Ü–∏—è: -1 —ç–º–æ—Ü–∏—è, +1 –ª–æ–≥–∏–∫–∞)';
                break;

            case 'heated_exchange':
                // –≠—Ñ—Ñ–µ–∫—Ç: +2 —ç–º–æ—Ü–∏–∏, –º–∞–∫—Å–∏–º—É–º –ª–æ–≥–∏–∫–∏ -1
                effects.player.emotion = 2;
                effects.player.maxLogicPenalty = -1;
                effects.enemy.emotion = 2;
                effects.enemy.maxLogicPenalty = -1;
                effects.message = '(–ü–µ—Ä–µ–ø–∞–ª–∫–∞: +2 —ç–º–æ—Ü–∏–∏, –º–∞–∫—Å. –ª–æ–≥–∏–∫–∞ -1)';
                break;

            case 'mind_games':
                // –≠—Ñ—Ñ–µ–∫—Ç: +1 –ª–æ–≥–∏–∫–∞, —É—Ä–æ–Ω -25%
                effects.player.logic = 1;
                effects.player.damageReduction = 0.25;
                effects.enemy.logic = 1;
                effects.enemy.damageReduction = 0.25;
                effects.message = '(–°–ø–∞—Ä—Ä–∏–Ω–≥: +1 –ª–æ–≥–∏–∫–∞, —É—Ä–æ–Ω -25%)';
                break;

            case 'critical_turning_point':
                // –≠—Ñ—Ñ–µ–∫—Ç: –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é—â–∏–π –ø–æ–ª—É—á–∞–µ—Ç +3 —ç–º–æ—Ü–∏–∏
                if (this.activeEvent.loser) {
                    if (this.activeEvent.loser === player) {
                        effects.player.emotion = 3;
                        effects.winner.logic = -1;
                    } else {
                        effects.enemy.emotion = 3;
                        effects.player.logic = -1;
                    }
                    effects.message = `(–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å: ${this.activeEvent.loserName} +3 —ç–º–æ—Ü–∏–∏!)`;
                }
                break;
        }

        return effects;
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
    getEventEndMessage() {
        if (!this.activeEvent) return null;

        const messages = {
            meditation: 'üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞! –î–µ–±–∞—Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.',
            heated_exchange: 'üî• –°—Ç—Ä–∞—Å—Ç–∏ —É–ª–µ–≥–ª–∏—Å—å. –û–ø–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç—ã–≤–∞—é—Ç.',
            mind_games: 'üß† –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞.',
            critical_turning_point: '‚ö° –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å–ø–∞–¥–∞–µ—Ç.'
        };

        return messages[this.activeEvent.type] || '–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.';
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è UI)
    getActiveEvent() {
        return this.activeEvent;
    }

    // –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã)
    reset() {
        this.turnHistory = [];
        this.activeEvent = null;
        this.eventCooldown = 0;
        this.consecutiveDefense = 0;
        this.consecutiveAttack = 0;
        this.consecutiveTactical = 0;
    }
}

console.log('‚úÖ –ú–æ–¥—É–ª—å events.js –∑–∞–≥—Ä—É–∂–µ–Ω');
