// –ò–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ –î–£–ï–õ–û–ì
// –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
const PLAYER_START_LOGIC = 4;
const PLAYER_START_EMOTION = 4;
const ENEMY_START_LOGIC = 4;
const ENEMY_START_EMOTION = 4;

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π
class GameEngine {
    constructor(cardManager, uiManager, visualManager, options = {}) {
        this.cardManager = cardManager;
        this.uiManager = uiManager;
        this.visualManager = visualManager;
        this.isMultiplayer = options.isMultiplayer || false;

        // –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ
        this.player = {};
        this.enemy = {};
        this.turn = 1;
        this.playerTurn = true;
        this.gameActive = true;
        this.playerHasPlayedCard = false;
        this.lastVictorySpeechPromise = null;
        this.log = [];

        // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
        this.eventManager = typeof EventManager !== 'undefined' ? new EventManager() : null;
        this.currentTurnCards = { player: null, enemy: null };

        // –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –≥–æ—Å—Ç—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º
        if (!options.isGuest) {
            this.initializeNewGameState();
        }
    }

    initializeNewGameState() {
        this.player = { logic: PLAYER_START_LOGIC, maxLogic: PLAYER_START_LOGIC, emotion: PLAYER_START_EMOTION, maxEmotion: PLAYER_START_EMOTION, points: 0, logicDepleted: false, emotionDepleted: false, negativeTurns: 0, cards: [], deck: [], discardPile: [], lastCard: null, usedTextVariants: {}, discardCount: 0 };
        this.enemy = { logic: ENEMY_START_LOGIC, maxLogic: ENEMY_START_LOGIC, emotion: ENEMY_START_EMOTION, maxEmotion: ENEMY_START_EMOTION, points: 0, logicDepleted: false, emotionDepleted: false, negativeTurns: 0, cards: [], deck: [], discardPile: [], lastCard: null, usedTextVariants: {}, discardCount: 0 };
        
        this.player.deck = this.cardManager.createFullDeck(true);
        this.enemy.deck = this.cardManager.createFullDeck(false);

        this.player.cards = this.cardManager.getInitialPlayerCards(this.player);
        this.enemy.cards = this.cardManager.getInitialEnemyCards(this.enemy);

        this.ensureMinimumHandComposition(this.player, true);
        this.ensureMinimumHandComposition(this.enemy, false);
        console.log('New game state initialized');
    }

    getState() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
        return JSON.parse(JSON.stringify({
            player: this.player,
            enemy: this.enemy,
            turn: this.turn,
            playerTurn: this.playerTurn,
            gameActive: this.gameActive,
            playerHasPlayedCard: this.playerHasPlayedCard
        }));
    }

    applyState(state) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —Ö–æ—Å—Ç–∞
        // –í–∞–∂–Ω–æ: –¥–ª—è –≥–æ—Å—Ç—è player - —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫, –∞ enemy - —ç—Ç–æ –æ–Ω —Å–∞–º. –ú–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏.
        this.player = state.enemy;
        this.enemy = state.player;
        this.turn = state.turn;
        this.playerTurn = !state.playerTurn; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–¥

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–±—Ä–æ—à–µ–Ω—ã
        this.gameActive = state.gameActive;
        this.playerHasPlayedCard = false; 

        console.log('Game state synced from host');
        this.uiManager.updateStats(this.player, this.enemy);
        this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
    }
Ôªø
Ôªø    // =============================================
Ôªø    // =========== –ú–ï–¢–û–î–´ –ó–ê–ü–£–°–ö–ê –ò–ì–†–´ ===========
Ôªø    // =============================================
Ôªø
Ôªø    async startGame() {
Ôªø        if (this.isMultiplayer) {
Ôªø            console.error('startGame() –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ initializeMultiplayerGame().');
Ôªø            return;
Ôªø        }
Ôªø
Ôªø        const playerStarts = Math.random() < 0.5;
Ôªø        const message = playerStarts
Ôªø            ? "–ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ —Ç–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É! –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–µ—Ä–≤—ã–º."
Ôªø            : "–ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –°–∫–µ–ø—Ç–∏–∫–∞. –û–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–º.";
Ôªø
Ôªø        this.uiManager.addMessage(message, 'enemy');
Ôªø        await this.visualManager.setVisual('idle');
Ôªø        await new Promise(resolve => setTimeout(resolve, 1500));
Ôªø
Ôªø        if (playerStarts) {
Ôªø            this.playerTurn = true;
Ôªø            this.turn = 1;
Ôªø        } else {
Ôªø            this.playerTurn = false;
Ôªø            this.turn = 1;
Ôªø            await this.enemyTurn(); // –•–æ–¥ –±–æ—Ç–∞
Ôªø        }
Ôªø
Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø        this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
Ôªø        await this.visualManager.setVisual('idle');
Ôªø    }
Ôªø
Ôªø        async initializeMultiplayerGame(isHost) {
Ôªø            this.playerTurn = isHost;
Ôªø            await this.visualManager.setVisual('idle'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
Ôªø            this.uiManager.updateStats(this.player, this.enemy);
Ôªø            this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
Ôªø            
Ôªø            const message = isHost ? "–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º." : "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ. –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.";
Ôªø            this.uiManager.addMessage(message, 'system');
Ôªø        }Ôªø
Ôªø    // =============================================
Ôªø    // =========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –•–û–î–ê ===========
Ôªø    // =============================================
Ôªø
Ôªø    async playCard(card) {
Ôªø        if (!this.playerTurn || card.used || this.playerHasPlayedCard || !this.gameActive) return;
Ôªø        
Ôªø        this.playerHasPlayedCard = true;
Ôªø
Ôªø        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
Ôªø        const { speechText, logText } = this.applyCard(card, this.player, this.enemy);
Ôªø        const fullLogMessage = logText ? `${speechText} ${logText}` : speechText;
Ôªø        this.uiManager.addMessage(fullLogMessage, 'player', this.turn);
Ôªø        const speechPromise = this.visualManager.setVisual('player', speechText);
Ôªø
Ôªø        if (card.usesLeft !== undefined) {
Ôªø            card.usesLeft--;
Ôªø            if (card.usesLeft <= 0) card.used = true;
Ôªø        } else {
Ôªø            card.used = true;
Ôªø        }
Ôªø
Ôªø        if (card.used) {
Ôªø            this.recordDiscard(card, this.player);
Ôªø            this.player.cards = this.player.cards.filter(c => !c.used);
Ôªø        }
Ôªø
Ôªø        this.checkPoints(this.player, this.enemy);
Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø
Ôªø        if (this.checkVictory()) {
Ôªø            await speechPromise;
Ôªø            return;
Ôªø        }
Ôªø
Ôªø        // –ï—Å–ª–∏ —ç—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (this.isMultiplayer) {
            multiplayer.sendMove(card); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
            this.playerTurn = false;
            this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
            await speechPromise;
            await this.visualManager.setVisual('idle');
        } else {
Ôªø            // –í –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É
Ôªø            this.playerTurn = false;
Ôªø            this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
Ôªø            await speechPromise;
Ôªø            await this.visualManager.setVisual('enemy');
Ôªø            await this.enemyTurn();
Ôªø        }
Ôªø    }
Ôªø
Ôªø    async enemyTurn() {
Ôªø        if (this.isMultiplayer || !this.gameActive) return;

Ôªø        this.turn++;

Ôªø        let availableCards = this.enemy.cards.filter(card => !card.used);
Ôªø        console.log(`ü§ñ Enemy turn ${this.turn}: ${availableCards.length} available cards –∏–∑ ${this.enemy.cards.length} total, ${this.enemy.deck.length} left in deck`);
Ôªø        let speechText = '';
Ôªø        let logText = '';
Ôªø
Ôªø        if (availableCards.length > 0) {
Ôªø            let randomCard = availableCards[Math.floor(Math.random() * availableCards.length)];
Ôªø
Ôªø            if (randomCard.usesLeft !== undefined) {
Ôªø                randomCard.usesLeft--;
Ôªø                if (randomCard.usesLeft <= 0) randomCard.used = true;
Ôªø            } else {
Ôªø                randomCard.used = true;
Ôªø            }
Ôªø
Ôªø            const cardText = this.getCardSpeechText(randomCard, this.enemy);
Ôªø            const result = this.applyCard(randomCard, this.enemy, this.player, cardText);
Ôªø            speechText = result.speechText;
Ôªø            logText = result.logText ? `${cardText} ${result.logText}` : cardText;
Ôªø
Ôªø            if (randomCard.used) {
Ôªø                this.recordDiscard(randomCard, this.enemy);
Ôªø                this.enemy.cards = this.enemy.cards.filter(c => !c.used);
Ôªø            }
Ôªø        } else {
Ôªø            speechText = "–ú–Ω–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å...";
Ôªø            logText = `–°–∫–µ–ø—Ç–∏–∫: "${speechText}"`;
Ôªø        }
Ôªø
Ôªø        const speechPromise = this.visualManager.setVisual('enemy', speechText);
Ôªø        this.uiManager.addMessage(logText, 'enemy', this.turn);
Ôªø        this.checkPoints(this.enemy, this.player);

Ôªø        // –¢—è–Ω–µ–º –∫–∞—Ä—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ —Ö–æ–¥–∞
Ôªø        this.drawCardsToHandLimit(this.player);
Ôªø        this.drawCardsToHandLimit(this.enemy);

Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø
Ôªø        if (this.checkVictory()) {
Ôªø            await speechPromise;
Ôªø            return;
Ôªø        }
Ôªø
Ôªø        await speechPromise;
Ôªø
Ôªø        this.playerTurn = true;
Ôªø        this.playerHasPlayedCard = false;
Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø        this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
Ôªø        await this.visualManager.setVisual('idle');
Ôªø    }
Ôªø
Ôªø    async handleOpponentMove(cardData) {
Ôªø        if (!this.isMultiplayer || this.playerTurn || !this.gameActive) return;
Ôªø
Ôªø        console.log('üì® –ü–æ–ª—É—á–µ–Ω —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', cardData.name);
Ôªø        this.turn++;
Ôªø
Ôªø        const opponentCard = this.enemy.cards.find(c => c.name === cardData.name);
Ôªø        if (!opponentCard) {
Ôªø            console.error('‚ùå –ö–∞—Ä—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ:', cardData.name);
Ôªø            // –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —É —Ö–æ—Å—Ç–∞
Ôªø            return;
Ôªø        }
Ôªø
Ôªø        const { speechText, logText } = this.applyCard(opponentCard, this.enemy, this.player);
Ôªø        const fullLogMessage = logText ? `${speechText} ${logText}` : speechText;
Ôªø        this.uiManager.addMessage(fullLogMessage, 'enemy', this.turn);
Ôªø        const speechPromise = this.visualManager.setVisual('enemy', speechText);
Ôªø
Ôªø        if (opponentCard.usesLeft !== undefined) {
Ôªø            opponentCard.usesLeft--;
Ôªø            if (opponentCard.usesLeft <= 0) opponentCard.used = true;
Ôªø        } else {
Ôªø            opponentCard.used = true;
Ôªø        }
Ôªø
Ôªø        if (opponentCard.used) {
Ôªø            this.recordDiscard(opponentCard, this.enemy);
Ôªø            this.enemy.cards = this.enemy.cards.filter(c => !c.used);
Ôªø        }
Ôªø
Ôªø        this.checkPoints(this.enemy, this.player);
Ôªø        this.drawCardsToHandLimit(this.player);
Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø
Ôªø        if (this.checkVictory()) {
Ôªø            await speechPromise;
Ôªø            return;
Ôªø        }
Ôªø
Ôªø        await speechPromise;
Ôªø
Ôªø        this.playerTurn = true;
Ôªø        this.playerHasPlayedCard = false;
Ôªø        this.uiManager.updateStats(this.player, this.enemy);
Ôªø        this.uiManager.renderCards(this.player.cards, this.playerTurn, this.playerHasPlayedCard, this.playCard.bind(this));
Ôªø        await this.visualManager.setVisual('idle');
Ôªø    }
Ôªø
Ôªø
Ôªø    // =============================================
Ôªø    // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===========
Ôªø    // =============================================
Ôªø
Ôªø    applyCard(card, source, target, presetSpeechText = null) {
Ôªø        // ... (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
Ôªø        const sourceBefore = { logic: source.logic, emotion: source.emotion, shield: source.shield };
Ôªø        const targetBefore = { logic: target.logic, emotion: target.emotion, shield: target.shield };
Ôªø        let speechText = presetSpeechText ?? this.getCardSpeechText(card, source);
Ôªø        let logDetails = [];
Ôªø        let finalDamage = card.damage ?? 0;
Ôªø        let finalHeal = card.heal ?? 0;
Ôªø        let wasCancelled = false;
Ôªø        const targetLastCard = target.lastCard;
Ôªø
Ôªø        if (card.category === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ') {
Ôªø            if (card.effect === 'cancel') {
Ôªø                if (targetLastCard && source.lastCardEffects) {
Ôªø                    wasCancelled = true;
Ôªø                    if (source.lastCardEffects.logicDamage) source.logic = (source.logic ?? 0) + source.lastCardEffects.logicDamage;
Ôªø                    if (source.lastCardEffects.emotionDamage) source.emotion = (source.emotion ?? 0) + source.lastCardEffects.emotionDamage;
Ôªø                    if (source.lastCardEffects.logicHeal) target.logic = (target.logic ?? 0) - source.lastCardEffects.logicHeal;
Ôªø                    if (source.lastCardEffects.emotionHeal) target.emotion = (target.emotion ?? 0) - source.lastCardEffects.emotionHeal;
Ôªø                    if (source.lastCardEffects.shieldAdded) {
Ôªø                        target.shield = (target.shield ?? 0) - source.lastCardEffects.shieldAdded;
Ôªø                        if (target.shield <= 0) delete target.shield;
Ôªø                    }
Ôªø                    logDetails.push(`(–û—Ç–º–µ–Ω—è–µ—Ç "${targetLastCard.name}")`);
Ôªø                    delete source.lastCardEffects;
Ôªø                }
Ôªø            } else if (card.effect === 'mirror' && targetLastCard?.category === '–ê—Ç–∞–∫–∞') {
Ôªø                const damageMultiplier = this.getDamageMultiplier(source);
Ôªø                let mirrorDamage = Math.floor((targetLastCard.damage ?? 0) * (card.modifier ?? 0.75) * damageMultiplier);
Ôªø                const targetStat = targetLastCard.effect === 'random' ? (Math.random() > 0.5 ? 'logic' : 'emotion') : targetLastCard.effect;
Ôªø                target[targetStat] = (target[targetStat] ?? 0) - mirrorDamage;
Ôªø                logDetails.push(`-${mirrorDamage} ${targetStat} –≤—Ä–∞–≥—É`);
Ôªø            } else if (card.effect === 'reflect' && targetLastCard?.category === '–ê—Ç–∞–∫–∞') {
Ôªø                const damageMultiplier = this.getDamageMultiplier(source);
Ôªø                let reflectDamage = Math.floor((targetLastCard.damage ?? 0) * damageMultiplier);
Ôªø                const targetStat = targetLastCard.effect === 'random' ? (Math.random() > 0.5 ? 'logic' : 'emotion') : targetLastCard.effect;
Ôªø                target[targetStat] = (target[targetStat] ?? 0) - reflectDamage;
Ôªø                logDetails.push(`-${reflectDamage} ${targetStat} –æ—Ç—Ä–∞–∂–µ–Ω–æ!`);
Ôªø            }
Ôªø        } else if (card.category === '–ê—Ç–∞–∫–∞' && !wasCancelled) {
Ôªø            const damageMultiplier = this.getDamageMultiplier(source);
Ôªø            finalDamage = Math.floor(finalDamage * damageMultiplier);
Ôªø            if (targetLastCard?.category === '–ó–∞—â–∏—Ç–∞') {
Ôªø                finalDamage = Math.floor(finalDamage * 1.5);
Ôªø                logDetails.push('(–ü—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É!)');
Ôªø            }
Ôªø            if (finalDamage > 0) {
Ôªø                const targetStat = card.effect === 'random' ? (Math.random() > 0.5 ? 'logic' : 'emotion') : card.effect;
Ôªø                if (target.shield && target.shield > 0) {
Ôªø                    const absorbed = Math.min(target.shield, finalDamage);
Ôªø                    target.shield -= absorbed;
Ôªø                    finalDamage -= absorbed;
Ôªø                    logDetails.push(`(–©–∏—Ç: -${absorbed})`);
Ôªø                    if (target.shield <= 0) {
Ôªø                        delete target.shield;
Ôªø                        logDetails.push('(–©–∏—Ç —Ä–∞–∑—Ä—É—à–µ–Ω!)');
Ôªø                    }
Ôªø                }
Ôªø                if (finalDamage > 0) {
Ôªø                    target[targetStat] = (target[targetStat] ?? 0) - finalDamage;
Ôªø                    logDetails.push(`-${finalDamage} ${targetStat}`);
Ôªø                    if (!target.lastCardEffects) target.lastCardEffects = {};
Ôªø                    if (targetStat === 'logic') target.lastCardEffects.logicDamage = finalDamage;
Ôªø                    else target.lastCardEffects.emotionDamage = finalDamage;
Ôªø                }
Ôªø            }
Ôªø        } else if (card.category === '–ó–∞—â–∏—Ç–∞' && !wasCancelled) {
Ôªø            if (targetLastCard?.category === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ') {
Ôªø                finalHeal = Math.floor(finalHeal * 1.5);
Ôªø                logDetails.push('(–õ–æ–≤–∏—Ç –≤ –ª–æ–≤—É—à–∫—É!)');
Ôªø            }
Ôªø            if (card.effect === 'shield') {
Ôªø                const shieldAmount = card.shield ?? 0;
Ôªø                source.shield = (source.shield ?? 0) + shieldAmount;
Ôªø                logDetails.push(`(–©–∏—Ç: +${shieldAmount})`);
Ôªø                if (!target.lastCardEffects) target.lastCardEffects = {};
Ôªø                target.lastCardEffects.shieldAdded = shieldAmount;
Ôªø            } else if (finalHeal > 0) {
Ôªø                source[card.effect] = (source[card.effect] ?? 0) + finalHeal;
Ôªø                logDetails.push(`+${finalHeal} ${card.effect}`);
Ôªø                if (!target.lastCardEffects) target.lastCardEffects = {};
Ôªø                if (card.effect === 'logic') target.lastCardEffects.logicHeal = finalHeal;
Ôªø                else target.lastCardEffects.emotionHeal = finalHeal;
Ôªø            }
Ôªø        }
Ôªø
Ôªø        if (card.fromDiscard) {
Ôªø            let repeatCardIndex = target.cards.findIndex(c => c.name === "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ" && !c.used);
Ôªø            if (repeatCardIndex !== -1) {
Ôªø                logDetails.push('(–û–±–Ω—É–ª–µ–Ω–æ: "–¢—ã —É–∂–µ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏–ª!")');
Ôªø                target.cards[repeatCardIndex].used = true;
Ôªø            } else {
Ôªø                this.addCardsToHand(this.cardManager.getRepeatCard(), target);
Ôªø            }
Ôªø        }
Ôªø
Ôªø        this.updateMaxStats(source);
Ôªø        this.updateMaxStats(target);
Ôªø        source.lastCard = card;
Ôªø
Ôªø        return { speechText, logText: logDetails.join(' ') };
Ôªø    }
Ôªø
Ôªø    checkPoints(winner, loser) {
Ôªø        // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
Ôªø        if (loser.logic <= 0 && !loser.logicDepleted) {
Ôªø            winner.points += 1;
Ôªø            loser.logicDepleted = true;
Ôªø            this.uiManager.addMessage(`${winner === this.player ? "–¢—ã" : "–°–∫–µ–ø—Ç–∏–∫"} –∑–∞–∂–∏–≥–∞–µ—Ç —Ç–æ—á–∫—É! –õ–æ–≥–∏–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞.`, winner === this.player ? 'player' : 'enemy');
Ôªø        }
Ôªø        if (loser.emotion <= 0 && !loser.emotionDepleted) {
Ôªø            winner.points += 1;
Ôªø            loser.emotionDepleted = true;
Ôªø            this.uiManager.addMessage(`${winner === this.player ? "–¢—ã" : "–°–∫–µ–ø—Ç–∏–∫"} –∑–∞–∂–∏–≥–∞–µ—Ç —Ç–æ—á–∫—É! –≠–º–æ—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.`, winner === this.player ? 'player' : 'enemy');
Ôªø        }
Ôªø        if (loser.logic < 0 && loser.emotion < 0) {
Ôªø            loser.negativeTurns += 1;
Ôªø            if (loser.negativeTurns >= 3) {
Ôªø                winner.points += 1;
Ôªø                this.uiManager.addMessage(`${winner === this.player ? "–¢—ã" : "–°–∫–µ–ø—Ç–∏–∫"} –∑–∞–∂–∏–≥–∞–µ—Ç —Ç–æ—á–∫—É! ${loser === this.player ? "–¢—ã" : "–°–∫–µ–ø—Ç–∏–∫"} —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –≤ —Å–º—è—Ç–µ–Ω–∏–∏!`, winner === this.player ? 'player' : 'enemy');
Ôªø                loser.negativeTurns = 0;
Ôªø            }
Ôªø        } else {
Ôªø            loser.negativeTurns = 0;
Ôªø        }
Ôªø        if (loser.logic > 0) loser.logicDepleted = false;
Ôªø        if (loser.emotion > 0) loser.emotionDepleted = false;
Ôªø    }
Ôªø
Ôªø    checkVictory() {
        if (this.player.points >= 3) {
            this.handleGameEnd(true);
            return true;
        } else if (this.enemy.points >= 3) {
            this.handleGameEnd(false);
            return true;
        }
        return false;
    }

    async handleGameEnd(isVictory) {
        if (!this.gameActive) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        this.gameActive = false;

        const message = isVictory ? "–¢—ã –ø–æ–±–µ–¥–∏–ª! –í—Å–µ 3 —Ç–≤–æ–∏ —Ç–æ—á–∫–∏ –∑–∞–∂–∂–µ–Ω—ã!" : "–°–∫–µ–ø—Ç–∏–∫ –ø–æ–±–µ–¥–∏–ª! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!";
        const visual = isVictory ? "player" : "enemy";
        const speech = isVictory ? "–ü–æ–±–µ–¥–∞!" : "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!";

        this.uiManager.addMessage(message, visual);
        await this.visualManager.setVisual(visual, speech);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if (typeof showEndgameScreen === 'function') {
            showEndgameScreen(isVictory);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞
        if (!this.isMultiplayer && typeof logSinglePlayerResult === 'function') {
            const result = {
                win: isVictory,
                score: this.player.points, // –∏–ª–∏ –¥—Ä—É–≥–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å—á–µ—Ç–∞
                deck_name: deckManager.getSelectedDeck()?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞',
                opponent_name: '–°–∫–µ–ø—Ç–∏–∫' // –ò–º—è AI
            };
            logSinglePlayerResult(result);
        }
    }

Ôªø
Ôªø    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: getCardSpeechText, recordDiscard, drawCardsToHandLimit –∏ —Ç.d. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
Ôªø    hasCardInHand(character, cardName) { return character.cards.some(c => c.name === cardName); }
Ôªø    addCardsToHand(card, character) { if (!card) return; if (this.hasCardInHand(character, card.name)) { return; } const handLimit = this.getHandLimit(character); if (character.cards.length < handLimit) { character.cards.push(card); } else { const discarded = character.cards.shift(); if (discarded) { this.recordDiscard(discarded, character); } character.cards.push(card); } }
Ôªø    addCounterCard(lastCard, character, isPlayer = true) { const counterCard = this.cardManager.getCounterCard(lastCard, character, isPlayer); if (counterCard) { this.addCardsToHand(counterCard, character); } }
Ôªø    updateMaxStats(character) { if (!character) return; if (character.maxLogic === undefined) character.maxLogic = character.logic; if (character.maxEmotion === undefined) character.maxEmotion = character.emotion; character.maxLogic = Math.max(character.maxLogic, character.logic); character.maxEmotion = Math.max(character.maxEmotion, character.emotion); }
Ôªø    getHandLimit(character) { const logic = character.logic ?? 0; if (logic <= 0) return 3; if (logic <= 2) return 4; if (logic <= 4) return 5; if (logic <= 6) return 6; return 7; }
Ôªø    getCardSpeechText(card, owner) { if (!card) return ''; if (!owner.usedTextVariants) owner.usedTextVariants = {}; const variants = Array.isArray(card.textVariants) ? card.textVariants : []; if (variants.length > 0) { let tracker = owner.usedTextVariants[card.name]; if (!tracker || !Array.isArray(tracker.used) || tracker.used.length !== variants.length) { tracker = { used: new Array(variants.length).fill(false) }; owner.usedTextVariants[card.name] = tracker; } const used = tracker.used; const nextIndex = used.findIndex(flag => !flag); if (nextIndex !== -1) { used[nextIndex] = true; card.currentVariantIndex = nextIndex; return variants[nextIndex]; } card.currentVariantIndex = Math.min(card.currentVariantIndex ?? 0, variants.length - 1); return variants[card.currentVariantIndex] ?? card.text ?? ''; } if (card.currentVariantIndex === undefined || card.currentVariantIndex === null) { card.currentVariantIndex = 0; } return this.cardManager.getCardText(card); }
Ôªø    recordDiscard(card, owner) { if (!card || !owner) return; if (!owner.discardPile) owner.discardPile = []; owner.discardPile.push(card); owner.discardCount = (owner.discardCount ?? 0) + 1; }
Ôªø    drawCardsToHandLimit(character) {
        if (!character.deck || character.deck.length === 0) return;
        const handLimit = this.getHandLimit(character);
        const cardsToDraw = handLimit - character.cards.length;

        // –°–æ–∑–¥–∞–µ–º Set —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–µ–Ω –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const existingCardNames = new Set(character.cards.map(c => c.name));

        for (let i = 0; i < cardsToDraw && character.deck.length > 0; i++) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Ä—É–∫–µ
            let attempts = 0;
            let drawnCard = null;
            const maxAttempts = character.deck.length;

            while (attempts < maxAttempts) {
                const randomIndex = Math.floor(Math.random() * character.deck.length);
                const candidate = character.deck[randomIndex];

                // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –≤ —Ä—É–∫–µ - –±–µ—Ä–µ–º –µ—ë
                if (!existingCardNames.has(candidate.name)) {
                    drawnCard = character.deck.splice(randomIndex, 1)[0];
                    existingCardNames.add(drawnCard.name);
                    character.cards.push(drawnCard);
                    break;
                }

                attempts++;
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –∑–Ω–∞—á–∏—Ç –≤ –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏
            // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
            if (!drawnCard && character.deck.length > 0) {
                const randomIndex = Math.floor(Math.random() * character.deck.length);
                drawnCard = character.deck.splice(randomIndex, 1)[0];
                character.cards.push(drawnCard);
                console.warn(`‚ö†Ô∏è –ü—Ä–∏—à–ª–æ—Å—å –≤–∑—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–∞—Ä—Ç—ã "${drawnCard.name}", —Ç.–∫. –≤ –∫–æ–ª–æ–¥–µ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö`);
            }
        }
    }
Ôªø    getDamageMultiplier(character) { const emotion = character.emotion ?? 0; if (emotion <= 0) return 0.5; if (emotion <= 2) return 0.75; if (emotion <= 4) return 1.0; if (emotion <= 6) return 1.25; return 1.5; }
Ôªø    ensureMinimumHandComposition(character, isPlayer = true) { const handLimit = this.getHandLimit(character); const cardsByCategory = { '–ê—Ç–∞–∫–∞': character.cards.filter(c => c.category === '–ê—Ç–∞–∫–∞').length, '–ó–∞—â–∏—Ç–∞': character.cards.filter(c => c.category === '–ó–∞—â–∏—Ç–∞').length, '–£–∫–ª–æ–Ω–µ–Ω–∏–µ': character.cards.filter(c => c.category === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ').length }; const missingTypes = []; if (cardsByCategory['–ê—Ç–∞–∫–∞'] === 0 && character.cards.length < handLimit) { missingTypes.push('–ê—Ç–∞–∫–∞'); } if (cardsByCategory['–ó–∞—â–∏—Ç–∞'] === 0 && character.cards.length < handLimit) { missingTypes.push('–ó–∞—â–∏—Ç–∞'); } if (cardsByCategory['–£–∫–ª–æ–Ω–µ–Ω–∏–µ'] === 0 && character.cards.length < handLimit) { missingTypes.push('–£–∫–ª–æ–Ω–µ–Ω–∏–µ'); } for (const type of missingTypes) { let card = null; if (type === '–ê—Ç–∞–∫–∞') { const attackPool = isPlayer ? this.cardManager.basePlayerCards : this.cardManager.baseEnemyCards; card = this.cardManager.getWeightedCard(character, attackPool); } else if (type === '–ó–∞—â–∏—Ç–∞') { card = this.cardManager.getDefenseCard(character); } else if (type === '–£–∫–ª–æ–Ω–µ–Ω–∏–µ') { if (this.cardManager.evasionCards.length) { card = this.cardManager.getUniqueCard(this.cardManager.evasionCards, character); } } if (card) { this.addCardsToHand(card, character); } } }
Ôªø    addDefenseWhenLow(character) { if ((character.logic < 0 && !character.logicNegative) || (character.emotion < 0 && !character.emotionNegative)) { const defenseCard = this.cardManager.getDefenseCard(character); if (defenseCard) { this.addCardsToHand(defenseCard, character); } if (character.logic < 0) character.logicNegative = true; if (character.emotion < 0) character.emotionNegative = true; } if (character.logic >= 0) character.logicNegative = false; if (character.emotion >= 0) character.emotionNegative = false; }
Ôªø}
Ôªø
Ôªøconsole.log('‚úÖ –ú–æ–¥—É–ª—å engine.js –∑–∞–≥—Ä—É–∂–µ–Ω');
