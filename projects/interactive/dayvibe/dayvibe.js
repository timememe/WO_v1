// DAYVIBE - Live Coding Music with Strudel
// State
let isPlaying = false;
let animationFrame = null;
let repl = null;
let currentPattern = null;
let panicTimeout = null;
let scheduler = null;
let audioContext = null;
let activeNodes = []; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–¥–∏–æ –Ω–æ–¥—ã
let isTransitioning = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π

// Loops management
let loops = []; // –ú–∞—Å—Å–∏–≤ –ª—É–ø–æ–≤ { code: string, name: string }
let currentLoopIndex = -1; // –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—É–ø–∞
const MAX_LOOPS = 8;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Strudel —á–µ—Ä–µ–∑ @strudel/web
async function initDayvibe() {
    try {
        // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è initStrudel –∏–∑ @strudel/web
        if (typeof window.initStrudel === 'undefined') {
            console.warn('‚è≥ Waiting for Strudel to load...');
            setTimeout(initDayvibe, 100);
            return;
        }

        console.log('üîß Initializing Strudel with @strudel/web...');

        // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é initStrudel() –∏–∑ @strudel/web —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—ç–º–ø–ª–æ–≤
        await window.initStrudel({
            prebake: async () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ Dirt-Samples
                await samples('github:tidalcycles/Dirt-Samples');
                console.log('‚úÖ Dirt-Samples loaded');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä–∞–º-–º–∞—à–∏–Ω—ã –≤—Ä—É—á–Ω—É—é (–Ω–µ—Ç strudel.json –≤ —Ä–µ–ø–æ)
                const drumMachinesBaseUrl = 'https://raw.githubusercontent.com/ritchse/tidal-drum-machines/main/machines/';

                // Roland TR-909
                await samples({
                    rolandtr909bd: ['RolandTR909/rolandtr909-bd/Bassdrum-01.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-02.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-03.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-04.wav'],
                    rolandtr909sd: ['RolandTR909/rolandtr909-sd/sd01.wav', 'RolandTR909/rolandtr909-sd/sd02.wav', 'RolandTR909/rolandtr909-sd/sd03.wav'],
                    rolandtr909hh: ['RolandTR909/rolandtr909-hh/hh01.wav', 'RolandTR909/rolandtr909-hh/hh02.wav', 'RolandTR909/rolandtr909-hh/hh03.wav'],
                    rolandtr909oh: ['RolandTR909/rolandtr909-oh/oh01.wav', 'RolandTR909/rolandtr909-oh/oh02.wav', 'RolandTR909/rolandtr909-oh/oh03.wav'],
                    rolandtr909cp: ['RolandTR909/rolandtr909-cp/cp01.wav', 'RolandTR909/rolandtr909-cp/cp02.wav', 'RolandTR909/rolandtr909-cp/cp03.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-909 loaded');

                // Roland TR-808
                await samples({
                    rolandtr808bd: ['RolandTR808/rolandtr808-bd/BD0000.WAV', 'RolandTR808/rolandtr808-bd/BD2500.WAV', 'RolandTR808/rolandtr808-bd/BD5000.WAV'],
                    rolandtr808sd: ['RolandTR808/rolandtr808-sd/SD0000.WAV', 'RolandTR808/rolandtr808-sd/SD0010.WAV', 'RolandTR808/rolandtr808-sd/SD0025.WAV'],
                    rolandtr808hh: ['RolandTR808/rolandtr808-hh/CH.WAV', 'RolandTR808/rolandtr808-hh/CHH.WAV'],
                    rolandtr808oh: ['RolandTR808/rolandtr808-oh/OH00.WAV', 'RolandTR808/rolandtr808-oh/OH10.WAV', 'RolandTR808/rolandtr808-oh/OH25.WAV'],
                    rolandtr808cp: ['RolandTR808/rolandtr808-cp/cp0.wav', 'RolandTR808/rolandtr808-cp/cp1.wav', 'RolandTR808/rolandtr808-cp/cp2.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-808 loaded');
            },
        });

        console.log('‚úÖ Strudel initialized with samples!');
        console.log('üîç Functions available:');
        console.log('- sound:', typeof sound);
        console.log('- note:', typeof note);
        console.log('- evaluate:', typeof evaluate);
        console.log('- hush:', typeof hush);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ scheduler –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (typeof getScheduler === 'function') {
            scheduler = getScheduler();
            console.log('‚úÖ Scheduler ref saved:', scheduler);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (scheduler.audioContext) {
                audioContext = scheduler.audioContext;
                console.log('‚úÖ AudioContext ref saved:', audioContext.state);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è REPL
        repl = {
            evaluate: async (code) => {
                try {
                    console.log('üéµ Evaluating code with @strudel/web...');

                    // –ü–ê–¢–ß: AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å .fade(). –ó–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π xfade().
                    let patchedCode = code;
                    if (patchedCode.includes('.fade(')) {
                        console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω .fade(). –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ç—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
                        // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "stack(...).fade(...)" –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π "xfade(...)"
                        patchedCode = patchedCode.replace(/stack\s*\(([\s\S]*)\)\s*\.fade\s*\([^)]*\)/g, 'xfade($1)');
                        console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:', patchedCode);
                    }

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é evaluate() –∏–∑ @strudel/web —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
                    const result = await evaluate(patchedCode);
                    console.log('‚úÖ Code evaluated, result:', result);

                    return result;
                } catch (err) {
                    console.error('‚ùå Eval error:', err);
                    throw err;
                }
            },
            stop: () => {
                try {
                    console.log('‚èπÔ∏è REPL stop called...');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduler.stop() –≤–º–µ—Å—Ç–æ hush()
                    if (scheduler && typeof scheduler.stop === 'function') {
                        scheduler.stop();
                        console.log('‚úÖ Scheduler stopped!');
                    } else if (typeof hush === 'function') {
                        hush();
                        console.log('‚úÖ Hush called!');
                    }
                } catch (err) {
                    console.error('‚ùå Stop error:', err);
                }
            }
        };

        updateStatus('Ready', false);
        console.log('‚úÖ DAYVIBE ready to rock! üéµ');
    } catch (error) {
        console.error('‚ùå Failed to initialize Strudel:', error);
        updateStatus('Error', false);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Strudel. –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function createVisualizer() {
    const visualizer = document.getElementById('visualizer');
    for (let i = 0; i < 32; i++) {
        const bar = document.createElement('div');
        bar.className = 'visualizer-bar';
        visualizer.appendChild(bar);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function animateVisualizer() {
    if (!isPlaying) return;

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        const height = Math.random() * 90 + 10;
        bar.style.height = height + '%';
    });

    animationFrame = requestAnimationFrame(animateVisualizer);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function stopVisualizer() {
    if (animationFrame) {
        cancelAnimationFrame(animationFrame);
        animationFrame = null;
    }

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        bar.style.height = '10%';
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–¥–∞ –ª—É–ø–æ–≤
function updateLoopsGrid() {
    const grid = document.getElementById('loopsGrid');
    grid.innerHTML = '';

    for (let i = 0; i < MAX_LOOPS; i++) {
        const tile = document.createElement('div');
        tile.className = 'loop-tile';

        if (loops[i]) {
            tile.classList.add('active');
            if (i === currentLoopIndex) {
                tile.classList.add('playing');
            }

            const loopName = document.createElement('div');
            loopName.className = 'loop-name';
            loopName.textContent = loops[i].name || `Loop ${i + 1}`;
            tile.appendChild(loopName);

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É–ø–æ–º
            const controls = document.createElement('div');
            controls.className = 'loop-controls-mini';

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'loop-btn-delete';
            deleteBtn.innerHTML = '√ó';
            deleteBtn.title = 'Delete loop';
            deleteBtn.onclick = (e) => {
                e.stopPropagation();
                deleteLoop(i);
            };

            // –ö–Ω–æ–ø–∫–∞ –≤–≤–µ—Ä—Ö
            const upBtn = document.createElement('button');
            upBtn.className = 'loop-btn-move';
            upBtn.innerHTML = '‚ñ≤';
            upBtn.title = 'Move up';
            upBtn.disabled = i === 0;
            upBtn.onclick = (e) => {
                e.stopPropagation();
                moveLoopUp(i);
            };

            // –ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑
            const downBtn = document.createElement('button');
            downBtn.className = 'loop-btn-move';
            downBtn.innerHTML = '‚ñº';
            downBtn.title = 'Move down';
            downBtn.disabled = i === loops.length - 1;
            downBtn.onclick = (e) => {
                e.stopPropagation();
                moveLoopDown(i);
            };

            controls.appendChild(upBtn);
            controls.appendChild(downBtn);
            controls.appendChild(deleteBtn);
            tile.appendChild(controls);

            // –ö–ª–∏–∫ –ø–æ —Ç–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            tile.onclick = (e) => {
                if (!e.target.classList.contains('loop-btn-delete') &&
                    !e.target.classList.contains('loop-btn-move')) {
                    switchToLoop(i);
                }
            };
        } else {
            tile.classList.add('empty');
            const emptyText = document.createElement('div');
            emptyText.className = 'loop-empty-text';
            emptyText.textContent = '+';
            tile.appendChild(emptyText);
        }

        grid.appendChild(tile);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI –∫–Ω–æ–ø–æ–∫
    updateAIButtonsState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è AI –∫–Ω–æ–ø–æ–∫
function updateAIButtonsState() {
    const transitionBtn = document.getElementById('transitionBtn');
    const continueBtn = document.getElementById('continueBtn');

    // Transition –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞
    transitionBtn.disabled = loops.length < 2;

    // Continue –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –ª—É–ø
    continueBtn.disabled = loops.length < 1;
}

// –£–¥–∞–ª–∏—Ç—å –ª—É–ø –∏–∑ –æ—á–µ—Ä–µ–¥–∏
function deleteLoop(index) {
    if (index < 0 || index >= loops.length) {
        return;
    }

    const loopName = loops[index].name || `Loop ${index + 1}`;

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å "${loopName}"?`)) {
        return;
    }

    // –£–¥–∞–ª—è–µ–º –ª—É–ø –∏–∑ –º–∞—Å—Å–∏–≤–∞
    loops.splice(index, 1);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª—É–ø
        if (loops.length === 0) {
            currentLoopIndex = -1;
            stopCode(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        } else if (currentLoopIndex >= loops.length) {
            currentLoopIndex = loops.length - 1;
        }
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –ª—É–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentLoopIndex >= 0 && isPlaying) {
            switchToLoop(currentLoopIndex);
        }
    } else if (currentLoopIndex > index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ª—É–ø –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º, —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        currentLoopIndex--;
    }

    updateLoopsGrid();
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª—É–ø ${index}: ${loopName}`);
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª—É–ø –≤–≤–µ—Ä—Ö
function moveLoopUp(index) {
    if (index <= 0 || index >= loops.length) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    [loops[index - 1], loops[index]] = [loops[index], loops[index - 1]];

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        currentLoopIndex = index - 1;
    } else if (currentLoopIndex === index - 1) {
        currentLoopIndex = index;
    }

    updateLoopsGrid();
    console.log(`‚¨ÜÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö`);
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª—É–ø –≤–Ω–∏–∑
function moveLoopDown(index) {
    if (index < 0 || index >= loops.length - 1) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
    [loops[index], loops[index + 1]] = [loops[index + 1], loops[index]];

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        currentLoopIndex = index + 1;
    } else if (currentLoopIndex === index + 1) {
        currentLoopIndex = index;
    }

    updateLoopsGrid();
    console.log(`‚¨áÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑`);
}

// –î–æ–±–∞–≤–∏—Ç—å –ª—É–ø –≤ –æ—á–µ—Ä–µ–¥—å
function addLoop() {
    if (loops.length >= MAX_LOOPS) {
        alert('–ú–∞–∫—Å–∏–º—É–º 8 –ª—É–ø–æ–≤!');
        return;
    }

    const code = document.getElementById('codeEditor').value.trim();
    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –ª—É–ø–∞!');
        return;
    }

    loops.push({
        code: code,
        name: `Loop ${loops.length + 1}`
    });

    updateLoopsGrid();
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª—É–ø
async function nextLoop() {
    if (loops.length < 2) return;
    const nextIndex = (currentLoopIndex + 1) % loops.length;
    await switchToLoop(nextIndex);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É–ø
async function prevLoop() {
    if (loops.length < 2) return;
    let prevIndex = currentLoopIndex - 1;
    if (prevIndex < 0) {
        prevIndex = loops.length - 1;
    }
    await switchToLoop(prevIndex);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª—É–ø —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –ø–æ —Ü–∏–∫–ª—É
async function switchToLoop(index) {
    // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ª—É–ø, –∏–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –ª—É–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!loops[index] || isTransitioning || index === currentLoopIndex) {
        return;
    }

    const performSwitch = async () => {
        console.log(`üöÄ Switching to loop ${index + 1}`);
        currentLoopIndex = index;
        const loop = loops[index];
        document.getElementById('codeEditor').value = loop.code;
        updateLoopsGrid();

        if (isPlaying) {
            await playCode();
        }
    };

    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç –∏ scheduler –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    if (isPlaying && scheduler && typeof scheduler.nextCycle === 'function') {
        isTransitioning = true;
        console.log(`‚è≥ Scheduling transition to loop ${index + 1} for next cycle...`);
        
        await scheduler.nextCycle();
        
        await performSwitch();
        isTransitioning = false;
    } else {
        // –ò–Ω–∞—á–µ (–µ—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        await performSwitch();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(text, playing) {
    const statusText = document.getElementById('statusText');
    const statusIndicator = document.getElementById('statusIndicator');
    const playBtn = document.getElementById('playBtn');
    const stopBtn = document.getElementById('stopBtn');

    statusText.textContent = text;
    isPlaying = playing;

    if (playing) {
        statusIndicator.classList.add('active');
        statusIndicator.classList.remove('stopped');
        playBtn.disabled = true;
        stopBtn.disabled = false;
    } else {
        statusIndicator.classList.remove('active');
        statusIndicator.classList.add('stopped');
        playBtn.disabled = false;
        stopBtn.disabled = true;
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞
async function playCode() {
    const code = document.getElementById('codeEditor').value.trim();

    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–º–µ—Ä!');
        return;
    }

    if (!repl) {
        alert('Strudel –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É.');
        return;
    }

    try {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –Ω–µ—Ç –ª—É–ø–æ–≤ - —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ª—É–ø
        if (loops.length === 0) {
            loops.push({
                code: code,
                name: 'Loop 1'
            });
            currentLoopIndex = 0;
            updateLoopsGrid();
        }

        console.log('‚ñ∂ Playing code:', code);

        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        console.log('üîß Stopping any previous playback...');

        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern && typeof currentPattern.stop === 'function') {
            currentPattern.stop();
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scheduler
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }

        // –í—ã–∑—ã–≤–∞–µ–º hush –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã Strudel —É—Å–ø–µ–ª –æ—á–∏—Å—Ç–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 50));

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω (resume –µ—Å–ª–∏ –±—ã–ª suspended)
        if (audioContext && audioContext.state === 'suspended') {
            console.log('üîß Resuming audio context...');
            await audioContext.resume();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º scheduler —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º evaluate
        if (scheduler && typeof scheduler.start === 'function') {
            console.log('üîß Starting scheduler...');
            scheduler.start();
        }

        updateStatus('Playing...', true);

        // Evaluate –∫–æ–¥ —á–µ—Ä–µ–∑ REPL
        currentPattern = await repl.evaluate(code);

        // –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        animateVisualizer();

        console.log('‚úÖ Code executed successfully');
    } catch (error) {
        console.error('‚ùå Playback error:', error);
        updateStatus('Error', false);
        isPlaying = false;
        stopVisualizer();
        alert('–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\n' + error.message);
    }
}

// –£—Ç–∏–ª–∏—Ç–∞: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API Strudel
async function killAllAudioSources() {
    try {
        // Evaluate –ø—É—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ [cyclist] stop
        if (typeof evaluate === 'function') {
            try {
                await evaluate('silence');
            } catch (e) {
                // Silent fail
            }
        }

        // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ cyclist —á–µ—Ä–µ–∑ window
        if (typeof window.cyclist !== 'undefined' && window.cyclist) {
            try {
                if (typeof window.cyclist.stop === 'function') {
                    window.cyclist.stop();
                }
            } catch (e) {
                // Silent fail
            }
        }

        // scheduler stop
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }
    } catch (err) {
        console.error('‚ùå Stop failed:', err);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
async function stopCode() {
    try {
        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—á–∏—â–∞–µ–º UI –∏ —Ñ–ª–∞–≥
        isPlaying = false;
        stopVisualizer();

        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern) {
            try {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
            } catch (e) {
                // Silent fail
            }
            currentPattern = null;
        }

        // –í—ã–∑—ã–≤–∞–µ–º Strudel API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await killAllAudioSources();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: hush() –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç—É—Å
        updateStatus('Stopped', false);
    } catch (error) {
        console.error('‚ùå Stop error:', error);

        // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        try {
            if (currentPattern) {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
                currentPattern = null;
            }

            if (typeof hush === 'function') {
                hush();
            }
        } catch (e) {
            console.error('‚ùå Emergency stop failed:', e);
        }

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        isPlaying = false;
        updateStatus('Stopped', false);
        stopVisualizer();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
function loadExample() {
    const exampleCode = `// DAYVIBE Example - Roland TR-909 Beat
s("rolandtr909bd rolandtr909sd rolandtr909hh rolandtr909sd")
  .gain(0.8)

// Try also:
// s("rolandtr808bd*2, rolandtr808sd(3,8)")
// s("bd cp sd cp").speed("1 2 0.5 1.5")`;

    document.getElementById('codeEditor').value = exampleCode;
}

// AI Generation functions
// –í–ê–ñ–ù–û: –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render, –∞ –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞!
// –ó–∞–º–µ–Ω–∏ YOUR_SERVICE_NAME –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render
const API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-script';

// === Panel Management Functions ===

function openAIPanel() {
    const panel = document.getElementById('aiPanel');
    const overlay = document.getElementById('panelOverlay');
    const panelTitle = document.getElementById('panelTitle');
    const panelBody = document.getElementById('panelBody');
    const panelStatus = document.getElementById('panelStatus');

    panelTitle.textContent = '‚ú® Generate New Loop';
    panelBody.innerHTML = `
        <textarea id="aiPromptInput" class="ai-prompt-input" placeholder="–û–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å...&#10;&#10;–ù–∞–ø—Ä–∏–º–µ—Ä:&#10;- –ë—ã—Å—Ç—Ä—ã–π techno –ø–∞—Ç—Ç–µ—Ä–Ω —Å 909 kick&#10;- –ú–µ–¥–ª–µ–Ω–Ω—ã–π ambient —Å pad –∑–≤—É–∫–∞–º–∏&#10;- Jungle breaks —Å –±–∞—Å–æ–º"></textarea>
        <button class="btn btn-generate" onclick="generateScript()">–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
    `;
    panelStatus.textContent = '';
    panelStatus.className = 'ai-status';

    panel.classList.add('open');
    overlay.classList.add('active');
}

function openEditPanel() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }

    const panel = document.getElementById('aiPanel');
    const overlay = document.getElementById('panelOverlay');
    const panelTitle = document.getElementById('panelTitle');
    const panelBody = document.getElementById('panelBody');
    const panelStatus = document.getElementById('panelStatus');

    panelTitle.textContent = '‚úèÔ∏è Edit Current Loop';
    panelBody.innerHTML = `
        <textarea id="editPromptInput" class="ai-prompt-input" placeholder="–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—É–ø–µ...&#10;&#10;–ù–∞–ø—Ä–∏–º–µ—Ä:&#10;- –°–¥–µ–ª–∞–π –º–µ–¥–ª–µ–Ω–Ω–µ–µ&#10;- –î–æ–±–∞–≤—å reverb&#10;- –ó–∞–º–µ–Ω–∏ kick –Ω–∞ –¥—Ä—É–≥–æ–π&#10;- –£–ø—Ä–æ—Å—Ç–∏ —Ä–∏—Ç–º"></textarea>
        <button class="btn btn-generate" onclick="editLoop()">–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
    `;
    panelStatus.textContent = '';
    panelStatus.className = 'ai-status';

    panel.classList.add('open');
    overlay.classList.add('active');
}

function openContinuePanel() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
        return;
    }

    const panel = document.getElementById('aiPanel');
    const overlay = document.getElementById('panelOverlay');
    const panelTitle = document.getElementById('panelTitle');
    const panelBody = document.getElementById('panelBody');
    const panelStatus = document.getElementById('panelStatus');

    panelTitle.textContent = '‚û°Ô∏è Continue Loop';
    panelBody.innerHTML = `
        <textarea id="continuePromptInput" class="ai-prompt-input" placeholder="–û–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å —ç—Ç–æ—Ç –ª—É–ø...&#10;&#10;–ù–∞–ø—Ä–∏–º–µ—Ä:&#10;- –î–æ–±–∞–≤—å hi-hats –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–π&#10;- –£—Å–ª–æ–∂–Ω–∏ —Ä–∏—Ç–º&#10;- –°–¥–µ–ª–∞–π –±–æ–ª–µ–µ –º–µ–ª–æ–¥–∏—á–Ω—ã–º"></textarea>
        <button class="btn btn-generate" onclick="generateContinuation()">–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</button>
    `;
    panelStatus.textContent = '';
    panelStatus.className = 'ai-status';

    panel.classList.add('open');
    overlay.classList.add('active');
}

function openTransitionPanel() {
    if (loops.length < 2) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
        return;
    }

    const panel = document.getElementById('aiPanel');
    const overlay = document.getElementById('panelOverlay');
    const panelTitle = document.getElementById('panelTitle');
    const panelBody = document.getElementById('panelBody');
    const panelStatus = document.getElementById('panelStatus');

    panelTitle.textContent = 'üîÑ Create Transition';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª—É–ø–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    let loopOptions = '';
    loops.forEach((loop, i) => {
        const loopName = loop.name || `Loop ${i + 1}`;
        loopOptions += `<option value="${i}">${loopName}</option>`;
    });

    panelBody.innerHTML = `
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; color: #c9d1d9;">From Loop:</label>
            <select id="transitionFromLoop" class="ai-prompt-input" style="min-height: auto; padding: 8px;">
                ${loopOptions}
            </select>
        </div>
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; color: #c9d1d9;">To Loop:</label>
            <select id="transitionToLoop" class="ai-prompt-input" style="min-height: auto; padding: 8px;">
                ${loopOptions}
            </select>
        </div>
        <button class="btn btn-generate" onclick="generateTransition()">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥</button>
    `;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setTimeout(() => {
        const fromSelect = document.getElementById('transitionFromLoop');
        const toSelect = document.getElementById('transitionToLoop');
        if (currentLoopIndex >= 0) {
            fromSelect.value = currentLoopIndex;
            toSelect.value = currentLoopIndex < loops.length - 1 ? currentLoopIndex + 1 : 0;
        }
    }, 0);

    panelStatus.textContent = '';
    panelStatus.className = 'ai-status';

    panel.classList.add('open');
    overlay.classList.add('active');
}

function closeAIPanel() {
    const panel = document.getElementById('aiPanel');
    const overlay = document.getElementById('panelOverlay');

    panel.classList.remove('open');
    overlay.classList.remove('active');
}

// === Update Current Loop ===

function updateCurrentLoop() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    const editor = document.getElementById('codeEditor');
    const code = editor.value.trim();

    if (!code) {
        alert('–†–µ–¥–∞–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞
    loops[currentLoopIndex].code = code;
    loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥
    updateLoopsGrid();

    // –ï—Å–ª–∏ –ª—É–ø –∏–≥—Ä–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (isPlaying && currentLoopIndex >= 0) {
        switchToLoop(currentLoopIndex);
    }

    console.log(`‚úÖ Loop ${currentLoopIndex + 1} updated`);
}

// === Edit Loop with AI ===

async function editLoop() {
    const promptInput = document.getElementById('editPromptInput');
    const statusDiv = document.getElementById('panelStatus');
    const editBtn = document.querySelector('.btn-generate');

    const prompt = promptInput.value.trim();

    if (!prompt) {
        statusDiv.textContent = '–û–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å';
        statusDiv.className = 'ai-status error';
        return;
    }

    if (prompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'ai-status error';
        return;
    }

    const currentLoop = loops[currentLoopIndex].code;

    try {
        editBtn.disabled = true;
        statusDiv.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É–ø–∞...';
        statusDiv.className = 'ai-status loading';

        const response = await fetch('https://wo-server-v1.onrender.com/api/edit-strudel-loop', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt,
                currentLoop
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        document.getElementById('codeEditor').value = data.code;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–ø
        loops[currentLoopIndex].code = data.code;
        loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;
        updateLoopsGrid();

        statusDiv.textContent = '‚úÖ –õ—É–ø –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω! –ó–∞–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å...';
        statusDiv.className = 'ai-status success';

        setTimeout(() => {
            closeAIPanel();
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'ai-status error';
    } finally {
        editBtn.disabled = false;
    }
}

async function generateScript() {
    const promptInput = document.getElementById('aiPromptInput');
    const statusDiv = document.getElementById('panelStatus');
    const generateBtn = document.querySelector('.btn-generate');

    const prompt = promptInput.value.trim();

    if (!prompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å';
        statusDiv.className = 'ai-status error';
        return;
    }

    if (prompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'ai-status error';
        return;
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...';
        statusDiv.className = 'ai-status loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ prompt })
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const responseText = await response.text();
        console.log('Response text:', responseText);

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ endpoint –µ—â–µ –Ω–µ –∑–∞–¥–µ–ø–ª–æ–∏–ª—Å—è –Ω–∞ Render. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        document.getElementById('codeEditor').value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –°–∫—Ä–∏–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ó–∞–∫—Ä–æ–π –æ–∫–Ω–æ –∏ –Ω–∞–∂–º–∏ Play';
        statusDiv.className = 'ai-status success';

        // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            closeAIPanel();
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'ai-status error';
    } finally {
        generateBtn.disabled = false;
    }
}


// Transition Generation functions
const TRANSITION_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-transition';

async function generateTransition() {
    const fromSelect = document.getElementById('transitionFromLoop');
    const toSelect = document.getElementById('transitionToLoop');
    const statusDiv = document.getElementById('panelStatus');
    const generateBtn = document.querySelector('.btn-generate');

    const fromIndex = parseInt(fromSelect.value);
    const toIndex = parseInt(toSelect.value);

    if (fromIndex === toIndex) {
        statusDiv.textContent = '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–Ω—ã–µ –ª—É–ø—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞!';
        statusDiv.className = 'ai-status error';
        return;
    }

    const fromLoop = loops[fromIndex];
    const toLoop = loops[toIndex];

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞...';
        statusDiv.className = 'ai-status loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(TRANSITION_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fromLoop: fromLoop.code,
                toLoop: toLoop.code
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª—É–ø–∞–º–∏
        const transitionLoop = {
            code: data.code,
            name: `Transition ${fromIndex + 1}‚Üí${toIndex + 1}`
        };

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ fromLoop
        const insertIndex = Math.max(fromIndex, toIndex);
        loops.splice(insertIndex, 0, transitionLoop);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥
        updateLoopsGrid();

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        document.getElementById('codeEditor').value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω! –ó–∞–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å...';
        statusDiv.className = 'ai-status success';

        // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            closeAIPanel();
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'ai-status error';
    } finally {
        generateBtn.disabled = false;
    }
}

// Continue Loop Generation functions
const CONTINUE_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-continuation';

async function generateContinuation() {
    const promptInput = document.getElementById('continuePromptInput');
    const statusDiv = document.getElementById('panelStatus');
    const generateBtn = document.querySelector('.btn-generate');
    const prompt = promptInput.value.trim();

    if (!prompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –ª—É–ø';
        statusDiv.className = 'ai-status error';
        return;
    }

    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ª—É–ø –∫–∞–∫ –±–∞–∑—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    const currentLoop = loops[currentLoopIndex];

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...';
        statusDiv.className = 'ai-status loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(CONTINUE_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                previousLoop: currentLoop.code
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        document.getElementById('codeEditor').value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ó–∞–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å...';
        statusDiv.className = 'ai-status success';

        // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            closeAIPanel();
        }, 2000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'ai-status error';
    } finally {
        generateBtn.disabled = false;
    }
}


// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        if (!isPlaying) {
            playCode();
        }
    }
    if ((e.ctrlKey || e.metaKey) && e.key === '.') {
        e.preventDefault();
        if (isPlaying) {
            stopCode();
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    createVisualizer();
    updateLoopsGrid(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∏–¥ –ª—É–ø–æ–≤
    initDayvibe();

    console.log('üéµ DAYVIBE initialized');
    console.log('‚å®Ô∏è  Hotkeys: Ctrl+Enter (Play) | Ctrl+. (Stop)');
});
