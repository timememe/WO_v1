// DAYVIBE - Live Coding Music with Strudel
// State
let isPlaying = false;
let animationFrame = null;
let repl = null;
let currentPattern = null;
let panicTimeout = null;
let scheduler = null;
let audioContext = null;
let activeNodes = []; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–¥–∏–æ –Ω–æ–¥—ã
let isTransitioning = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π

// Loops management
let loops = []; // –ú–∞—Å—Å–∏–≤ –ª—É–ø–æ–≤ { code: string, name: string }
let currentLoopIndex = -1; // –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—É–ø–∞
const MAX_LOOPS = 8;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Strudel —á–µ—Ä–µ–∑ @strudel/web
async function initDayvibe() {
    try {
        // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è initStrudel –∏–∑ @strudel/web
        if (typeof window.initStrudel === 'undefined') {
            console.warn('‚è≥ Waiting for Strudel to load...');
            setTimeout(initDayvibe, 100);
            return;
        }

        console.log('üîß Initializing Strudel with @strudel/web...');

        // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é initStrudel() –∏–∑ @strudel/web —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—ç–º–ø–ª–æ–≤
        await window.initStrudel({
            prebake: async () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ Dirt-Samples
                await samples('github:tidalcycles/Dirt-Samples');
                console.log('‚úÖ Dirt-Samples loaded');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä–∞–º-–º–∞—à–∏–Ω—ã –≤—Ä—É—á–Ω—É—é (–Ω–µ—Ç strudel.json –≤ —Ä–µ–ø–æ)
                const drumMachinesBaseUrl = 'https://raw.githubusercontent.com/ritchse/tidal-drum-machines/main/machines/';

                // Roland TR-909
                await samples({
                    rolandtr909bd: ['RolandTR909/rolandtr909-bd/Bassdrum-01.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-02.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-03.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-04.wav'],
                    rolandtr909sd: ['RolandTR909/rolandtr909-sd/sd01.wav', 'RolandTR909/rolandtr909-sd/sd02.wav', 'RolandTR909/rolandtr909-sd/sd03.wav'],
                    rolandtr909hh: ['RolandTR909/rolandtr909-hh/hh01.wav', 'RolandTR909/rolandtr909-hh/hh02.wav', 'RolandTR909/rolandtr909-hh/hh03.wav'],
                    rolandtr909oh: ['RolandTR909/rolandtr909-oh/oh01.wav', 'RolandTR909/rolandtr909-oh/oh02.wav', 'RolandTR909/rolandtr909-oh/oh03.wav'],
                    rolandtr909cp: ['RolandTR909/rolandtr909-cp/cp01.wav', 'RolandTR909/rolandtr909-cp/cp02.wav', 'RolandTR909/rolandtr909-cp/cp03.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-909 loaded');

                // Roland TR-808
                await samples({
                    rolandtr808bd: ['RolandTR808/rolandtr808-bd/BD0000.WAV', 'RolandTR808/rolandtr808-bd/BD2500.WAV', 'RolandTR808/rolandtr808-bd/BD5000.WAV'],
                    rolandtr808sd: ['RolandTR808/rolandtr808-sd/SD0000.WAV', 'RolandTR808/rolandtr808-sd/SD0010.WAV', 'RolandTR808/rolandtr808-sd/SD0025.WAV'],
                    rolandtr808hh: ['RolandTR808/rolandtr808-hh/CH.WAV', 'RolandTR808/rolandtr808-hh/CHH.WAV'],
                    rolandtr808oh: ['RolandTR808/rolandtr808-oh/OH00.WAV', 'RolandTR808/rolandtr808-oh/OH10.WAV', 'RolandTR808/rolandtr808-oh/OH25.WAV'],
                    rolandtr808cp: ['RolandTR808/rolandtr808-cp/cp0.wav', 'RolandTR808/rolandtr808-cp/cp1.wav', 'RolandTR808/rolandtr808-cp/cp2.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-808 loaded');
            },
        });

        console.log('‚úÖ Strudel initialized with samples!');
        console.log('üîç Functions available:');
        console.log('- sound:', typeof sound);
        console.log('- note:', typeof note);
        console.log('- evaluate:', typeof evaluate);
        console.log('- hush:', typeof hush);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ scheduler –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (typeof getScheduler === 'function') {
            scheduler = getScheduler();
            console.log('‚úÖ Scheduler ref saved:', scheduler);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (scheduler.audioContext) {
                audioContext = scheduler.audioContext;
                console.log('‚úÖ AudioContext ref saved:', audioContext.state);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è REPL
        repl = {
            evaluate: async (code) => {
                try {
                    console.log('üéµ Evaluating code with @strudel/web...');

                    // –ü–ê–¢–ß: AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å .fade(). –ó–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π xfade().
                    let patchedCode = code;
                    if (patchedCode.includes('.fade(')) {
                        console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω .fade(). –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ç—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
                        // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "stack(...).fade(...)" –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π "xfade(...)"
                        patchedCode = patchedCode.replace(/stack\s*\(([\s\S]*)\)\s*\.fade\s*\([^)]*\)/g, 'xfade($1)');
                        console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:', patchedCode);
                    }

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é evaluate() –∏–∑ @strudel/web —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
                    const result = await evaluate(patchedCode);
                    console.log('‚úÖ Code evaluated, result:', result);

                    return result;
                } catch (err) {
                    console.error('‚ùå Eval error:', err);
                    throw err;
                }
            },
            stop: () => {
                try {
                    console.log('‚èπÔ∏è REPL stop called...');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduler.stop() –≤–º–µ—Å—Ç–æ hush()
                    if (scheduler && typeof scheduler.stop === 'function') {
                        scheduler.stop();
                        console.log('‚úÖ Scheduler stopped!');
                    } else if (typeof hush === 'function') {
                        hush();
                        console.log('‚úÖ Hush called!');
                    }
                } catch (err) {
                    console.error('‚ùå Stop error:', err);
                }
            }
        };

        updateStatus('Ready', false);
        console.log('‚úÖ DAYVIBE ready to rock! üéµ');

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º live reload mode
        setupLiveReload();
        console.log('‚úÖ Live reload mode enabled (active during playback)');
    } catch (error) {
        console.error('‚ùå Failed to initialize Strudel:', error);
        updateStatus('Error', false);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Strudel. –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function createVisualizer() {
    const visualizer = document.getElementById('visualizer');
    for (let i = 0; i < 32; i++) {
        const bar = document.createElement('div');
        bar.className = 'visualizer-bar';
        visualizer.appendChild(bar);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function animateVisualizer() {
    if (!isPlaying) return;

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        const height = Math.random() * 90 + 10;
        bar.style.height = height + '%';
    });

    animationFrame = requestAnimationFrame(animateVisualizer);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function stopVisualizer() {
    if (animationFrame) {
        cancelAnimationFrame(animationFrame);
        animationFrame = null;
    }

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        bar.style.height = '10%';
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–¥–∞ –ª—É–ø–æ–≤
function updateLoopsGrid() {
    const grid = document.getElementById('loopsGrid');
    grid.innerHTML = '';

    for (let i = 0; i < MAX_LOOPS; i++) {
        const tile = document.createElement('div');
        tile.className = 'loop-tile';

        if (loops[i]) {
            tile.classList.add('active');
            if (i === currentLoopIndex) {
                tile.classList.add('playing');
            }

            const loopName = document.createElement('div');
            loopName.className = 'loop-name';
            loopName.textContent = loops[i].name || `Loop ${i + 1}`;
            tile.appendChild(loopName);

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É–ø–æ–º
            const controls = document.createElement('div');
            controls.className = 'loop-controls-mini';

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'loop-btn-delete';
            deleteBtn.innerHTML = '√ó';
            deleteBtn.title = 'Delete loop';
            deleteBtn.onclick = (e) => {
                e.stopPropagation();
                deleteLoop(i);
            };

            // –ö–Ω–æ–ø–∫–∞ –≤–≤–µ—Ä—Ö
            const upBtn = document.createElement('button');
            upBtn.className = 'loop-btn-move';
            upBtn.innerHTML = '‚ñ≤';
            upBtn.title = 'Move up';
            upBtn.disabled = i === 0;
            upBtn.onclick = (e) => {
                e.stopPropagation();
                moveLoopUp(i);
            };

            // –ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑
            const downBtn = document.createElement('button');
            downBtn.className = 'loop-btn-move';
            downBtn.innerHTML = '‚ñº';
            downBtn.title = 'Move down';
            downBtn.disabled = i === loops.length - 1;
            downBtn.onclick = (e) => {
                e.stopPropagation();
                moveLoopDown(i);
            };

            controls.appendChild(upBtn);
            controls.appendChild(downBtn);
            controls.appendChild(deleteBtn);
            tile.appendChild(controls);

            // –ö–ª–∏–∫ –ø–æ —Ç–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            tile.onclick = (e) => {
                if (!e.target.classList.contains('loop-btn-delete') &&
                    !e.target.classList.contains('loop-btn-move')) {
                    switchToLoop(i);
                }
            };
        } else {
            tile.classList.add('empty');
            const emptyText = document.createElement('div');
            emptyText.className = 'loop-empty-text';
            emptyText.textContent = '+';
            tile.appendChild(emptyText);
        }

        grid.appendChild(tile);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI –∫–Ω–æ–ø–æ–∫
    updateAIButtonsState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è AI –∫–Ω–æ–ø–æ–∫
function updateAIButtonsState() {
    const transitionBtn = document.getElementById('transitionBtn');
    const continueBtn = document.getElementById('continueBtn');

    // Transition –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞
    transitionBtn.disabled = loops.length < 2;

    // Continue –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –ª—É–ø
    continueBtn.disabled = loops.length < 1;
}

// –£–¥–∞–ª–∏—Ç—å –ª—É–ø –∏–∑ –æ—á–µ—Ä–µ–¥–∏
function deleteLoop(index) {
    if (index < 0 || index >= loops.length) {
        return;
    }

    const loopName = loops[index].name || `Loop ${index + 1}`;

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å "${loopName}"?`)) {
        return;
    }

    // –£–¥–∞–ª—è–µ–º –ª—É–ø –∏–∑ –º–∞—Å—Å–∏–≤–∞
    loops.splice(index, 1);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª—É–ø
        if (loops.length === 0) {
            currentLoopIndex = -1;
            stopCode(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        } else if (currentLoopIndex >= loops.length) {
            currentLoopIndex = loops.length - 1;
        }
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –ª—É–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentLoopIndex >= 0 && isPlaying) {
            switchToLoop(currentLoopIndex);
        }
    } else if (currentLoopIndex > index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ª—É–ø –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º, —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        currentLoopIndex--;
    }

    updateLoopsGrid();
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª—É–ø ${index}: ${loopName}`);
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª—É–ø –≤–≤–µ—Ä—Ö
function moveLoopUp(index) {
    if (index <= 0 || index >= loops.length) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    [loops[index - 1], loops[index]] = [loops[index], loops[index - 1]];

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        currentLoopIndex = index - 1;
    } else if (currentLoopIndex === index - 1) {
        currentLoopIndex = index;
    }

    updateLoopsGrid();
    console.log(`‚¨ÜÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö`);
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª—É–ø –≤–Ω–∏–∑
function moveLoopDown(index) {
    if (index < 0 || index >= loops.length - 1) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
    [loops[index], loops[index + 1]] = [loops[index + 1], loops[index]];

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        currentLoopIndex = index + 1;
    } else if (currentLoopIndex === index + 1) {
        currentLoopIndex = index;
    }

    updateLoopsGrid();
    console.log(`‚¨áÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑`);
}

// –î–æ–±–∞–≤–∏—Ç—å –ª—É–ø –≤ –æ—á–µ—Ä–µ–¥—å
function addLoop() {
    if (loops.length >= MAX_LOOPS) {
        alert('–ú–∞–∫—Å–∏–º—É–º 8 –ª—É–ø–æ–≤!');
        return;
    }

    const code = document.getElementById('codeEditor').value.trim();
    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –ª—É–ø–∞!');
        return;
    }

    loops.push({
        code: code,
        name: `Loop ${loops.length + 1}`
    });

    updateLoopsGrid();
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª—É–ø
async function nextLoop() {
    if (loops.length < 2) return;
    const nextIndex = (currentLoopIndex + 1) % loops.length;
    await switchToLoop(nextIndex);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É–ø
async function prevLoop() {
    if (loops.length < 2) return;
    let prevIndex = currentLoopIndex - 1;
    if (prevIndex < 0) {
        prevIndex = loops.length - 1;
    }
    await switchToLoop(prevIndex);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª—É–ø —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –ø–æ —Ü–∏–∫–ª—É
async function switchToLoop(index) {
    // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ª—É–ø, –∏–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –ª—É–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!loops[index] || isTransitioning || index === currentLoopIndex) {
        return;
    }

    const performSwitch = async () => {
        console.log(`üöÄ Switching to loop ${index + 1}`);
        currentLoopIndex = index;
        const loop = loops[index];
        document.getElementById('codeEditor').value = loop.code;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        saveOriginalCode();
        checkEditorChanges();

        updateLoopsGrid();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
        renderCodeSliders();

        if (isPlaying) {
            await playCode();
        }
    };

    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç –∏ scheduler –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    if (isPlaying && scheduler && typeof scheduler.nextCycle === 'function') {
        isTransitioning = true;
        console.log(`‚è≥ Scheduling transition to loop ${index + 1} for next cycle...`);
        
        await scheduler.nextCycle();
        
        await performSwitch();
        isTransitioning = false;
    } else {
        // –ò–Ω–∞—á–µ (–µ—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        await performSwitch();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(text, playing) {
    const statusText = document.getElementById('statusText');
    const statusIndicator = document.getElementById('statusIndicator');
    const playBtn = document.getElementById('playBtn');
    const stopBtn = document.getElementById('stopBtn');
    const editorTitle = document.getElementById('editorTitle');

    statusText.textContent = text;
    isPlaying = playing;

    if (playing) {
        statusIndicator.classList.add('active');
        statusIndicator.classList.remove('stopped');
        playBtn.disabled = true;
        stopBtn.disabled = false;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä Live Mode
        if (currentLoopIndex >= 0 && currentAIMode === 'normal') {
            editorTitle.textContent = 'Code Editor üî¥ LIVE';
        }
    } else {
        statusIndicator.classList.remove('active');
        statusIndicator.classList.add('stopped');
        playBtn.disabled = false;
        stopBtn.disabled = true;

        // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä Live Mode
        if (currentAIMode === 'normal') {
            editorTitle.textContent = 'Code Editor';
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ Update Loop
    // (—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, —Ç.–∫. —Ä–∞–±–æ—Ç–∞–µ—Ç live reload)
    checkEditorChanges();
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞
async function playCode() {
    const code = document.getElementById('codeEditor').value.trim();

    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–º–µ—Ä!');
        return;
    }

    if (!repl) {
        alert('Strudel –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É.');
        return;
    }

    try {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –Ω–µ—Ç –ª—É–ø–æ–≤ - —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ª—É–ø
        if (loops.length === 0) {
            loops.push({
                code: code,
                name: 'Loop 1'
            });
            currentLoopIndex = 0;
            updateLoopsGrid();
        }

        console.log('‚ñ∂ Playing code:', code);

        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        console.log('üîß Stopping any previous playback...');

        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern && typeof currentPattern.stop === 'function') {
            currentPattern.stop();
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scheduler
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }

        // –í—ã–∑—ã–≤–∞–µ–º hush –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã Strudel —É—Å–ø–µ–ª –æ—á–∏—Å—Ç–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 50));

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω (resume –µ—Å–ª–∏ –±—ã–ª suspended)
        if (audioContext && audioContext.state === 'suspended') {
            console.log('üîß Resuming audio context...');
            await audioContext.resume();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º scheduler —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º evaluate
        if (scheduler && typeof scheduler.start === 'function') {
            console.log('üîß Starting scheduler...');
            scheduler.start();
        }

        updateStatus('Playing...', true);

        // Evaluate –∫–æ–¥ —á–µ—Ä–µ–∑ REPL
        currentPattern = await repl.evaluate(code);

        // –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        animateVisualizer();

        console.log('‚úÖ Code executed successfully');
    } catch (error) {
        console.error('‚ùå Playback error:', error);
        updateStatus('Error', false);
        isPlaying = false;
        stopVisualizer();
        alert('–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\n' + error.message);
    }
}

// –£—Ç–∏–ª–∏—Ç–∞: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API Strudel
async function killAllAudioSources() {
    try {
        // Evaluate –ø—É—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ [cyclist] stop
        if (typeof evaluate === 'function') {
            try {
                await evaluate('silence');
            } catch (e) {
                // Silent fail
            }
        }

        // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ cyclist —á–µ—Ä–µ–∑ window
        if (typeof window.cyclist !== 'undefined' && window.cyclist) {
            try {
                if (typeof window.cyclist.stop === 'function') {
                    window.cyclist.stop();
                }
            } catch (e) {
                // Silent fail
            }
        }

        // scheduler stop
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }
    } catch (err) {
        console.error('‚ùå Stop failed:', err);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
async function stopCode() {
    try {
        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—á–∏—â–∞–µ–º UI –∏ —Ñ–ª–∞–≥
        isPlaying = false;
        stopVisualizer();

        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern) {
            try {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
            } catch (e) {
                // Silent fail
            }
            currentPattern = null;
        }

        // –í—ã–∑—ã–≤–∞–µ–º Strudel API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await killAllAudioSources();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: hush() –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç—É—Å
        updateStatus('Stopped', false);
    } catch (error) {
        console.error('‚ùå Stop error:', error);

        // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        try {
            if (currentPattern) {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
                currentPattern = null;
            }

            if (typeof hush === 'function') {
                hush();
            }
        } catch (e) {
            console.error('‚ùå Emergency stop failed:', e);
        }

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        isPlaying = false;
        updateStatus('Stopped', false);
        stopVisualizer();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
function loadExample() {
    const exampleCode = `// DAYVIBE Example - Roland TR-909 Beat
s("rolandtr909bd rolandtr909sd rolandtr909hh rolandtr909sd")
  .gain(0.8)
  .speed(1.0)
  .room(0.3)
  .pan(0.0)

// Try also:
// s("rolandtr808bd*2, rolandtr808sd(3,8)")
// s("bd cp sd cp").speed("1 2 0.5 1.5")`;

    document.getElementById('codeEditor').value = exampleCode;

    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    renderCodeSliders();

    console.log('‚úÖ Example code loaded! Try the sliders in the bottom-right corner.');
}

// AI Generation functions
// –í–ê–ñ–ù–û: –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render, –∞ –Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞!
// –ó–∞–º–µ–Ω–∏ YOUR_SERVICE_NAME –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render
const API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-script';

// === Editor AI Mode Management ===

let currentAIMode = 'normal'; // 'normal', 'generate', 'edit', 'continue', 'transition'
let savedCode = ''; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ AI —Ä–µ–∂–∏–º

function setEditorMode(mode, title, placeholder) {
    const container = document.getElementById('editorContainer');
    const editorTitle = document.getElementById('editorTitle');
    const codeEditor = document.getElementById('codeEditor');
    const editorStatus = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const editBtn = document.getElementById('editBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');
    const updateBtn = document.getElementById('updateBtn');

    currentAIMode = mode;
    container.setAttribute('data-mode', mode);
    editorTitle.textContent = title;
    codeEditor.placeholder = placeholder;

    if (mode === 'normal') {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        generateBtn.style.display = 'none';
        cancelBtn.style.display = 'none';
        editBtn.style.display = 'inline-block';
        addToLoopsBtn.style.display = 'none';
        editorStatus.classList.remove('active');
        // Update Loop –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è checkEditorChanges()
        checkEditorChanges();
        // –í–∫–ª—é—á–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã
        renderCodeSliders();
    } else {
        // AI —Ä–µ–∂–∏–º
        generateBtn.style.display = 'inline-block';
        cancelBtn.style.display = 'inline-block';
        editBtn.style.display = 'none';
        addToLoopsBtn.style.display = 'none';
        updateBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –≤ AI —Ä–µ–∂–∏–º–µ
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –≤ AI —Ä–µ–∂–∏–º–µ
        renderCodeSliders();
    }
}

function openGenerateMode() {
    savedCode = document.getElementById('codeEditor').value;
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'generate',
        '‚ú® AI Generate Loop',
        '–û–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ë—ã—Å—Ç—Ä—ã–π techno –ø–∞—Ç—Ç–µ—Ä–Ω —Å 909 kick\n- –ú–µ–¥–ª–µ–Ω–Ω—ã–π ambient —Å pad –∑–≤—É–∫–∞–º–∏\n- Jungle breaks —Å –±–∞—Å–æ–º'
    );
}

function openEditMode() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }

    savedCode = document.getElementById('codeEditor').value;
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'edit',
        '‚úèÔ∏è AI Edit Loop',
        '–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—É–ø–µ...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –°–¥–µ–ª–∞–π –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n- –î–æ–±–∞–≤—å reverb\n- –ó–∞–º–µ–Ω–∏ kick –Ω–∞ –¥—Ä—É–≥–æ–π\n- –£–ø—Ä–æ—Å—Ç–∏ —Ä–∏—Ç–º'
    );
}

function openContinueMode() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
        return;
    }

    savedCode = document.getElementById('codeEditor').value;
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'continue',
        '‚û°Ô∏è AI Continue Loop',
        '–û–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å —ç—Ç–æ—Ç –ª—É–ø...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –î–æ–±–∞–≤—å hi-hats –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–π\n- –£—Å–ª–æ–∂–Ω–∏ —Ä–∏—Ç–º\n- –°–¥–µ–ª–∞–π –±–æ–ª–µ–µ –º–µ–ª–æ–¥–∏—á–Ω—ã–º'
    );
}

function openTransitionMode() {
    if (loops.length < 2) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
        return;
    }

    savedCode = document.getElementById('codeEditor').value;

    // –î–ª—è transition –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    let loopOptions = '';
    loops.forEach((loop, i) => {
        const loopName = loop.name || `Loop ${i + 1}`;
        loopOptions += `<option value="${i}">${loopName}</option>`;
    });

    const promptText = `From Loop: [–≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ]\nTo Loop: [–≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ]\n\n–°–æ–∑–¥–∞—Å—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª—É–ø–∞–º–∏`;

    document.getElementById('codeEditor').value = promptText;
    document.getElementById('codeEditor').readOnly = true;

    setEditorMode(
        'transition',
        'üîÑ AI Make Transition',
        'Transition mode'
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ editorStatus
    const editorStatus = document.getElementById('editorStatus');
    editorStatus.innerHTML = `
        <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
            <select id="transitionFromLoop" style="padding: 8px; background: #0d1117; color: #c9d1d9; border: 2px solid #444; border-radius: 4px;">
                ${loopOptions}
            </select>
            <span style="color: #888;">‚Üí</span>
            <select id="transitionToLoop" style="padding: 8px; background: #0d1117; color: #c9d1d9; border: 2px solid #444; border-radius: 4px;">
                ${loopOptions}
            </select>
        </div>
    `;
    editorStatus.classList.add('active');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setTimeout(() => {
        const fromSelect = document.getElementById('transitionFromLoop');
        const toSelect = document.getElementById('transitionToLoop');
        if (currentLoopIndex >= 0) {
            fromSelect.value = currentLoopIndex;
            toSelect.value = currentLoopIndex < loops.length - 1 ? currentLoopIndex + 1 : 0;
        }
    }, 0);
}

function cancelAIMode() {
    const codeEditor = document.getElementById('codeEditor');
    codeEditor.value = savedCode;
    codeEditor.readOnly = false;
    setEditorMode('normal', 'Code Editor', '// –ù–∞–ø–∏—à–∏ —Å–≤–æ–π Strudel-–ø–∞—Ç—Ç–µ—Ä–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–º–µ—Ä...\n// –ù–∞–∂–º–∏ Play —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å!');
    savedCode = '';
}

async function executeAIGeneration() {
    const mode = currentAIMode;

    switch (mode) {
        case 'generate':
            await generateScript();
            break;
        case 'edit':
            await editLoop();
            break;
        case 'continue':
            await generateContinuation();
            break;
        case 'transition':
            await generateTransition();
            break;
    }
}

function addGeneratedLoop() {
    const codeEditor = document.getElementById('codeEditor');
    const code = codeEditor.value.trim();

    if (!code) {
        alert('–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ loops
    loops.push({
        code: code,
        name: `AI Loop ${loops.length + 1}`
    });

    updateLoopsGrid();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–¥
    savedCode = code;
    cancelAIMode();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    saveOriginalCode();
    checkEditorChanges();

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω AI –ª—É–ø ${loops.length}`);
}

// === Update Current Loop ===

function updateCurrentLoop() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    const editor = document.getElementById('codeEditor');
    const code = editor.value.trim();

    if (!code) {
        alert('–†–µ–¥–∞–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞
    loops[currentLoopIndex].code = code;
    loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥
    updateLoopsGrid();

    // –ï—Å–ª–∏ –ª—É–ø –∏–≥—Ä–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (isPlaying && currentLoopIndex >= 0) {
        switchToLoop(currentLoopIndex);
    }

    console.log(`‚úÖ Loop ${currentLoopIndex + 1} updated`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    saveOriginalCode();
    checkEditorChanges();
}

// === Track Editor Changes ===

let originalLoopCode = ''; // –•—Ä–∞–Ω–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞

function checkEditorChanges() {
    const editor = document.getElementById('codeEditor');
    const updateBtn = document.getElementById('updateBtn');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É–ø (currentLoopIndex >= 0)
    // 2. –ö–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    // 3. –ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ AI —Ä–µ–∂–∏–º–µ
    // 4. –õ—É–ø –ù–ï –∏–≥—Ä–∞–µ—Ç (–ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç live reload)
    if (currentLoopIndex < 0 || currentAIMode !== 'normal' || isPlaying) {
        updateBtn.style.display = 'none';
        return;
    }

    const currentCode = editor.value.trim();
    const originalCode = originalLoopCode.trim();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (currentCode && currentCode !== originalCode) {
        updateBtn.style.display = 'inline-block';
    } else {
        updateBtn.style.display = 'none';
    }
}

function saveOriginalCode() {
    const editor = document.getElementById('codeEditor');
    originalLoopCode = editor.value;
}

// === Live Reload Mode ===

let liveReloadTimeout = null;

function setupLiveReload() {
    const editor = document.getElementById('codeEditor');

    editor.addEventListener('input', () => {
        // Live reload —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –õ—É–ø –∏–≥—Ä–∞–µ—Ç
        // 2. –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É–ø
        // 3. –ù–µ –≤ AI —Ä–µ–∂–∏–º–µ
        if (!isPlaying || currentLoopIndex < 0 || currentAIMode !== 'normal') {
            return;
        }

        // Debounce 500ms - –∂–¥—ë–º –ø–∞—É–∑—É –≤ –Ω–∞–±–æ—Ä–µ
        clearTimeout(liveReloadTimeout);
        liveReloadTimeout = setTimeout(() => {
            liveReloadCode();
        }, 500);
    });
}

async function liveReloadCode() {
    const code = document.getElementById('codeEditor').value.trim();

    if (!code) return;

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–ø –≤ –º–∞—Å—Å–∏–≤–µ
        loops[currentLoopIndex].code = code;

        // –ü–∞—Ç—á–∏–º AI –æ—à–∏–±–∫–∏ (–∫–∞–∫ –≤ playCode)
        let patchedCode = code.replace(/\.fade\(/g, '.xfade(');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–ø–ª—É
        await repl.evaluate(patchedCode);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥ (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        updateLoopsGrid();

        console.log('üîÑ Live reload applied');
    } catch (error) {
        console.warn('‚ö†Ô∏è Live reload error:', error.message);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö live reload - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
}

// === Edit Loop with AI ===

async function editLoop() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const userPrompt = codeEditor.value.trim();

    if (!userPrompt) {
        statusDiv.textContent = '–û–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å';
        statusDiv.className = 'editor-status active error';
        return;
    }

    if (userPrompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'editor-status active error';
        return;
    }

    const currentLoop = savedCode; // savedCode —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞
    const musicContext = analyzeMusicalContext(currentLoop);
    const contextualPrompt = buildContextualPrompt(userPrompt, musicContext);

    console.log('üéµ Musical context for edit:', musicContext);
    console.log('üìù Enhanced edit prompt:', contextualPrompt);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
    let contextHint = '';
    if (musicContext) {
        if (musicContext.bpm) contextHint += ` BPM:${musicContext.bpm}`;
        if (musicContext.complexity) contextHint += ` [${musicContext.complexity}]`;
    }

    try {
        generateBtn.disabled = true;
        statusDiv.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É–ø–∞...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        const response = await fetch('https://wo-server-v1.onrender.com/api/edit-strudel-loop', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: contextualPrompt,
                currentLoop
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        codeEditor.value = data.code;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–ø
        loops[currentLoopIndex].code = data.code;
        loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;
        updateLoopsGrid();

        statusDiv.textContent = '‚úÖ –õ—É–ø –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}

async function generateScript() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const prompt = codeEditor.value.trim();

    if (!prompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å';
        statusDiv.className = 'editor-status active error';
        return;
    }

    if (prompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'editor-status active error';
        return;
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...';
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ prompt })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –°–∫—Ä–∏–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}


// Transition Generation functions
const TRANSITION_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-transition';

async function generateTransition() {
    const fromSelect = document.getElementById('transitionFromLoop');
    const toSelect = document.getElementById('transitionToLoop');
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const fromIndex = parseInt(fromSelect.value);
    const toIndex = parseInt(toSelect.value);

    if (fromIndex === toIndex) {
        statusDiv.textContent = '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–Ω—ã–µ –ª—É–ø—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞!';
        statusDiv.className = 'editor-status active error';
        return;
    }

    const fromLoop = loops[fromIndex];
    const toLoop = loops[toIndex];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–æ–∏—Ö –ª—É–ø–æ–≤
    const fromContext = analyzeMusicalContext(fromLoop.code);
    const toContext = analyzeMusicalContext(toLoop.code);

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    let transitionInfo = [];

    if (fromContext && toContext) {
        if (fromContext.bpm && toContext.bpm) {
            transitionInfo.push(`BPM: ${fromContext.bpm} ‚Üí ${toContext.bpm}`);
        }
        if (fromContext.tempo !== toContext.tempo) {
            transitionInfo.push(`Tempo: ${fromContext.tempo} ‚Üí ${toContext.tempo}`);
        }
        if (fromContext.samples.length > 0 && toContext.samples.length > 0) {
            transitionInfo.push(`Samples: ${fromContext.samples.slice(0, 3).join(', ')} ‚Üí ${toContext.samples.slice(0, 3).join(', ')}`);
        }
        transitionInfo.push(`Style: ${fromContext.complexity} ‚Üí ${toContext.complexity}`);
    }

    const transitionContext = transitionInfo.length > 0 ? transitionInfo.join(' | ') : '';

    console.log('üéµ Transition analysis:', { fromContext, toContext, transitionContext });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ
    let contextHint = '';
    if (fromContext && toContext) {
        if (fromContext.bpm && toContext.bpm) {
            contextHint = ` ${fromContext.bpm}‚Üí${toContext.bpm} BPM`;
        }
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const response = await fetch(TRANSITION_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fromLoop: fromLoop.code,
                toLoop: toLoop.code,
                context: transitionContext // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;
        codeEditor.readOnly = false;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = `‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω! (${fromLoop.name || 'Loop ' + (fromIndex + 1)} ‚Üí ${toLoop.name || 'Loop ' + (toIndex + 1)})`;
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}

// === Musical Context Analysis ===

// –ê–Ω–∞–ª–∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–¥–∞
function analyzeMusicalContext(code) {
    if (!code || !code.trim()) {
        return null;
    }

    const context = {
        bpm: null,
        tempo: 'normal',
        samples: [],
        structure: null,
        complexity: 'medium',
        effects: []
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º BPM/tempo –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const speedMatch = code.match(/\.speed\s*\(\s*([\d.]+)\s*\)/);
    if (speedMatch) {
        const speed = parseFloat(speedMatch[1]);
        context.bpm = Math.round(120 * speed); // –ë–∞–∑–æ–≤—ã–π BPM = 120
        if (speed < 0.8) context.tempo = 'slow';
        else if (speed > 1.2) context.tempo = 'fast';
    }

    const fastMatch = code.match(/\.fast\s*\(\s*([\d.]+)\s*\)/);
    if (fastMatch) {
        context.tempo = 'fast';
        context.bpm = Math.round(120 * parseFloat(fastMatch[1]));
    }

    const slowMatch = code.match(/\.slow\s*\(\s*([\d.]+)\s*\)/);
    if (slowMatch) {
        context.tempo = 'slow';
        context.bpm = Math.round(120 / parseFloat(slowMatch[1]));
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—ç–º–ø–ª—ã
    const sampleMatches = code.matchAll(/s\s*\(\s*["']([^"']+)["']\s*\)/g);
    for (const match of sampleMatches) {
        const samples = match[1].split(/[\s,]+/).filter(s => s.length > 0);
        context.samples.push(...samples);
    }
    context.samples = [...new Set(context.samples)]; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤/–º–µ—Ç–æ–¥–æ–≤
    const methodCount = (code.match(/\.\w+\(/g) || []).length;
    if (methodCount < 3) context.complexity = 'simple';
    else if (methodCount > 6) context.complexity = 'complex';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (code.includes('.room(')) context.effects.push('reverb');
    if (code.includes('.delay(')) context.effects.push('delay');
    if (code.includes('.lpf(') || code.includes('.hpf(')) context.effects.push('filter');
    if (code.includes('.gain(') || code.includes('.volume(')) context.effects.push('dynamics');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (euclidean, mini-notation)
    if (code.includes('euclid')) context.structure = 'euclidean';
    else if (code.match(/["'][^"']*\*\d+[^"']*["']/)) context.structure = 'rhythmic';
    else context.structure = 'basic';

    return context;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
function buildContextualPrompt(userPrompt, musicContext) {
    if (!musicContext) {
        return userPrompt;
    }

    let contextInfo = [];

    // BPM/Tempo
    if (musicContext.bpm) {
        contextInfo.push(`BPM: ${musicContext.bpm}`);
    } else if (musicContext.tempo !== 'normal') {
        contextInfo.push(`Tempo: ${musicContext.tempo}`);
    }

    // Samples
    if (musicContext.samples.length > 0) {
        contextInfo.push(`Using samples: ${musicContext.samples.slice(0, 5).join(', ')}`);
    }

    // Complexity
    contextInfo.push(`Complexity: ${musicContext.complexity}`);

    // Structure
    if (musicContext.structure) {
        contextInfo.push(`Structure: ${musicContext.structure}`);
    }

    // Effects
    if (musicContext.effects.length > 0) {
        contextInfo.push(`Effects: ${musicContext.effects.join(', ')}`);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const contextString = contextInfo.join(' | ');
    return `[Context: ${contextString}]\n\nUser request: ${userPrompt}`;
}

// Continue Loop Generation functions
const CONTINUE_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-continuation';

async function generateContinuation() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');
    const userPrompt = codeEditor.value.trim();

    if (!userPrompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –ª—É–ø';
        statusDiv.className = 'editor-status active error';
        return;
    }

    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ª—É–ø –∫–∞–∫ –±–∞–∑—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–∏–∑ savedCode)
    const previousLoop = savedCode;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const musicContext = analyzeMusicalContext(previousLoop);
    const contextualPrompt = buildContextualPrompt(userPrompt, musicContext);

    console.log('üéµ Musical context:', musicContext);
    console.log('üìù Enhanced prompt:', contextualPrompt);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let contextHint = '';
    if (musicContext) {
        if (musicContext.bpm) contextHint += ` BPM:${musicContext.bpm}`;
        if (musicContext.samples.length > 0) contextHint += ` [${musicContext.samples.slice(0, 2).join(', ')}]`;
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        const response = await fetch(CONTINUE_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: contextualPrompt,
                previousLoop: previousLoop
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}


// === Interactive Code Sliders ===

let codeSliders = []; // –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ { value, start, end, line, context }
let slidersEnabled = true; // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä—ã
let slidersPanelExpanded = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ (—Å–≤–µ—Ä–Ω—É—Ç–∞/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞)
let isUpdatingSlider = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
let sliderUpdateTimeout = null; // –¢–∞–π–º–∞—É—Ç –¥–ª—è debounce —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

// –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª –∏–∑ –∫–æ–¥–∞
function parseNumbersFromCode(code) {
    const lines = code.split('\n');
    const numbers = [];

    lines.forEach((line, lineIndex) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (line.trim().startsWith('//')) return;

        // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —á–∏—Å–µ–ª (—Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–π: .func(0.5) –∏–ª–∏ func(2)
        const numberRegex = /([a-z_]\w*)\s*\(\s*(-?\d+\.?\d*)\s*\)/gi;
        let match;

        while ((match = numberRegex.exec(line)) !== null) {
            const funcName = match[1];
            const numValue = parseFloat(match[2]);
            const numStart = match.index + match[1].length + 1; // –ü–æ—Å–ª–µ "func("
            const numEnd = numStart + match[2].length;
            const originalMatch = match[0]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –º–∞—Ç—á –¥–ª—è —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            let min = 0;
            let max = 1;
            let step = 0.01;

            // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (funcName === 'gain' || funcName === 'volume' || funcName === 'amp') {
                min = 0;
                max = 2;
                step = 0.05;
            } else if (funcName === 'speed' || funcName === 'fast' || funcName === 'slow') {
                min = 0.1;
                max = 4;
                step = 0.1;
            } else if (funcName === 'note' || funcName === 'n') {
                min = 0;
                max = 127;
                step = 1;
            } else if (funcName === 'pan') {
                min = -1;
                max = 1;
                step = 0.1;
            } else if (funcName === 'cutoff' || funcName === 'lpf' || funcName === 'hpf') {
                min = 100;
                max = 10000;
                step = 100;
            } else if (funcName === 'delay' || funcName === 'room' || funcName === 'size') {
                min = 0;
                max = 1;
                step = 0.05;
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (numValue > 10) {
                    min = 0;
                    max = numValue * 2;
                    step = 1;
                } else if (numValue > 1) {
                    min = 0;
                    max = 10;
                    step = 0.5;
                } else {
                    min = 0;
                    max = 2;
                    step = 0.05;
                }
            }

            numbers.push({
                value: numValue,
                start: numStart,
                end: numEnd,
                line: lineIndex,
                lineText: line,
                context: funcName,
                originalMatch: originalMatch,
                matchIndex: match.index, // –ü–æ–∑–∏—Ü–∏—è –≤—Å–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
                uniqueId: `${lineIndex}_${match.index}_${funcName}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                min,
                max,
                step
            });
        }
    });

    return numbers;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
function toggleSlidersPanel() {
    slidersPanelExpanded = !slidersPanelExpanded;
    const overlay = document.getElementById('codeSlidersOverlay');
    const toggleBtn = document.getElementById('slidersToggleBtn');

    if (slidersPanelExpanded) {
        overlay.classList.remove('collapsed');
        toggleBtn.textContent = '√ó';
    } else {
        overlay.classList.add('collapsed');
        toggleBtn.textContent = 'üéöÔ∏è';
    }

    console.log(`üéöÔ∏è Sliders panel ${slidersPanelExpanded ? 'expanded' : 'collapsed'}`);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ª–∞–π–¥–µ—Ä–æ–≤
function renderCodeSliders() {
    // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (isUpdatingSlider) {
        return;
    }

    const toggleBtn = document.getElementById('slidersToggleBtn');
    const panel = document.getElementById('codeSlidersPanel');

    if (!slidersEnabled || currentAIMode !== 'normal') {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–∞–Ω–µ–ª—å –≤ AI —Ä–µ–∂–∏–º–µ
        panel.style.display = 'none';
        return;
    }

    const textarea = document.getElementById('codeEditor');
    const overlay = document.getElementById('codeSlidersOverlay');
    const code = textarea.value;

    if (!code.trim()) {
        overlay.innerHTML = '';
        panel.style.display = 'none';
        return;
    }

    // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
    codeSliders = parseNumbersFromCode(code);

    // –û—á–∏—â–∞–µ–º overlay
    overlay.innerHTML = '';

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–∞–π–¥–µ—Ä–æ–≤, —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    if (codeSliders.length === 0) {
        panel.style.display = 'none';
        toggleBtn.classList.remove('has-sliders');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    panel.style.display = 'block';
    toggleBtn.classList.add('has-sliders');

    // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
    codeSliders.forEach((num, index) => {
        const slider = document.createElement('div');
        slider.className = 'code-slider';
        slider.dataset.index = index;

        // Header —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        const header = document.createElement('div');
        header.className = 'slider-header';

        const label = document.createElement('span');
        label.className = 'slider-label';
        label.textContent = num.context;

        const valueDisplay = document.createElement('span');
        valueDisplay.className = 'slider-value';
        valueDisplay.textContent = num.value.toFixed(num.step >= 1 ? 0 : 2);

        header.appendChild(label);
        header.appendChild(valueDisplay);

        // Range input
        const input = document.createElement('input');
        input.type = 'range';
        input.min = num.min;
        input.max = num.max;
        input.step = num.step;
        input.value = num.value;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å debounce –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞
        let sliderDebounce = null;
        input.addEventListener('input', (e) => {
            const newValue = parseFloat(e.target.value);

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            valueDisplay.textContent = newValue.toFixed(num.step >= 1 ? 0 : 2);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Å debounce
            clearTimeout(sliderDebounce);
            sliderDebounce = setTimeout(() => {
                updateCodeWithSlider(index, newValue);
            }, 50); // –ö–æ—Ä–æ—Ç–∫–∏–π debounce –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        });

        slider.appendChild(header);
        slider.appendChild(input);
        overlay.appendChild(slider);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞
function updateCodeWithSlider(sliderIndex, newValue) {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (isUpdatingSlider) {
        return;
    }

    isUpdatingSlider = true;

    try {
        const textarea = document.getElementById('codeEditor');
        const num = codeSliders[sliderIndex];

        if (!num) {
            isUpdatingSlider = false;
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ô –∫–æ–¥ –∏–∑ textarea
        const lines = textarea.value.split('\n');
        const line = lines[num.line];

        if (!line) {
            console.warn('‚ö†Ô∏è Line not found');
            isUpdatingSlider = false;
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const newValueStr = num.step >= 1 ? Math.round(newValue).toString() : newValue.toFixed(2);

        // –í–ê–ñ–ù–û: –ù–∞—Ö–æ–¥–∏–º –í–°–ï –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
        const funcPattern = new RegExp(`(${num.context})\\s*\\(\\s*(-?\\d+\\.?\\d*)\\s*\\)`, 'gi');
        const matches = [];
        let match;

        while ((match = funcPattern.exec(line)) !== null) {
            matches.push({
                index: match.index,
                fullMatch: match[0],
                funcName: match[1],
                value: match[2]
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É —Å–ª–∞–π–¥–µ—Ä—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        const targetMatch = matches.find(m => m.index === num.matchIndex);

        if (!targetMatch) {
            console.warn('‚ö†Ô∏è Slider update failed - specific match not found');
            isUpdatingSlider = false;
            return;
        }

        // –ó–∞–º–µ–Ω—è–µ–º –ö–û–ù–ö–†–ï–¢–ù–û–ï –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        const before = line.substring(0, targetMatch.index);
        const after = line.substring(targetMatch.index + targetMatch.fullMatch.length);
        const newFunctionCall = `${targetMatch.funcName}(${newValueStr})`;
        const newLine = before + newFunctionCall + after;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if (!newLine || newLine.trim() === '') {
            console.warn('‚ö†Ô∏è Slider update failed - invalid replacement');
            isUpdatingSlider = false;
            return;
        }

        lines[num.line] = newLine;

        // –û–±–Ω–æ–≤–ª—è–µ–º textarea
        const newCode = lines.join('\n');
        textarea.value = newCode;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª—É–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentLoopIndex >= 0 && loops[currentLoopIndex]) {
            loops[currentLoopIndex].code = newCode;
        }

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º live reload –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç
        if (isPlaying && currentLoopIndex >= 0) {
            clearTimeout(liveReloadTimeout);
            liveReloadTimeout = setTimeout(() => {
                liveReloadCode();
            }, 150); // –£–≤–µ–ª–∏—á–µ–Ω debounce –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }

        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        clearTimeout(sliderUpdateTimeout);

        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Å debounce)
        sliderUpdateTimeout = setTimeout(() => {
            renderCodeSliders();
            isUpdatingSlider = false;
        }, 200); // –£–≤–µ–ª–∏—á–µ–Ω debounce –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

    } catch (error) {
        console.error('‚ùå Slider update error:', error);
        isUpdatingSlider = false;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
function toggleCodeSliders() {
    slidersEnabled = !slidersEnabled;
    renderCodeSliders();
    console.log(`üéöÔ∏è Code sliders ${slidersEnabled ? 'enabled' : 'disabled'}`);
}

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        if (!isPlaying) {
            playCode();
        }
    }
    if ((e.ctrlKey || e.metaKey) && e.key === '.') {
        e.preventDefault();
        if (isPlaying) {
            stopCode();
        }
    }
    // Toggle sliders —Å Ctrl+Shift+S
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'S') {
        e.preventDefault();
        toggleCodeSliders();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    createVisualizer();
    updateLoopsGrid(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∏–¥ –ª—É–ø–æ–≤
    initDayvibe();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ code editor
    const codeEditor = document.getElementById('codeEditor');
    if (codeEditor) {
        codeEditor.addEventListener('input', checkEditorChanges);

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥–µ—Ä—ã –ø—Ä–∏ –≤–≤–æ–¥–µ (—Å debounce)
        let sliderRenderTimeout;
        codeEditor.addEventListener('input', () => {
            clearTimeout(sliderRenderTimeout);
            sliderRenderTimeout = setTimeout(() => {
                renderCodeSliders();
            }, 300);
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥–µ—Ä—ã –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        codeEditor.addEventListener('scroll', () => {
            renderCodeSliders();
        });
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥–µ—Ä—ã –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        renderCodeSliders();
    });

    console.log('üéµ DAYVIBE initialized');
    console.log('‚å®Ô∏è  Hotkeys:');
    console.log('   Ctrl+Enter - Play');
    console.log('   Ctrl+. - Stop');
    console.log('   Ctrl+Shift+S - Toggle Sliders Panel');
    console.log('');
    console.log('üéØ Smart AI Features:');
    console.log('   ‚úì Auto-detects BPM, tempo, samples from your loops');
    console.log('   ‚úì Preserves musical context in Continue/Edit/Transition modes');
    console.log('   ‚úì Check console for context analysis during generation');
    console.log('');
    console.log('üí° Tip: Type loadExample() to load example code with sliders');
});
