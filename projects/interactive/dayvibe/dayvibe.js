// DAYVIBE - Live Coding Music with Strudel
// State
let isPlaying = false;
let animationFrame = null;
let repl = null;
let currentPattern = null;
let panicTimeout = null;
let scheduler = null;
let audioContext = null;
let activeNodes = []; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–¥–∏–æ –Ω–æ–¥—ã

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Strudel —á–µ—Ä–µ–∑ @strudel/web
async function initDayvibe() {
    try {
        // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è initStrudel –∏–∑ @strudel/web
        if (typeof window.initStrudel === 'undefined') {
            console.warn('‚è≥ Waiting for Strudel to load...');
            setTimeout(initDayvibe, 100);
            return;
        }

        console.log('üîß Initializing Strudel with @strudel/web...');

        // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é initStrudel() –∏–∑ @strudel/web —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—ç–º–ø–ª–æ–≤
        await window.initStrudel({
            prebake: async () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ Dirt-Samples
                await samples('github:tidalcycles/Dirt-Samples');
                console.log('‚úÖ Dirt-Samples loaded');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä–∞–º-–º–∞—à–∏–Ω—ã –≤—Ä—É—á–Ω—É—é (–Ω–µ—Ç strudel.json –≤ —Ä–µ–ø–æ)
                const drumMachinesBaseUrl = 'https://raw.githubusercontent.com/ritchse/tidal-drum-machines/main/machines/';

                // Roland TR-909
                await samples({
                    rolandtr909bd: ['RolandTR909/rolandtr909-bd/Bassdrum-01.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-02.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-03.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-04.wav'],
                    rolandtr909sd: ['RolandTR909/rolandtr909-sd/sd01.wav', 'RolandTR909/rolandtr909-sd/sd02.wav', 'RolandTR909/rolandtr909-sd/sd03.wav'],
                    rolandtr909hh: ['RolandTR909/rolandtr909-hh/hh01.wav', 'RolandTR909/rolandtr909-hh/hh02.wav', 'RolandTR909/rolandtr909-hh/hh03.wav'],
                    rolandtr909oh: ['RolandTR909/rolandtr909-oh/oh01.wav', 'RolandTR909/rolandtr909-oh/oh02.wav', 'RolandTR909/rolandtr909-oh/oh03.wav'],
                    rolandtr909cp: ['RolandTR909/rolandtr909-cp/cp01.wav', 'RolandTR909/rolandtr909-cp/cp02.wav', 'RolandTR909/rolandtr909-cp/cp03.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-909 loaded');

                // Roland TR-808
                await samples({
                    rolandtr808bd: ['RolandTR808/rolandtr808-bd/BD0000.WAV', 'RolandTR808/rolandtr808-bd/BD2500.WAV', 'RolandTR808/rolandtr808-bd/BD5000.WAV'],
                    rolandtr808sd: ['RolandTR808/rolandtr808-sd/SD0000.WAV', 'RolandTR808/rolandtr808-sd/SD0010.WAV', 'RolandTR808/rolandtr808-sd/SD0025.WAV'],
                    rolandtr808hh: ['RolandTR808/rolandtr808-hh/CH.WAV', 'RolandTR808/rolandtr808-hh/CHH.WAV'],
                    rolandtr808oh: ['RolandTR808/rolandtr808-oh/OH00.WAV', 'RolandTR808/rolandtr808-oh/OH10.WAV', 'RolandTR808/rolandtr808-oh/OH25.WAV'],
                    rolandtr808cp: ['RolandTR808/rolandtr808-cp/cp0.wav', 'RolandTR808/rolandtr808-cp/cp1.wav', 'RolandTR808/rolandtr808-cp/cp2.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-808 loaded');
            },
        });

        console.log('‚úÖ Strudel initialized with samples!');
        console.log('üîç Functions available:');
        console.log('- sound:', typeof sound);
        console.log('- note:', typeof note);
        console.log('- evaluate:', typeof evaluate);
        console.log('- hush:', typeof hush);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ scheduler –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (typeof getScheduler === 'function') {
            scheduler = getScheduler();
            console.log('‚úÖ Scheduler ref saved:', scheduler);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (scheduler.audioContext) {
                audioContext = scheduler.audioContext;
                console.log('‚úÖ AudioContext ref saved:', audioContext.state);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è REPL
        repl = {
            evaluate: async (code) => {
                try {
                    console.log('üéµ Evaluating code with @strudel/web...');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é evaluate() –∏–∑ @strudel/web
                    const result = await evaluate(code);
                    console.log('‚úÖ Code evaluated, result:', result);

                    return result;
                } catch (err) {
                    console.error('‚ùå Eval error:', err);
                    throw err;
                }
            },
            stop: () => {
                try {
                    console.log('‚èπÔ∏è REPL stop called...');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduler.stop() –≤–º–µ—Å—Ç–æ hush()
                    if (scheduler && typeof scheduler.stop === 'function') {
                        scheduler.stop();
                        console.log('‚úÖ Scheduler stopped!');
                    } else if (typeof hush === 'function') {
                        hush();
                        console.log('‚úÖ Hush called!');
                    }
                } catch (err) {
                    console.error('‚ùå Stop error:', err);
                }
            }
        };

        updateStatus('Ready', false);
        console.log('‚úÖ DAYVIBE ready to rock! üéµ');
    } catch (error) {
        console.error('‚ùå Failed to initialize Strudel:', error);
        updateStatus('Error', false);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Strudel. –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function createVisualizer() {
    const visualizer = document.getElementById('visualizer');
    for (let i = 0; i < 32; i++) {
        const bar = document.createElement('div');
        bar.className = 'visualizer-bar';
        visualizer.appendChild(bar);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function animateVisualizer() {
    if (!isPlaying) return;

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        const height = Math.random() * 90 + 10;
        bar.style.height = height + '%';
    });

    animationFrame = requestAnimationFrame(animateVisualizer);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function stopVisualizer() {
    if (animationFrame) {
        cancelAnimationFrame(animationFrame);
        animationFrame = null;
    }

    const bars = document.querySelectorAll('.visualizer-bar');
    bars.forEach(bar => {
        bar.style.height = '10%';
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(text, playing) {
    const statusText = document.getElementById('statusText');
    const statusIndicator = document.getElementById('statusIndicator');
    const playBtn = document.getElementById('playBtn');
    const stopBtn = document.getElementById('stopBtn');

    statusText.textContent = text;
    isPlaying = playing;

    if (playing) {
        statusIndicator.classList.add('active');
        statusIndicator.classList.remove('stopped');
        playBtn.disabled = true;
        stopBtn.disabled = false;
    } else {
        statusIndicator.classList.remove('active');
        statusIndicator.classList.add('stopped');
        playBtn.disabled = false;
        stopBtn.disabled = true;
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞
async function playCode() {
    const code = document.getElementById('codeEditor').value.trim();

    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–º–µ—Ä!');
        return;
    }

    if (!repl) {
        alert('Strudel –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É.');
        return;
    }

    try {
        console.log('‚ñ∂ Playing code:', code);

        // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        console.log('üîß Stopping any previous playback...');

        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern && typeof currentPattern.stop === 'function') {
            currentPattern.stop();
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scheduler
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }

        // –í—ã–∑—ã–≤–∞–µ–º hush –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã Strudel —É—Å–ø–µ–ª –æ—á–∏—Å—Ç–∏—Ç—å—Å—è
        await new Promise(resolve => setTimeout(resolve, 50));

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω (resume –µ—Å–ª–∏ –±—ã–ª suspended)
        if (audioContext && audioContext.state === 'suspended') {
            console.log('üîß Resuming audio context...');
            await audioContext.resume();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º scheduler —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º evaluate
        if (scheduler && typeof scheduler.start === 'function') {
            console.log('üîß Starting scheduler...');
            scheduler.start();
        }

        updateStatus('Playing...', true);

        // Evaluate –∫–æ–¥ —á–µ—Ä–µ–∑ REPL
        currentPattern = await repl.evaluate(code);

        // –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        animateVisualizer();

        console.log('‚úÖ Code executed successfully');
    } catch (error) {
        console.error('‚ùå Playback error:', error);
        updateStatus('Error', false);
        isPlaying = false;
        stopVisualizer();
        alert('–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\n' + error.message);
    }
}

// –£—Ç–∏–ª–∏—Ç–∞: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API Strudel
async function killAllAudioSources() {
    try {
        // Evaluate –ø—É—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ [cyclist] stop
        if (typeof evaluate === 'function') {
            try {
                await evaluate('silence');
            } catch (e) {
                // Silent fail
            }
        }

        // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ cyclist —á–µ—Ä–µ–∑ window
        if (typeof window.cyclist !== 'undefined' && window.cyclist) {
            try {
                if (typeof window.cyclist.stop === 'function') {
                    window.cyclist.stop();
                }
            } catch (e) {
                // Silent fail
            }
        }

        // scheduler stop
        if (scheduler && typeof scheduler.stop === 'function') {
            scheduler.stop();
        }
    } catch (err) {
        console.error('‚ùå Stop failed:', err);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
async function stopCode() {
    try {
        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (panicTimeout) {
            clearTimeout(panicTimeout);
            panicTimeout = null;
        }

        // –û—á–∏—â–∞–µ–º UI –∏ —Ñ–ª–∞–≥
        isPlaying = false;
        stopVisualizer();

        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω
        if (currentPattern) {
            try {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
            } catch (e) {
                // Silent fail
            }
            currentPattern = null;
        }

        // –í—ã–∑—ã–≤–∞–µ–º Strudel API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await killAllAudioSources();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: hush() –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        if (typeof hush === 'function') {
            hush();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç—É—Å
        updateStatus('Stopped', false);
    } catch (error) {
        console.error('‚ùå Stop error:', error);

        // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        try {
            if (currentPattern) {
                if (typeof currentPattern.stop === 'function') {
                    currentPattern.stop();
                }
                currentPattern = null;
            }

            if (typeof hush === 'function') {
                hush();
            }
        } catch (e) {
            console.error('‚ùå Emergency stop failed:', e);
        }

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        isPlaying = false;
        updateStatus('Stopped', false);
        stopVisualizer();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
function loadExample() {
    const exampleCode = `// DAYVIBE Example - Roland TR-909 Beat
s("rolandtr909bd rolandtr909sd rolandtr909hh rolandtr909sd")
  .gain(0.8)

// Try also:
// s("rolandtr808bd*2, rolandtr808sd(3,8)")
// s("bd cp sd cp").speed("1 2 0.5 1.5")`;

    document.getElementById('codeEditor').value = exampleCode;
}

// Debug —Ñ—É–Ω–∫—Ü–∏—è
function debugStrudel() {
    console.log('=== STRUDEL DEBUG ===');
    console.log('typeof strudel:', typeof strudel);
    console.log('strudel keys:', strudel ? Object.keys(strudel) : 'undefined');
    console.log('typeof sound:', typeof sound);
    console.log('typeof window.sound:', typeof window.sound);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º REPL —Ñ—É–Ω–∫—Ü–∏–∏
    const replFuncs = ['repl', 'controls', 'silence', 'hush', 'panic', 'getScheduler', 'cyclist'];
    console.log('\nREPL functions:');
    replFuncs.forEach(func => {
        console.log(`- ${func}:`, typeof window[func]);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º scheduler
    if (typeof getScheduler === 'function') {
        const scheduler = getScheduler();
        console.log('\nScheduler:', scheduler);
        console.log('Scheduler methods:', Object.keys(scheduler));
        console.log('Scheduler state:', {
            started: scheduler.started,
            pattern: scheduler.pattern,
            audioContext: scheduler.audioContext?.state
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º controls –µ—Å–ª–∏ –µ—Å—Ç—å
    if (typeof controls === 'object') {
        console.log('\nControls:', controls);
        console.log('Controls methods:', Object.keys(controls));
    }

    console.log('\nCurrent pattern:', currentPattern);
    if (currentPattern) {
        console.log('Pattern type:', currentPattern.constructor?.name);
        console.log('Pattern methods:', Object.keys(currentPattern));
        console.log('Pattern proto:', Object.getPrototypeOf(currentPattern));
    }

    console.log('\nAll window keys with "play", "start", or "stop":',
        Object.keys(window).filter(k => {
            const lower = k.toLowerCase();
            return lower.includes('play') || lower.includes('start') || lower.includes('stop');
        }).slice(0, 30));
    console.log('===================');
    alert('Check console for debug info');
}

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        if (!isPlaying) {
            playCode();
        }
    }
    if ((e.ctrlKey || e.metaKey) && e.key === '.') {
        e.preventDefault();
        if (isPlaying) {
            stopCode();
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    createVisualizer();
    initDayvibe();

    console.log('üéµ DAYVIBE initialized');
    console.log('‚å®Ô∏è  Hotkeys: Ctrl+Enter (Play) | Ctrl+. (Stop)');
});
