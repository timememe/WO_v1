// DAYVIBE LOOPS - Loop Management, Navigation, Live Reload
// ==========================================================

import {
    loops, currentLoopIndex, MAX_LOOPS, isPlaying, isTransitioning, repl, scheduler,
    originalLoopCode, currentAIMode, liveReloadTimeout,
    setCurrentLoopIndex, setIsTransitioning, removeLoop, swapLoops,
    setOriginalLoopCode, setLiveReloadTimeout
} from './core.js';
import { LoopTile } from '../design/components.js';

// ============== LOOP CRUD ==============

export function updateLoopsGrid() {
    const grid = document.getElementById('loopsGrid');
    grid.innerHTML = '';

    for (let i = 0; i < MAX_LOOPS; i++) {
        const tile = LoopTile({
            index: i,
            loop: loops[i] || null,
            isActive: i === currentLoopIndex,
            isPlaying: i === currentLoopIndex && isPlaying,
            onSelect: (index) => switchToLoop(index),
            onDelete: (index) => deleteLoop(index),
            onMoveUp: (index) => moveLoopUp(index),
            onMoveDown: (index) => moveLoopDown(index),
            canMoveUp: i > 0 && loops[i],
            canMoveDown: i < loops.length - 1 && loops[i],
        });

        grid.appendChild(tile);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI –∫–Ω–æ–ø–æ–∫
    updateAIButtonsState();
}

export function updateAIButtonsState() {
    const transitionBtn = document.getElementById('transitionBtn');
    const continueBtn = document.getElementById('continueBtn');

    // Transition –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞
    transitionBtn.disabled = loops.length < 2;

    // Continue –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –ª—É–ø
    continueBtn.disabled = loops.length < 1;
}

export function deleteLoop(index) {
    if (index < 0 || index >= loops.length) {
        return;
    }

    const loopName = loops[index].name || `Loop ${index + 1}`;

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å "${loopName}"?`)) {
        return;
    }

    // –£–¥–∞–ª—è–µ–º –ª—É–ø –∏–∑ –º–∞—Å—Å–∏–≤–∞
    removeLoop(index);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª—É–ø
        if (loops.length === 0) {
            setCurrentLoopIndex(-1);
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ ui.js)
            if (window.stopCode) window.stopCode();
        } else if (currentLoopIndex >= loops.length) {
            setCurrentLoopIndex(loops.length - 1);
        }
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –ª—É–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentLoopIndex >= 0 && isPlaying) {
            switchToLoop(currentLoopIndex);
        }
    } else if (currentLoopIndex > index) {
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ª—É–ø –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º, —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        setCurrentLoopIndex(currentLoopIndex - 1);
    }

    updateLoopsGrid();
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª—É–ø ${index}: ${loopName}`);
}

export function moveLoopUp(index) {
    if (index <= 0 || index >= loops.length) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    swapLoops(index - 1, index);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        setCurrentLoopIndex(index - 1);
    } else if (currentLoopIndex === index - 1) {
        setCurrentLoopIndex(index);
    }

    updateLoopsGrid();
    console.log(`‚¨ÜÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö`);
}

export function moveLoopDown(index) {
    if (index < 0 || index >= loops.length - 1) {
        return;
    }

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
    swapLoops(index, index + 1);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentLoopIndex
    if (currentLoopIndex === index) {
        setCurrentLoopIndex(index + 1);
    } else if (currentLoopIndex === index + 1) {
        setCurrentLoopIndex(index);
    }

    updateLoopsGrid();
    console.log(`‚¨áÔ∏è –õ—É–ø ${index} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑`);
}

export function addLoop() {
    if (loops.length >= MAX_LOOPS) {
        alert('–ú–∞–∫—Å–∏–º—É–º 8 –ª—É–ø–æ–≤!');
        return;
    }

    const code = document.getElementById('codeEditor').value.trim();
    if (!code) {
        alert('–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –ª—É–ø–∞!');
        return;
    }

    loops.push({
        code: code,
        name: `Loop ${loops.length + 1}`
    });

    updateLoopsGrid();
}

// ============== NAVIGATION ==============

export async function nextLoop() {
    if (loops.length < 2) return;
    const nextIndex = (currentLoopIndex + 1) % loops.length;
    await switchToLoop(nextIndex);
}

export async function prevLoop() {
    if (loops.length < 2) return;
    let prevIndex = currentLoopIndex - 1;
    if (prevIndex < 0) {
        prevIndex = loops.length - 1;
    }
    await switchToLoop(prevIndex);
}

export async function switchToLoop(index) {
    // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ª—É–ø, –∏–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –ª—É–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!loops[index] || isTransitioning || index === currentLoopIndex) {
        return;
    }

    const performSwitch = async () => {
        console.log(`üöÄ Switching to loop ${index + 1}`);
        setCurrentLoopIndex(index);
        const loop = loops[index];
        document.getElementById('codeEditor').value = loop.code;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        saveOriginalCode();
        checkEditorChanges();

        updateLoopsGrid();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
        if (window.updateSlidersButtonVisibility) {
            window.updateSlidersButtonVisibility();
        }

        if (isPlaying) {
            // –í—ã–∑—ã–≤–∞–µ–º playCode –∏–∑ ui.js
            if (window.playCode) {
                await window.playCode();
            }
        }
    };

    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç –∏ scheduler –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    if (isPlaying && scheduler && typeof scheduler.nextCycle === 'function') {
        setIsTransitioning(true);
        console.log(`‚è≥ Scheduling transition to loop ${index + 1} for next cycle...`);

        await scheduler.nextCycle();

        await performSwitch();
        setIsTransitioning(false);
    } else {
        // –ò–Ω–∞—á–µ (–µ—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        await performSwitch();
    }
}

// ============== UPDATE & TRACKING ==============

export function updateCurrentLoop() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    const editor = document.getElementById('codeEditor');
    const code = editor.value.trim();

    if (!code) {
        alert('–†–µ–¥–∞–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞
    loops[currentLoopIndex].code = code;
    loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥
    updateLoopsGrid();

    // –ï—Å–ª–∏ –ª—É–ø –∏–≥—Ä–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (isPlaying && currentLoopIndex >= 0) {
        switchToLoop(currentLoopIndex);
    }

    console.log(`‚úÖ Loop ${currentLoopIndex + 1} updated`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    saveOriginalCode();
    checkEditorChanges();
}

export function checkEditorChanges() {
    const editor = document.getElementById('codeEditor');
    const updateBtn = document.getElementById('updateBtn');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É–ø (currentLoopIndex >= 0)
    // 2. –ö–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    // 3. –ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ AI —Ä–µ–∂–∏–º–µ
    // 4. –õ—É–ø –ù–ï –∏–≥—Ä–∞–µ—Ç (–ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç live reload)
    if (currentLoopIndex < 0 || currentAIMode !== 'normal' || isPlaying) {
        updateBtn.style.display = 'none';
        return;
    }

    const currentCode = editor.value.trim();
    const originalCode = originalLoopCode.trim();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (currentCode && currentCode !== originalCode) {
        updateBtn.style.display = 'inline-block';
    } else {
        updateBtn.style.display = 'none';
    }
}

export function saveOriginalCode() {
    const editor = document.getElementById('codeEditor');
    setOriginalLoopCode(editor.value);
}

// ============== LIVE RELOAD ==============

export function setupLiveReload() {
    const editor = document.getElementById('codeEditor');

    editor.addEventListener('input', () => {
        // Live reload —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –õ—É–ø –∏–≥—Ä–∞–µ—Ç
        // 2. –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É–ø
        // 3. –ù–µ –≤ AI —Ä–µ–∂–∏–º–µ
        if (!isPlaying || currentLoopIndex < 0 || currentAIMode !== 'normal') {
            return;
        }

        // Debounce 500ms - –∂–¥—ë–º –ø–∞—É–∑—É –≤ –Ω–∞–±–æ—Ä–µ
        clearTimeout(liveReloadTimeout);
        const timeout = setTimeout(() => {
            liveReloadCode();
        }, 500);
        setLiveReloadTimeout(timeout);
    });
}

export async function liveReloadCode() {
    const code = document.getElementById('codeEditor').value.trim();

    if (!code) return;

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–ø –≤ –º–∞—Å—Å–∏–≤–µ
        loops[currentLoopIndex].code = code;

        // –ü–∞—Ç—á–∏–º AI –æ—à–∏–±–∫–∏ (–∫–∞–∫ –≤ playCode)
        let patchedCode = code.replace(/\.fade\(/g, '.xfade(');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–ø–ª—É
        await repl.evaluate(patchedCode);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∏–¥ (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        updateLoopsGrid();

        console.log('üîÑ Live reload applied');
    } catch (error) {
        console.warn('‚ö†Ô∏è Live reload error:', error.message);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö live reload - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
}
