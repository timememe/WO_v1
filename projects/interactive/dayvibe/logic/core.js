// DAYVIBE CORE - State Management + Strudel Initialization
// ============================================================

// ============== STATE ==============
// Playback state
export let isPlaying = false;
export let animationFrame = null;
export let repl = null;
export let currentPattern = null;
export let panicTimeout = null;
export let scheduler = null;
export let audioContext = null;
export let activeNodes = [];
export let isTransitioning = false;

// Loop management
export let loops = [];
export let currentLoopIndex = -1;
export const MAX_LOOPS = 8;

// AI mode state
export let currentAIMode = 'normal';
export let savedCode = '';
export let originalLoopCode = '';

// Sliders state
export let codeSliders = [];
export let slidersEnabled = true;
export let isUpdatingSlider = false;
export let sliderUpdateTimeout = null;
export let liveReloadTimeout = null;

// Setters for external updates
export function setIsPlaying(value) { isPlaying = value; }
export function setAnimationFrame(value) { animationFrame = value; }
export function setRepl(value) { repl = value; }
export function setCurrentPattern(value) { currentPattern = value; }
export function setPanicTimeout(value) { panicTimeout = value; }
export function setScheduler(value) { scheduler = value; }
export function setAudioContext(value) { audioContext = value; }
export function setActiveNodes(value) { activeNodes = value; }
export function setIsTransitioning(value) { isTransitioning = value; }
export function setCurrentLoopIndex(value) { currentLoopIndex = value; }
export function setCurrentAIMode(value) { currentAIMode = value; }
export function setSavedCode(value) { savedCode = value; }
export function setOriginalLoopCode(value) { originalLoopCode = value; }
export function setCodeSliders(value) { codeSliders = value; }
export function setSlidersEnabled(value) { slidersEnabled = value; }
export function setIsUpdatingSlider(value) { isUpdatingSlider = value; }
export function setSliderUpdateTimeout(value) { sliderUpdateTimeout = value; }
export function setLiveReloadTimeout(value) { liveReloadTimeout = value; }

// Array mutations
export function addLoop(loop) { loops.push(loop); }
export function removeLoop(index) { loops.splice(index, 1); }
export function updateLoop(index, loop) { loops[index] = loop; }
export function swapLoops(i, j) { [loops[i], loops[j]] = [loops[j], loops[i]]; }
export function clearLoops() { loops = []; }

// ============== STRUDEL INITIALIZATION ==============

export async function initDayvibe() {
    try {
        // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è initStrudel –∏–∑ @strudel/web
        if (typeof window.initStrudel === 'undefined') {
            console.warn('‚è≥ Waiting for Strudel to load...');
            setTimeout(initDayvibe, 100);
            return;
        }

        console.log('üîß Initializing Strudel with @strudel/web...');

        // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é initStrudel() –∏–∑ @strudel/web —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—ç–º–ø–ª–æ–≤
        await window.initStrudel({
            prebake: async () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ Dirt-Samples
                await samples('github:tidalcycles/Dirt-Samples');
                console.log('‚úÖ Dirt-Samples loaded');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä–∞–º-–º–∞—à–∏–Ω—ã –≤—Ä—É—á–Ω—É—é (–Ω–µ—Ç strudel.json –≤ —Ä–µ–ø–æ)
                const drumMachinesBaseUrl = 'https://raw.githubusercontent.com/ritchse/tidal-drum-machines/main/machines/';

                // Roland TR-909
                await samples({
                    rolandtr909bd: ['RolandTR909/rolandtr909-bd/Bassdrum-01.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-02.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-03.wav', 'RolandTR909/rolandtr909-bd/Bassdrum-04.wav'],
                    rolandtr909sd: ['RolandTR909/rolandtr909-sd/sd01.wav', 'RolandTR909/rolandtr909-sd/sd02.wav', 'RolandTR909/rolandtr909-sd/sd03.wav'],
                    rolandtr909hh: ['RolandTR909/rolandtr909-hh/hh01.wav', 'RolandTR909/rolandtr909-hh/hh02.wav', 'RolandTR909/rolandtr909-hh/hh03.wav'],
                    rolandtr909oh: ['RolandTR909/rolandtr909-oh/oh01.wav', 'RolandTR909/rolandtr909-oh/oh02.wav', 'RolandTR909/rolandtr909-oh/oh03.wav'],
                    rolandtr909cp: ['RolandTR909/rolandtr909-cp/cp01.wav', 'RolandTR909/rolandtr909-cp/cp02.wav', 'RolandTR909/rolandtr909-cp/cp03.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-909 loaded');

                // Roland TR-808
                await samples({
                    rolandtr808bd: ['RolandTR808/rolandtr808-bd/BD0000.WAV', 'RolandTR808/rolandtr808-bd/BD2500.WAV', 'RolandTR808/rolandtr808-bd/BD5000.WAV'],
                    rolandtr808sd: ['RolandTR808/rolandtr808-sd/SD0000.WAV', 'RolandTR808/rolandtr808-sd/SD0010.WAV', 'RolandTR808/rolandtr808-sd/SD0025.WAV'],
                    rolandtr808hh: ['RolandTR808/rolandtr808-hh/CH.WAV', 'RolandTR808/rolandtr808-hh/CHH.WAV'],
                    rolandtr808oh: ['RolandTR808/rolandtr808-oh/OH00.WAV', 'RolandTR808/rolandtr808-oh/OH10.WAV', 'RolandTR808/rolandtr808-oh/OH25.WAV'],
                    rolandtr808cp: ['RolandTR808/rolandtr808-cp/cp0.wav', 'RolandTR808/rolandtr808-cp/cp1.wav', 'RolandTR808/rolandtr808-cp/cp2.wav'],
                }, drumMachinesBaseUrl);
                console.log('‚úÖ Roland TR-808 loaded');
            },
        });

        console.log('‚úÖ Strudel initialized with samples!');
        console.log('üîç Functions available:');
        console.log('- sound:', typeof sound);
        console.log('- note:', typeof note);
        console.log('- evaluate:', typeof evaluate);
        console.log('- hush:', typeof hush);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ scheduler –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (typeof getScheduler === 'function') {
            scheduler = getScheduler();
            console.log('‚úÖ Scheduler ref saved:', scheduler);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (scheduler.audioContext) {
                audioContext = scheduler.audioContext;
                console.log('‚úÖ AudioContext ref saved:', audioContext.state);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è REPL
        repl = {
            evaluate: async (code) => {
                try {
                    console.log('üéµ Evaluating code with @strudel/web...');

                    // –ü–ê–¢–ß: AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å .fade(). –ó–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π xfade().
                    let patchedCode = code;
                    if (patchedCode.includes('.fade(')) {
                        console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω .fade(). –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ç—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
                        // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "stack(...).fade(...)" –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π "xfade(...)"
                        patchedCode = patchedCode.replace(/stack\s*\(([\s\S]*)\)\s*\.fade\s*\([^)]*\)/g, 'xfade($1)');
                        console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:', patchedCode);
                    }

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é evaluate() –∏–∑ @strudel/web —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
                    const result = await evaluate(patchedCode);
                    console.log('‚úÖ Code evaluated, result:', result);

                    return result;
                } catch (err) {
                    console.error('‚ùå Eval error:', err);
                    throw err;
                }
            },
            stop: () => {
                try {
                    console.log('‚èπÔ∏è REPL stop called...');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduler.stop() –≤–º–µ—Å—Ç–æ hush()
                    if (scheduler && typeof scheduler.stop === 'function') {
                        scheduler.stop();
                        console.log('‚úÖ Scheduler stopped!');
                    } else if (typeof hush === 'function') {
                        hush();
                        console.log('‚úÖ Hush called!');
                    }
                } catch (err) {
                    console.error('‚ùå Stop error:', err);
                }
            }
        };

        console.log('‚úÖ DAYVIBE core initialized! üéµ');
        return true;

    } catch (error) {
        console.error('‚ùå Failed to initialize Strudel:', error);
        throw error;
    }
}
