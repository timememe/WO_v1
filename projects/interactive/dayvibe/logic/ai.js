// DAYVIBE AI - Context Analysis, API Integration, Mode Management
// ================================================================

import {
    loops, currentLoopIndex, currentAIMode, savedCode,
    setCurrentAIMode, setSavedCode
} from './core.js';
import { updateLoopsGrid, switchToLoop, saveOriginalCode, checkEditorChanges } from './loops.js';

// ============== API ENDPOINTS ==============

const API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-script';
const EDIT_API_URL = 'https://wo-server-v1.onrender.com/api/edit-strudel-loop';
const CONTINUE_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-continuation';
const TRANSITION_API_URL = 'https://wo-server-v1.onrender.com/api/generate-strudel-transition';

// ============== MODE MANAGEMENT ==============

export function setEditorMode(mode, title, placeholder) {
    const container = document.getElementById('editorContainer');
    const editorTitle = document.getElementById('editorTitle');
    const codeEditor = document.getElementById('codeEditor');
    const slidersGridView = document.getElementById('slidersGridView');
    const editorStatus = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const editBtn = document.getElementById('editBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');
    const updateBtn = document.getElementById('updateBtn');
    const slidersBtn = document.getElementById('slidersBtn');

    setCurrentAIMode(mode);
    container.setAttribute('data-mode', mode);
    editorTitle.textContent = title;
    if (placeholder) codeEditor.placeholder = placeholder;

    if (mode === 'normal') {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        codeEditor.style.display = 'block';
        slidersGridView.style.display = 'none';
        generateBtn.style.display = 'none';
        cancelBtn.style.display = 'none';
        editBtn.style.display = 'inline-block';
        addToLoopsBtn.style.display = 'none';
        editorStatus.classList.remove('active');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π onclick handler –¥–ª—è updateBtn
        updateBtn.onclick = () => window.updateCurrentLoop();
        // Update Loop –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è checkEditorChanges()
        checkEditorChanges();
        // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
        if (window.updateSlidersButtonVisibility) {
            window.updateSlidersButtonVisibility();
        }
    } else if (mode === 'sliders') {
        // –†–µ–∂–∏–º —Å–ª–∞–π–¥–µ—Ä–æ–≤
        codeEditor.style.display = 'none';
        slidersGridView.style.display = 'block';
        generateBtn.style.display = 'none';
        cancelBtn.style.display = 'inline-block';
        editBtn.style.display = 'none';
        addToLoopsBtn.style.display = 'none';
        updateBtn.style.display = 'none';
        slidersBtn.style.display = 'none';
        editorStatus.classList.remove('active');
    } else {
        // AI —Ä–µ–∂–∏–º
        codeEditor.style.display = 'block';
        slidersGridView.style.display = 'none';
        generateBtn.style.display = 'inline-block';
        cancelBtn.style.display = 'inline-block';
        editBtn.style.display = 'none';
        addToLoopsBtn.style.display = 'none';
        updateBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –≤ AI —Ä–µ–∂–∏–º–µ
        slidersBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –≤ AI —Ä–µ–∂–∏–º–µ
    }
}

export function openGenerateMode() {
    setSavedCode(document.getElementById('codeEditor').value);
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'generate',
        '‚ú® AI Generate Loop',
        '–û–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ë—ã—Å—Ç—Ä—ã–π techno –ø–∞—Ç—Ç–µ—Ä–Ω —Å 909 kick\n- –ú–µ–¥–ª–µ–Ω–Ω—ã–π ambient —Å pad –∑–≤—É–∫–∞–º–∏\n- Jungle breaks —Å –±–∞—Å–æ–º'
    );
}

export function openEditMode() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }

    setSavedCode(document.getElementById('codeEditor').value);
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'edit',
        '‚úèÔ∏è AI Edit Loop',
        '–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—É–ø–µ...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –°–¥–µ–ª–∞–π –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n- –î–æ–±–∞–≤—å reverb\n- –ó–∞–º–µ–Ω–∏ kick –Ω–∞ –¥—Ä—É–≥–æ–π\n- –£–ø—Ä–æ—Å—Ç–∏ —Ä–∏—Ç–º'
    );
}

export function openContinueMode() {
    if (currentLoopIndex < 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ª—É–ø –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
        return;
    }

    setSavedCode(document.getElementById('codeEditor').value);
    document.getElementById('codeEditor').value = '';
    setEditorMode(
        'continue',
        '‚û°Ô∏è AI Continue Loop',
        '–û–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å —ç—Ç–æ—Ç –ª—É–ø...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –î–æ–±–∞–≤—å hi-hats –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–π\n- –£—Å–ª–æ–∂–Ω–∏ —Ä–∏—Ç–º\n- –°–¥–µ–ª–∞–π –±–æ–ª–µ–µ –º–µ–ª–æ–¥–∏—á–Ω—ã–º'
    );
}

export function openTransitionMode() {
    if (loops.length < 2) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ª—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
        return;
    }

    setSavedCode(document.getElementById('codeEditor').value);

    // –î–ª—è transition –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    let loopOptions = '';
    loops.forEach((loop, i) => {
        const loopName = loop.name || `Loop ${i + 1}`;
        loopOptions += `<option value="${i}">${loopName}</option>`;
    });

    const promptText = `From Loop: [–≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ]\nTo Loop: [–≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ]\n\n–°–æ–∑–¥–∞—Å—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª—É–ø–∞–º–∏`;

    document.getElementById('codeEditor').value = promptText;
    document.getElementById('codeEditor').readOnly = true;

    setEditorMode(
        'transition',
        'üîÑ AI Make Transition',
        'Transition mode'
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ editorStatus
    const editorStatus = document.getElementById('editorStatus');
    editorStatus.innerHTML = `
        <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
            <select id="transitionFromLoop" style="padding: 8px; background: #0d1117; color: #c9d1d9; border: 2px solid #444; border-radius: 4px;">
                ${loopOptions}
            </select>
            <span style="color: #888;">‚Üí</span>
            <select id="transitionToLoop" style="padding: 8px; background: #0d1117; color: #c9d1d9; border: 2px solid #444; border-radius: 4px;">
                ${loopOptions}
            </select>
        </div>
    `;
    editorStatus.classList.add('active');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setTimeout(() => {
        const fromSelect = document.getElementById('transitionFromLoop');
        const toSelect = document.getElementById('transitionToLoop');
        if (currentLoopIndex >= 0) {
            fromSelect.value = currentLoopIndex;
            toSelect.value = currentLoopIndex < loops.length - 1 ? currentLoopIndex + 1 : 0;
        }
    }, 0);
}

export function cancelAIMode() {
    const codeEditor = document.getElementById('codeEditor');

    // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–ª–∞–π–¥–µ—Ä–æ–≤ - –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º savedCode
    // —Ç.–∫. –∫–æ–¥ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä—ã
    if (currentAIMode !== 'sliders') {
        codeEditor.value = savedCode;
    }

    codeEditor.readOnly = false;
    setEditorMode('normal', 'Code Editor', '// –ù–∞–ø–∏—à–∏ —Å–≤–æ–π Strudel-–ø–∞—Ç—Ç–µ—Ä–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–º–µ—Ä...\n// –ù–∞–∂–º–∏ Play —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å!');
    setSavedCode('');
}

export async function executeAIGeneration() {
    const mode = currentAIMode;

    switch (mode) {
        case 'generate':
            await generateScript();
            break;
        case 'edit':
            await editLoop();
            break;
        case 'continue':
            await generateContinuation();
            break;
        case 'transition':
            await generateTransition();
            break;
    }
}

export function addGeneratedLoop() {
    const codeEditor = document.getElementById('codeEditor');
    const code = codeEditor.value.trim();

    if (!code) {
        alert('–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ loops
    loops.push({
        code: code,
        name: `AI Loop ${loops.length + 1}`
    });

    const newLoopIndex = loops.length - 1;

    updateLoopsGrid();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–¥
    setSavedCode(code);
    cancelAIMode();

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ª—É–ø
    switchToLoop(newLoopIndex);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    saveOriginalCode();
    checkEditorChanges();

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω AI –ª—É–ø ${loops.length}, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–µ–≥–æ`);
}

export function applyEditedLoop() {
    if (currentLoopIndex < 0) {
        alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—É–ø–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    const codeEditor = document.getElementById('codeEditor');
    const code = codeEditor.value.trim();

    if (!code) {
        alert('–†–µ–¥–∞–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª—É–ø —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º
    loops[currentLoopIndex].code = code;
    loops[currentLoopIndex].name = `Loop ${currentLoopIndex + 1} (edited)`;

    updateLoopsGrid();

    // –û–±–Ω–æ–≤–ª—è–µ–º savedCode —á—Ç–æ–±—ã cancelAIMode –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    setSavedCode(code);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    cancelAIMode();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    saveOriginalCode();
    checkEditorChanges();

    console.log(`‚úÖ –õ—É–ø ${currentLoopIndex + 1} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Edit mode`);
}

// ============== MUSICAL CONTEXT ANALYSIS ==============

export function analyzeMusicalContext(code) {
    if (!code || !code.trim()) {
        return null;
    }

    const context = {
        bpm: null,
        tempo: 'normal',
        samples: [],
        structure: null,
        complexity: 'medium',
        effects: []
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º BPM/tempo –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const speedMatch = code.match(/\.speed\s*\(\s*([\d.]+)\s*\)/);
    if (speedMatch) {
        const speed = parseFloat(speedMatch[1]);
        context.bpm = Math.round(120 * speed); // –ë–∞–∑–æ–≤—ã–π BPM = 120
        if (speed < 0.8) context.tempo = 'slow';
        else if (speed > 1.2) context.tempo = 'fast';
    }

    const fastMatch = code.match(/\.fast\s*\(\s*([\d.]+)\s*\)/);
    if (fastMatch) {
        context.tempo = 'fast';
        context.bpm = Math.round(120 * parseFloat(fastMatch[1]));
    }

    const slowMatch = code.match(/\.slow\s*\(\s*([\d.]+)\s*\)/);
    if (slowMatch) {
        context.tempo = 'slow';
        context.bpm = Math.round(120 / parseFloat(slowMatch[1]));
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—ç–º–ø–ª—ã
    const sampleMatches = code.matchAll(/s\s*\(\s*["']([^"']+)["']\s*\)/g);
    for (const match of sampleMatches) {
        const samples = match[1].split(/[\s,]+/).filter(s => s.length > 0);
        context.samples.push(...samples);
    }
    context.samples = [...new Set(context.samples)]; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤/–º–µ—Ç–æ–¥–æ–≤
    const methodCount = (code.match(/\.\w+\(/g) || []).length;
    if (methodCount < 3) context.complexity = 'simple';
    else if (methodCount > 6) context.complexity = 'complex';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (code.includes('.room(')) context.effects.push('reverb');
    if (code.includes('.delay(')) context.effects.push('delay');
    if (code.includes('.lpf(') || code.includes('.hpf(')) context.effects.push('filter');
    if (code.includes('.gain(') || code.includes('.volume(')) context.effects.push('dynamics');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (euclidean, mini-notation)
    if (code.includes('euclid')) context.structure = 'euclidean';
    else if (code.match(/["'][^"']*\*\d+[^"']*["']/)) context.structure = 'rhythmic';
    else context.structure = 'basic';

    return context;
}

export function buildContextualPrompt(userPrompt, musicContext) {
    if (!musicContext) {
        return userPrompt;
    }

    let contextInfo = [];

    // BPM/Tempo
    if (musicContext.bpm) {
        contextInfo.push(`BPM: ${musicContext.bpm}`);
    } else if (musicContext.tempo !== 'normal') {
        contextInfo.push(`Tempo: ${musicContext.tempo}`);
    }

    // Samples
    if (musicContext.samples.length > 0) {
        contextInfo.push(`Using samples: ${musicContext.samples.slice(0, 5).join(', ')}`);
    }

    // Complexity
    contextInfo.push(`Complexity: ${musicContext.complexity}`);

    // Structure
    if (musicContext.structure) {
        contextInfo.push(`Structure: ${musicContext.structure}`);
    }

    // Effects
    if (musicContext.effects.length > 0) {
        contextInfo.push(`Effects: ${musicContext.effects.join(', ')}`);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const contextString = contextInfo.join(' | ');
    return `[Context: ${contextString}]\n\nUser request: ${userPrompt}`;
}

// ============== AI GENERATION FUNCTIONS ==============

async function generateScript() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const prompt = codeEditor.value.trim();

    if (!prompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å';
        statusDiv.className = 'editor-status active error';
        return;
    }

    if (prompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'editor-status active error';
        return;
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...';
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ prompt })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –°–∫—Ä–∏–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}

async function editLoop() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const userPrompt = codeEditor.value.trim();

    if (!userPrompt) {
        statusDiv.textContent = '–û–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å';
        statusDiv.className = 'editor-status active error';
        return;
    }

    if (userPrompt.length > 300) {
        statusDiv.textContent = '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)';
        statusDiv.className = 'editor-status active error';
        return;
    }

    const currentLoop = savedCode; // savedCode —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ª—É–ø–∞
    const musicContext = analyzeMusicalContext(currentLoop);
    const contextualPrompt = buildContextualPrompt(userPrompt, musicContext);

    console.log('üéµ Musical context for edit:', musicContext);
    console.log('üìù Enhanced edit prompt:', contextualPrompt);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
    let contextHint = '';
    if (musicContext) {
        if (musicContext.bpm) contextHint += ` BPM:${musicContext.bpm}`;
        if (musicContext.complexity) contextHint += ` [${musicContext.complexity}]`;
    }

    try {
        generateBtn.disabled = true;
        statusDiv.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É–ø–∞...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        const response = await fetch(EDIT_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: contextualPrompt,
                currentLoop
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        codeEditor.value = data.code;

        statusDiv.textContent = '‚úÖ –õ—É–ø –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Update Loop –¥–ª—è Edit mode —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        const updateBtn = document.getElementById('updateBtn');
        updateBtn.onclick = () => window.applyEditedLoop();
        updateBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}

async function generateContinuation() {
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');
    const userPrompt = codeEditor.value.trim();

    if (!userPrompt) {
        statusDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –ª—É–ø';
        statusDiv.className = 'editor-status active error';
        return;
    }

    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ª—É–ø –∫–∞–∫ –±–∞–∑—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–∏–∑ savedCode)
    const previousLoop = savedCode;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const musicContext = analyzeMusicalContext(previousLoop);
    const contextualPrompt = buildContextualPrompt(userPrompt, musicContext);

    console.log('üéµ Musical context:', musicContext);
    console.log('üìù Enhanced prompt:', contextualPrompt);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let contextHint = '';
    if (musicContext) {
        if (musicContext.bpm) contextHint += ` BPM:${musicContext.bpm}`;
        if (musicContext.samples.length > 0) contextHint += ` [${musicContext.samples.slice(0, 2).join(', ')}]`;
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        const response = await fetch(CONTINUE_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: contextualPrompt,
                previousLoop: previousLoop
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!';
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}

async function generateTransition() {
    const fromSelect = document.getElementById('transitionFromLoop');
    const toSelect = document.getElementById('transitionToLoop');
    const codeEditor = document.getElementById('codeEditor');
    const statusDiv = document.getElementById('editorStatus');
    const generateBtn = document.getElementById('generateBtn');
    const addToLoopsBtn = document.getElementById('addToLoopsBtn');

    const fromIndex = parseInt(fromSelect.value);
    const toIndex = parseInt(toSelect.value);

    if (fromIndex === toIndex) {
        statusDiv.textContent = '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–Ω—ã–µ –ª—É–ø—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞!';
        statusDiv.className = 'editor-status active error';
        return;
    }

    const fromLoop = loops[fromIndex];
    const toLoop = loops[toIndex];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–æ–∏—Ö –ª—É–ø–æ–≤
    const fromContext = analyzeMusicalContext(fromLoop.code);
    const toContext = analyzeMusicalContext(toLoop.code);

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    let transitionInfo = [];

    if (fromContext && toContext) {
        if (fromContext.bpm && toContext.bpm) {
            transitionInfo.push(`BPM: ${fromContext.bpm} ‚Üí ${toContext.bpm}`);
        }
        if (fromContext.tempo !== toContext.tempo) {
            transitionInfo.push(`Tempo: ${fromContext.tempo} ‚Üí ${toContext.tempo}`);
        }
        if (fromContext.samples.length > 0 && toContext.samples.length > 0) {
            transitionInfo.push(`Samples: ${fromContext.samples.slice(0, 3).join(', ')} ‚Üí ${toContext.samples.slice(0, 3).join(', ')}`);
        }
        transitionInfo.push(`Style: ${fromContext.complexity} ‚Üí ${toContext.complexity}`);
    }

    const transitionContext = transitionInfo.length > 0 ? transitionInfo.join(' | ') : '';

    console.log('üéµ Transition analysis:', { fromContext, toContext, transitionContext });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ
    let contextHint = '';
    if (fromContext && toContext) {
        if (fromContext.bpm && toContext.bpm) {
            contextHint = ` ${fromContext.bpm}‚Üí${toContext.bpm} BPM`;
        }
    }

    try {
        // UI: –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generateBtn.disabled = true;
        statusDiv.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞...${contextHint}`;
        statusDiv.className = 'editor-status active loading';

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const response = await fetch(TRANSITION_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fromLoop: fromLoop.code,
                toLoop: toLoop.code,
                context: transitionContext // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
            })
        });

        const responseText = await response.text();

        if (!response.ok) {
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
            } catch (e) {
                errorMessage = responseText || errorMessage;
            }
            throw new Error(errorMessage);
        }

        if (!responseText || responseText.trim() === '') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }

        const data = JSON.parse(responseText);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        codeEditor.value = data.code;
        codeEditor.readOnly = false;

        // UI: —É—Å–ø–µ—Ö
        statusDiv.textContent = `‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω! (${fromLoop.name || 'Loop ' + (fromIndex + 1)} ‚Üí ${toLoop.name || 'Loop ' + (toIndex + 1)})`;
        statusDiv.className = 'editor-status active success';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Add to Loops
        addToLoopsBtn.style.display = 'inline-block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', error);
        statusDiv.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        statusDiv.className = 'editor-status active error';
    } finally {
        generateBtn.disabled = false;
    }
}
