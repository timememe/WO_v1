// ============================================
// DUELOGUE v2 - MAIN ENTRY POINT
// ============================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π

let gameEngine;
let uiManager;
let visualManager;
let narrativeGenerator;
let isProcessingTurn = false;

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================

window.addEventListener('DOMContentLoaded', () => {
    console.log('üéÆ –ó–∞–ø—É—Å–∫ DUELOGUE v2...');

    // –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    gameEngine = new GameEngine();
    uiManager = new UIManager();
    visualManager = new VisualManager();
    narrativeGenerator = new NarrativeGenerator();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    initGame();
});

function initGame() {
    console.log('üé≤ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
    gameEngine.initGame(playerCards, enemyCards);

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    uiManager.updateScales(0, false);
    uiManager.updateZone('contested');
    uiManager.updateMomentum({ type: null, chain: 0, bonus: 0 });
    // uiManager.updateResources(gameEngine.player, gameEngine.enemy); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
    // uiManager.updateRound(1); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤
    uiManager.clearDialog();

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    renderPlayerCards();

    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: IDLE
    visualManager.showIdle();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    uiManager.addMessage('–î–æ–∫–∞–∂–∏ —Å–≤–æ—é –ø—Ä–∞–≤–æ—Ç—É —Å–∫–µ–ø—Ç–∏–∫—É!', false, 0);

    console.log('‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞');
}

// ============================================
// –û–¢–†–ò–°–û–í–ö–ê –ö–ê–†–¢
// ============================================

function renderPlayerCards() {
    const availableCards = gameEngine.getAvailablePlayerCards();
    const lastEnemyTurn = gameEngine.getLastTurn(false);
    const lastEnemyCard = lastEnemyTurn ? lastEnemyTurn.card : null;

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
    uiManager.renderCards(
        gameEngine.playerDeck,
        gameEngine.usedPlayerCards,
        lastEnemyCard,
        gameEngine.player
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    const cardElements = document.querySelectorAll('.card');
    cardElements.forEach((cardEl, index) => {
        const card = gameEngine.playerDeck[index];
        const isUsed = gameEngine.isCardUsed(card, true);

        if (!isUsed) {
            cardEl.style.cursor = 'pointer';
            cardEl.addEventListener('click', () => handlePlayerCardClick(card));
        }
    });
}

// ============================================
// –ò–ì–†–û–í–û–ô –•–û–î
// ============================================

async function handlePlayerCardClick(card) {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏
    if (isProcessingTurn || gameEngine.gameState !== 'playing') {
        return;
    }

    isProcessingTurn = true;

    try {
        // 1. –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        await processPlayerTurn(card);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        if (gameEngine.gameState !== 'playing') {
            endGame();
            return;
        }

        // 3. –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        await processEnemyTurn();

        // 4. –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (gameEngine.gameState !== 'playing') {
            endGame();
            return;
        }

    } finally {
        isProcessingTurn = false;
    }
}

async function processPlayerTurn(card) {
    console.log(`\nüë§ === –•–û–î –ò–ì–†–û–ö–ê ===`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—á–µ–≤–æ–≥–æ –ø—É–∑—ã—Ä—è
    const bubbleText = narrativeGenerator.generateSpeechBubble(card);
    await visualManager.showPlayerTurn(bubbleText);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ –≤ –¥–≤–∏–∂–∫–µ
    const turnData = gameEngine.playCard(card, true);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∑–∏—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    const dialogText = narrativeGenerator.generateDialogue(turnData);
    uiManager.addMessage(dialogText, true, turnData.turn);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await uiManager.delay(300);
    uiManager.updateScales(turnData.finalScales, true);
    uiManager.updateZone(turnData.zone);
    uiManager.updateMomentum(gameEngine.momentum);
    // uiManager.updateResources(gameEngine.player, gameEngine.enemy); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
    // uiManager.updateRound(gameEngine.currentRound); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é)
    renderPlayerCards();

    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    await uiManager.delay(800);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ IDLE –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    await visualManager.showIdle();
}

async function processEnemyTurn() {
    console.log(`\nü§ñ === –•–û–î –ü–†–û–¢–ò–í–ù–ò–ö–ê ===`);

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –æ—Ç –ò–ò
    const enemyCard = gameEngine.getEnemyMove();

    if (!enemyCard) {
        console.warn('‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥');
        return;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–∏–º–∏—Ç–∞—Ü–∏—è "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è")
    await uiManager.delay(500);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—á–µ–≤–æ–≥–æ –ø—É–∑—ã—Ä—è
    const bubbleText = narrativeGenerator.generateSpeechBubble(enemyCard);
    await visualManager.showEnemyTurn(bubbleText);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ –≤ –¥–≤–∏–∂–∫–µ
    const turnData = gameEngine.playCard(enemyCard, false);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∑–∏—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    const dialogText = narrativeGenerator.generateDialogue(turnData);
    uiManager.addMessage(dialogText, false, turnData.turn);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await uiManager.delay(300);
    uiManager.updateScales(turnData.finalScales, true);
    uiManager.updateZone(turnData.zone);
    uiManager.updateMomentum(gameEngine.momentum);
    // uiManager.updateResources(gameEngine.player, gameEngine.enemy); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
    // uiManager.updateRound(gameEngine.currentRound); // –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ vulnerability –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
    renderPlayerCards();

    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º –∏–≥—Ä–æ–∫–∞
    await uiManager.delay(800);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ IDLE –¥–ª—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    await visualManager.showIdle();
}

// ============================================
// –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ì–†–´
// ============================================

function endGame() {
    const gameState = gameEngine.gameState;
    const reason = gameEngine.winReason || gameEngine.loseReason || 'unknown';

    console.log(`\nüèÅ === –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ===`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${gameState.toUpperCase()}`);
    console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å—ã: ${gameEngine.scalesValue}`);
    console.log(`   –†–∞—É–Ω–¥: ${gameEngine.currentRound}`);
    console.log(`   –•–æ–¥–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: ${gameEngine.currentTurn}`);
    console.log(`   –†–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫–∞: ${gameEngine.player.logic}üß† ${gameEngine.player.emotion}‚ù§Ô∏è`);
    console.log(`   –†–µ—Å—É—Ä—Å—ã —Å–∫–µ–ø—Ç–∏–∫–∞: ${gameEngine.enemy.logic}üß† ${gameEngine.enemy.emotion}‚ù§Ô∏è`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
        uiManager.showGameOver(gameState, reason);
    }, 1500);
}

// ============================================
// –£–¢–ò–õ–ò–¢–´
// ============================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', event.error);
});

console.log('‚úÖ –ú–æ–¥—É–ª—å main_v2.js –∑–∞–≥—Ä—É–∂–µ–Ω');
