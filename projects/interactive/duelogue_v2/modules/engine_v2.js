// ============================================
// DUELOGUE v2 - GAME ENGINE (SCALES SYSTEM)
// ============================================
// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã, –≤–µ—Å–∞–º–∏ —É–±–µ–∂–¥—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏ momentum/vulnerability

console.log('üîß ENGINE v3.0 - –ß–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Å–æ–≤ (–±–µ–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ä–∞—É–Ω–¥–æ–≤)');

class GameEngine {
    constructor() {
        // ========== –°–û–°–¢–û–Ø–ù–ò–ï –í–ï–°–û–í ==========
        this.scalesValue = 0;           // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ (-10 –¥–æ +10)
        this.SCALES_MIN = -10;          // –°–∫–µ–ø—Ç–∏–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
        this.SCALES_MAX = 10;           // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç

        // ========== –ó–û–ù–´ –í–ï–°–û–í ==========
        this.ZONE_CONTESTED = { min: -3, max: 3 };      // –†–∞–≤–Ω—ã–π –±–æ–π
        this.ZONE_WINNING = { min: 4, max: 7 };         // –ò–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç
        this.ZONE_LOSING = { min: -7, max: -4 };        // –°–∫–µ–ø—Ç–∏–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç
        this.ZONE_CRITICAL_WIN = { min: 8, max: 10 };   // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∞
        this.ZONE_CRITICAL_LOSE = { min: -10, max: -8 }; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Å–∫–µ–ø—Ç–∏–∫–∞

        // ========== MOMENTUM –°–ò–°–¢–ï–ú–ê ==========
        this.momentum = {
            type: null,         // CardType.LOGIC –∏–ª–∏ CardType.EMOTION
            chain: 0,           // –î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–ø–∏
            bonus: 0            // –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å –∫ shift
        };
        this.MOMENTUM_BONUS_PER_CHAIN = 1; // +1 shift –∑–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –≤ —Ü–µ–ø–∏

        // ========== –ò–°–¢–û–†–ò–Ø –•–û–î–û–í ==========
        this.turnHistory = [];          // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–æ–¥–∞—Ö
        this.currentTurn = 0;
        this.MAX_TURNS = 20;            // –õ–∏–º–∏—Ç —Ö–æ–¥–æ–≤ (–≤–º–µ—Å—Ç–æ —Ä–∞—É–Ω–¥–æ–≤)

        // ========== –ö–û–õ–û–î–´ ==========
        this.playerDeck = [];
        this.enemyDeck = [];
        this.usedPlayerCards = [];      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        this.usedEnemyCards = [];       // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

        // ========== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ==========
        this.gameState = 'playing';     // playing, won, lost
        this.isPlayerTurn = true;
    }

    // ============================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ============================================

    initGame(playerCards, enemyCards) {
        this.playerDeck = [...playerCards];
        this.enemyDeck = [...enemyCards];
        this.usedPlayerCards = [];
        this.usedEnemyCards = [];
        this.scalesValue = 0;
        this.currentTurn = 0;
        this.turnHistory = [];
        this.momentum = { type: null, chain: 0, bonus: 0 };
        this.gameState = 'playing';
        this.isPlayerTurn = true;

        console.log('üéÆ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        console.log(`   üìä –í–µ—Å—ã: ${this.scalesValue}`);
        console.log(`   üÉè –ö–æ–ª–æ–¥–∞ –∏–≥—Ä–æ–∫–∞: ${this.playerDeck.length} –∫–∞—Ä—Ç`);
        console.log(`   üÉè –ö–æ–ª–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${this.enemyDeck.length} –∫–∞—Ä—Ç`);
    }

    // ============================================
    // –ò–ì–†–û–í–û–ô –•–û–î
    // ============================================

    playCard(card, isPlayer = true) {
        if (this.gameState !== 'playing') {
            console.warn('‚ö†Ô∏è –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            return null;
        }

        this.currentTurn++;

        const turnData = {
            turn: this.currentTurn,
            isPlayer: isPlayer,
            card: card,
            initialScales: this.scalesValue,
            baseShift: card.shift,
            momentumBonus: 0,
            vulnerabilityTriggered: false,
            counterShift: 0,
            totalShift: 0,
            finalScales: 0,
            zone: null
        };

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º momentum (—Ü–µ–ø—å –∫–∞—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞)
        const momentumBonus = this.calculateMomentum(card);
        turnData.momentumBonus = momentumBonus;

        // 2. –ë–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ + momentum
        let totalShift = card.shift + momentumBonus;

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º vulnerability (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —É—è–∑–≤–∏–º–∞ –∫ —Ç–µ–∫—É—â–µ–π?)
        const counterShift = this.checkVulnerability(card, isPlayer);
        if (counterShift !== 0) {
            turnData.vulnerabilityTriggered = true;
            turnData.counterShift = counterShift;
            totalShift += counterShift;
        }

        // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–≤–∏–≥ –∫ –≤–µ—Å–∞–º
        this.scalesValue += totalShift;
        this.scalesValue = Math.max(this.SCALES_MIN, Math.min(this.SCALES_MAX, this.scalesValue));

        // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É
        const zone = this.getCurrentZone();
        turnData.totalShift = totalShift;
        turnData.finalScales = this.scalesValue;
        turnData.zone = zone;

        // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.turnHistory.push(turnData);

        // 7. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        if (isPlayer) {
            this.usedPlayerCards.push(card);
        } else {
            this.usedEnemyCards.push(card);
        }

        // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
        this.checkWinCondition();

        console.log(`üé≤ –•–æ–¥ ${this.currentTurn} (${isPlayer ? '–ò–≥—Ä–æ–∫' : '–°–∫–µ–ø—Ç–∏–∫'})`);
        console.log(`   üÉè –ö–∞—Ä—Ç–∞: ${card.title} (${card.type})`);
        console.log(`   üìä –°–¥–≤–∏–≥: ${card.shift} + ${momentumBonus} (momentum) ${counterShift !== 0 ? `+ ${counterShift} (vulnerability)` : ''} = ${totalShift}`);
        console.log(`   ‚öñÔ∏è  –í–µ—Å—ã: ${turnData.initialScales} ‚Üí ${this.scalesValue}`);
        console.log(`   üéØ –ó–æ–Ω–∞: ${zone}`);

        return turnData;
    }

    // ============================================
    // MOMENTUM –°–ò–°–¢–ï–ú–ê
    // ============================================

    calculateMomentum(card) {
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç momentum
        if (card.type === CardType.NEUTRAL) {
            this.momentum = { type: null, chain: 0, bonus: 0 };
            return 0;
        }

        // –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º momentum - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–µ–ø—å
        if (this.momentum.type === card.type) {
            this.momentum.chain++;
        } else {
            // –ù–æ–≤–∞—è —Ü–µ–ø—å
            this.momentum.type = card.type;
            this.momentum.chain = 1;
        }

        // –ë–æ–Ω—É—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã –≤ —Ü–µ–ø–∏
        const bonus = Math.max(0, (this.momentum.chain - 1) * this.MOMENTUM_BONUS_PER_CHAIN);
        this.momentum.bonus = bonus;

        return bonus;
    }

    // ============================================
    // VULNERABILITY –°–ò–°–¢–ï–ú–ê
    // ============================================

    checkVulnerability(currentCard, isCurrentPlayer) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const lastEnemyTurn = this.getLastTurn(!isCurrentPlayer);

        if (!lastEnemyTurn) {
            return 0; // –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–æ–¥–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        }

        const previousCard = lastEnemyTurn.card;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —É—è–∑–≤–∏–º–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ä—Ç–∞ –∫ —Ç–µ–∫—É—â–µ–π?
        // previousCard.vulnerability –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å currentCard.type
        if (previousCard.vulnerability === currentCard.type) {
            // Counter-shift: +2 –∫ —Å–¥–≤–∏–≥—É –≤ –ø–æ–ª—å–∑—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            const counterShift = isCurrentPlayer ? 2 : -2;
            console.log(`   üí° VULNERABILITY! ${previousCard.title} —É—è–∑–≤–∏–º–∞ –∫ ${currentCard.type}`);
            return counterShift;
        }

        return 0;
    }

    // ============================================
    // –ó–û–ù–´ –ò –£–°–õ–û–í–ò–Ø –ü–û–ë–ï–î–´
    // ============================================

    getCurrentZone() {
        const v = this.scalesValue;

        if (v >= this.ZONE_CRITICAL_WIN.min && v <= this.ZONE_CRITICAL_WIN.max) {
            return 'critical-win';
        }
        if (v >= this.ZONE_WINNING.min && v <= this.ZONE_WINNING.max) {
            return 'winning';
        }
        if (v >= this.ZONE_CONTESTED.min && v <= this.ZONE_CONTESTED.max) {
            return 'contested';
        }
        if (v >= this.ZONE_LOSING.min && v <= this.ZONE_LOSING.max) {
            return 'losing';
        }
        if (v >= this.ZONE_CRITICAL_LOSE.min && v <= this.ZONE_CRITICAL_LOSE.max) {
            return 'critical-lose';
        }

        return 'contested'; // fallback
    }

    checkWinCondition() {
        // 1. –ü–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Å–∞–º
        if (this.scalesValue >= this.SCALES_MAX) {
            this.gameState = 'won';
            this.winReason = 'scales';
            console.log('üéâ –ü–û–ë–ï–î–ê! –¢—ã —É–±–µ–¥–∏–ª —Å–∫–µ–ø—Ç–∏–∫–∞!');
            return;
        }
        if (this.scalesValue <= this.SCALES_MIN) {
            this.gameState = 'lost';
            this.loseReason = 'scales';
            console.log('üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –°–∫–µ–ø—Ç–∏–∫ –ø–æ–±–µ–¥–∏–ª!');
            return;
        }

        // 2. –õ–∏–º–∏—Ç —Ö–æ–¥–æ–≤
        if (this.currentTurn >= this.MAX_TURNS) {
            if (this.scalesValue > 0) {
                this.gameState = 'won';
                this.winReason = 'turns';
                console.log('üéâ –ü–û–ë–ï–î–ê! –•–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç—ã –≤–ø–µ—Ä–µ–¥–∏!');
            } else if (this.scalesValue < 0) {
                this.gameState = 'lost';
                this.loseReason = 'turns';
                console.log('üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –•–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–∫–µ–ø—Ç–∏–∫ –≤–ø–µ—Ä–µ–¥–∏!');
            } else {
                this.gameState = 'draw';
                console.log('ü§ù –ù–ò–ß–¨–Ø! –•–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤–µ—Å—ã –≤ —Ü–µ–Ω—Ç—Ä–µ!');
            }
            return;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—â–µ–Ω–∏—è –∫–æ–ª–æ–¥
        const playerHasCards = this.usedPlayerCards.length < this.playerDeck.length;
        const enemyHasCards = this.usedEnemyCards.length < this.enemyDeck.length;

        if (!playerHasCards && !enemyHasCards) {
            // –ö–æ–ª–æ–¥—ã –∫–æ–Ω—á–∏–ª–∏—Å—å - —Ä–µ—à–∞–µ–º –ø–æ –≤–µ—Å–∞–º
            if (this.scalesValue > 0) {
                this.gameState = 'won';
                this.winReason = 'cards';
            } else if (this.scalesValue < 0) {
                this.gameState = 'lost';
                this.loseReason = 'cards';
            } else {
                this.gameState = 'draw';
            }
            console.log('‚ö†Ô∏è –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –∫–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
        }
    }

    // ============================================
    // –ò–ò –ü–†–û–¢–ò–í–ù–ò–ö–ê
    // ============================================

    getEnemyMove() {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        const availableCards = this.enemyDeck.filter(
            card => !this.usedEnemyCards.includes(card)
        );

        if (availableCards.length === 0) {
            console.warn('‚ö†Ô∏è –£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç!');
            return null;
        }

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç vulnerability
        const lastPlayerTurn = this.getLastTurn(true);
        if (lastPlayerTurn) {
            const vulnerableCard = availableCards.find(
                card => card.type === lastPlayerTurn.card.vulnerability
            );
            if (vulnerableCard) {
                console.log('üß† –ò–ò: –ò—Å–ø–æ–ª—å–∑—É—é vulnerability!');
                return vulnerableCard;
            }
        }

        // –ï—Å–ª–∏ momentum –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–µ–ø—å
        if (this.momentum.chain > 0) {
            const chainCard = availableCards.find(
                card => card.type === this.momentum.type
            );
            if (chainCard && Math.random() > 0.3) { // 70% —à–∞–Ω—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–µ–ø—å
                console.log('üß† –ò–ò: –ü—Ä–æ–¥–æ–ª–∂–∞—é momentum —Ü–µ–ø—å!');
                return chainCard;
            }
        }

        // –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞
        console.log('üß† –ò–ò: –ò–≥—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É');
        return availableCards[Math.floor(Math.random() * availableCards.length)];
    }

    // ============================================
    // –†–ï–°–£–†–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
    // ============================================

    // –†–µ—Å—É—Ä—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –≤–µ—Å–æ–≤

    // ============================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ============================================

    getLastTurn(isPlayer) {
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        for (let i = this.turnHistory.length - 1; i >= 0; i--) {
            if (this.turnHistory[i].isPlayer === isPlayer) {
                return this.turnHistory[i];
            }
        }
        return null;
    }

    getAvailablePlayerCards() {
        return this.playerDeck.filter(
            card => !this.usedPlayerCards.includes(card)
        );
    }

    isCardUsed(card, isPlayer = true) {
        const usedCards = isPlayer ? this.usedPlayerCards : this.usedEnemyCards;
        return usedCards.includes(card);
    }

    getGameState() {
        return {
            scalesValue: this.scalesValue,
            zone: this.getCurrentZone(),
            momentum: { ...this.momentum },
            currentTurn: this.currentTurn,
            currentRound: this.currentRound,
            gameState: this.gameState,
            isPlayerTurn: this.isPlayerTurn,
            player: { ...this.player },
            enemy: { ...this.enemy },
            availablePlayerCards: this.getAvailablePlayerCards().length,
            availableEnemyCards: this.enemyDeck.length - this.usedEnemyCards.length
        };
    }
}

console.log('‚úÖ –ú–æ–¥—É–ª—å engine_v2.js –∑–∞–≥—Ä—É–∂–µ–Ω');
