// ============================================
// DUELOGUE v2 - UI MANAGER (SCALES SYSTEM)
// ============================================
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–µ—Å–æ–≤, –∫–∞—Ä—Ç, –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

class UIManager {
    constructor() {
        // ========== DOM –≠–õ–ï–ú–ï–ù–¢–´ ==========
        // –í–µ—Å—ã
        this.scalesMarker = document.getElementById('scalesMarker');
        this.scalesValue = document.getElementById('scalesValue');
        this.zoneIndicator = document.getElementById('zoneIndicator');

        // Momentum
        this.momentumIndicator = document.getElementById('momentumIndicator');
        this.momentumText = document.getElementById('momentumText');

        // Resources
        this.playerLogic = document.getElementById('playerLogic');
        this.playerEmotion = document.getElementById('playerEmotion');
        this.enemyLogic = document.getElementById('enemyLogic');
        this.enemyEmotion = document.getElementById('enemyEmotion');
        this.roundNumber = document.getElementById('roundNumber');

        // –ö–∞—Ä—Ç—ã
        this.cardDeck = document.getElementById('cardDeck');

        // –î–∏–∞–ª–æ–≥
        this.dialog = document.getElementById('dialog');

        // ========== –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–ò–ú–ê–¶–ò–ò ==========
        this.scalesAnimationDuration = 500; // ms
    }

    // ============================================
    // –û–¢–†–ò–°–û–í–ö–ê –ö–ê–†–¢
    // ============================================

    renderCards(cards, usedCards, lastEnemyCard = null, playerResources = null) {
        this.cardDeck.innerHTML = '';

        cards.forEach(card => {
            const cardElement = this.createCardElement(card, usedCards, lastEnemyCard, playerResources);
            this.cardDeck.appendChild(cardElement);
        });
    }

    createCardElement(card, usedCards, lastEnemyCard, playerResources) {
        const cardDiv = document.createElement('div');
        const isUsed = usedCards.includes(card);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —ç—Ç—É –∫–∞—Ä—Ç—É
        const canAfford = !playerResources || this.canAffordCard(card, playerResources);

        // –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        cardDiv.className = `card ${card.category}`;
        if (isUsed) {
            cardDiv.classList.add('used');
        }
        if (!canAfford && !isUsed) {
            cardDiv.classList.add('unaffordable');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º vulnerability: –ø–æ–∫–∞–∂–µ—Ç –ª–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–∞ counter-shift?
        const hasVulnerability = lastEnemyCard &&
                                 lastEnemyCard.vulnerability === card.type &&
                                 !isUsed && canAfford;

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç—ã
        cardDiv.innerHTML = `
            <div class="card-category">${card.category}</div>
            <div class="card-title">${card.title}</div>
            <div class="card-desc">${card.description}</div>
            <div class="card-stats">–°–¥–≤–∏–≥: ${card.shift > 0 ? '+' : ''}${card.shift}</div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä vulnerability
        if (hasVulnerability) {
            const vulnIndicator = document.createElement('div');
            vulnIndicator.className = 'vulnerability-indicator';
            vulnIndicator.innerHTML = 'üí°';
            vulnIndicator.title = '–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!';
            cardDiv.appendChild(vulnIndicator);
        }

        return cardDiv;
    }

    // ============================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ï–°–û–í
    // ============================================

    updateScales(value, animated = true) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.scalesValue.textContent = value > 0 ? `+${value}` : value;

        // –ü–æ–∑–∏—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞: -10 = 0%, 0 = 50%, +10 = 100%
        const percentage = ((value - (-10)) / 20) * 100;

        if (animated) {
            // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ transition (–∑–∞–¥–∞–Ω–æ –≤ CSS)
            this.scalesMarker.style.left = `${percentage}%`;
        } else {
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            this.scalesMarker.style.transition = 'none';
            this.scalesMarker.style.left = `${percentage}%`;
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º transition –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π
            setTimeout(() => {
                this.scalesMarker.style.transition = '';
            }, 10);
        }
    }

    // ============================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–û–ù–´
    // ============================================

    updateZone(zone) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∑–æ–Ω
        this.zoneIndicator.className = 'zone-indicator';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã
        switch(zone) {
            case 'critical-win':
                this.zoneIndicator.classList.add('zone-critical-win');
                this.zoneIndicator.textContent = '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û';
                break;
            case 'winning':
                this.zoneIndicator.classList.add('zone-winning');
                this.zoneIndicator.textContent = '–ü–†–ï–ò–ú–£–©–ï–°–¢–í–û';
                break;
            case 'contested':
                this.zoneIndicator.classList.add('zone-contested');
                this.zoneIndicator.textContent = '–†–ê–í–ù–´–ô –ë–û–ô';
                break;
            case 'losing':
                this.zoneIndicator.classList.add('zone-losing');
                this.zoneIndicator.textContent = '–û–¢–°–¢–ê–í–ê–ù–ò–ï';
                break;
            case 'critical-lose':
                this.zoneIndicator.classList.add('zone-critical-lose');
                this.zoneIndicator.textContent = '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–¢–°–¢–ê–í–ê–ù–ò–ï';
                break;
            default:
                this.zoneIndicator.classList.add('zone-contested');
                this.zoneIndicator.textContent = '–†–ê–í–ù–´–ô –ë–û–ô';
        }
    }

    // ============================================
    // MOMENTUM –ò–ù–î–ò–ö–ê–¢–û–†
    // ============================================

    updateMomentum(momentum) {
        if (momentum.chain > 1) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            this.momentumIndicator.classList.add('active');

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            const typeText = momentum.type === CardType.LOGIC ? '–õ–æ–≥–∏–∫–∞' : '–≠–º–æ—Ü–∏–∏';
            const multiplier = momentum.chain;
            this.momentumText.textContent = `${typeText} x${multiplier} (+${momentum.bonus})`;
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            this.momentumIndicator.classList.remove('active');
        }
    }

    // ============================================
    // –†–ï–°–£–†–°–´ –ò –†–ê–£–ù–î–´
    // ============================================

    updateResources(player, enemy) {
        this.playerLogic.textContent = player.logic;
        this.playerEmotion.textContent = player.emotion;
        this.enemyLogic.textContent = enemy.logic;
        this.enemyEmotion.textContent = enemy.emotion;

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∏–∑–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        this.playerLogic.style.color = player.logic <= 2 ? '#e74c3c' : '#fff';
        this.playerEmotion.style.color = player.emotion <= 2 ? '#e74c3c' : '#fff';
        this.enemyLogic.style.color = enemy.logic <= 2 ? '#e74c3c' : '#fff';
        this.enemyEmotion.style.color = enemy.emotion <= 2 ? '#e74c3c' : '#fff';
    }

    updateRound(roundNumber) {
        this.roundNumber.textContent = roundNumber;
    }

    // ============================================
    // –î–ò–ê–õ–û–ì
    // ============================================

    addMessage(text, isPlayer, turnNumber) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isPlayer ? 'player' : 'enemy'}`;

        const turnLabel = document.createElement('div');
        turnLabel.className = 'turn';
        turnLabel.textContent = `–•–æ–¥ ${turnNumber}`;

        const textContent = document.createElement('div');
        textContent.textContent = text;

        messageDiv.appendChild(turnLabel);
        messageDiv.appendChild(textContent);
        this.dialog.appendChild(messageDiv);

        // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
        this.dialog.scrollTop = this.dialog.scrollHeight;
    }

    clearDialog() {
        this.dialog.innerHTML = '';
    }

    // ============================================
    // –≠–ö–†–ê–ù –ü–û–ë–ï–î–´/–ü–û–†–ê–ñ–ï–ù–ò–Ø
    // ============================================

    showGameOver(gameState, reason) {
        const isDraw = gameState === 'draw';
        const won = gameState === 'won';

        const overlay = document.createElement('div');
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            color: #fff;
            font-family: 'Press Start 2P', cursive;
            text-align: center;
            padding: 20px;
        `;

        const title = document.createElement('h1');
        title.style.cssText = `
            font-size: clamp(18px, 5vw, 32px);
            margin-bottom: 20px;
            color: ${isDraw ? '#f39c12' : (won ? '#3498db' : '#e74c3c')};
        `;
        title.textContent = isDraw ? '–ù–ò–ß–¨–Ø!' : (won ? '–ü–û–ë–ï–î–ê!' : '–ü–û–†–ê–ñ–ï–ù–ò–ï!');

        const subtitle = document.createElement('p');
        subtitle.style.cssText = `
            font-size: clamp(10px, 2.5vw, 14px);
            margin-bottom: 30px;
            color: #aaa;
            line-height: 1.5;
        `;

        // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if (isDraw) {
            subtitle.textContent = '–ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Ä—Ö –≤ —Å–ø–æ—Ä–µ.';
        } else if (won) {
            switch(reason) {
                case 'scales':
                    subtitle.textContent = '–¢—ã —É–±–µ–¥–∏–ª —Å–∫–µ–ø—Ç–∏–∫–∞ –≤ —Å–≤–æ–µ–π –ø—Ä–∞–≤–æ—Ç–µ!';
                    break;
                case 'resources':
                    subtitle.textContent = '–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∫–µ–ø—Ç–∏–∫–∞ –∏—Å—Å—è–∫–ª–∏!';
                    break;
                case 'resources_tie':
                    subtitle.textContent = '–û–±–∞ –∏—Å—Ç–æ—â–µ–Ω—ã, –Ω–æ —Ç—ã —É–¥–µ—Ä–∂–∞–ª –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ!';
                    break;
                case 'rounds':
                    subtitle.textContent = '–í—Ä–µ–º—è –≤—ã—à–ª–æ. –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–±–∞—Ç—ã —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º!';
                    break;
                case 'no_moves':
                    subtitle.textContent = '–î–µ–±–∞—Ç—ã –∑–∞—à–ª–∏ –≤ —Ç—É–ø–∏–∫. –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–æ–±–æ–π!';
                    break;
                default:
                    subtitle.textContent = '–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –≤ —Å–ø–æ—Ä–µ!';
            }
        } else {
            switch(reason) {
                case 'scales':
                    subtitle.textContent = '–°–∫–µ–ø—Ç–∏–∫ –æ–¥–µ—Ä–∂–∞–ª –≤–µ—Ä—Ö –≤ —Å–ø–æ—Ä–µ.';
                    break;
                case 'resources':
                    subtitle.textContent = '–¢–≤–æ–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏—Å—Å—è–∫–ª–∏!';
                    break;
                case 'resources_tie':
                    subtitle.textContent = '–û–±–∞ –∏—Å—Ç–æ—â–µ–Ω—ã, –Ω–æ —Å–∫–µ–ø—Ç–∏–∫ —É–¥–µ—Ä–∂–∞–ª –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.';
                    break;
                case 'rounds':
                    subtitle.textContent = '–í—Ä–µ–º—è –≤—ã—à–ª–æ. –°–∫–µ–ø—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–±–∞—Ç—ã —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º.';
                    break;
                case 'no_moves':
                    subtitle.textContent = '–î–µ–±–∞—Ç—ã –∑–∞—à–ª–∏ –≤ —Ç—É–ø–∏–∫. –ü–æ–±–µ–¥–∞ –∑–∞ —Å–∫–µ–ø—Ç–∏–∫–æ–º.';
                    break;
                default:
                    subtitle.textContent = '–°–∫–µ–ø—Ç–∏–∫ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É.';
            }
        }

        const restartBtn = document.createElement('button');
        restartBtn.style.cssText = `
            padding: 12px 24px;
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            border: 2px solid #2980b9;
            border-radius: 8px;
            color: #fff;
            font-family: 'Press Start 2P', cursive;
            font-size: clamp(8px, 2vw, 12px);
            cursor: pointer;
            transition: all 0.3s ease;
        `;
        restartBtn.textContent = '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
        restartBtn.onmouseover = () => {
            restartBtn.style.transform = 'translateY(-2px)';
            restartBtn.style.boxShadow = '0 6px 12px rgba(52, 152, 219, 0.4)';
        };
        restartBtn.onmouseout = () => {
            restartBtn.style.transform = '';
            restartBtn.style.boxShadow = '';
        };
        restartBtn.onclick = () => {
            location.reload();
        };

        overlay.appendChild(title);
        overlay.appendChild(subtitle);
        overlay.appendChild(restartBtn);
        document.body.appendChild(overlay);
    }

    // ============================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ============================================

    canAffordCard(card, resources) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (card.type === CardType.LOGIC) {
            return resources.logic >= 1;
        } else if (card.type === CardType.EMOTION) {
            return resources.emotion >= 1;
        }
        return true; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã
    }

    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

console.log('‚úÖ –ú–æ–¥—É–ª—å ui_v2.js –∑–∞–≥—Ä—É–∂–µ–Ω');
