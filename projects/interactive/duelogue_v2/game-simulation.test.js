// ============================================
// DUELOGUE v2 - GAME SIMULATION TESTS
// ============================================
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π (–¥–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
// –í –±—Ä–∞—É–∑–µ—Ä–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ script tags

class GameSimulator {
    constructor() {
        this.results = {
            totalGames: 0,
            playerWins: 0,
            enemyWins: 0,
            draws: 0,
            winReasons: {},
            loseReasons: {},
            totalTurns: 0,
            totalRounds: 0,
            totalScales: 0,
            totalVulnerabilities: 0,
            totalMomentumChains: 0,
            maxMomentumSeen: 0,
            totalPlayerLogic: 0,
            totalPlayerEmotion: 0,
            totalEnemyLogic: 0,
            totalEnemyEmotion: 0,
            gamesData: []
        };
    }

    // –ü—Ä–æ—Å—Ç–æ–π –ò–ò –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    chooseCard(engine, isPlayer) {
        const actor = isPlayer ? engine.player : engine.enemy;
        const deck = isPlayer ? playerCards : enemyCards;
        const usedCards = isPlayer ? engine.usedPlayerCards : engine.usedEnemyCards;

        const availableCards = deck.filter(
            card => !usedCards.includes(card) && engine.canAffordCard(card, actor)
        );

        if (availableCards.length === 0) return null;

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: vulnerability
        const lastTurn = engine.getLastTurn(!isPlayer);
        if (lastTurn) {
            const vulnCard = availableCards.find(
                card => card.type === lastTurn.card.vulnerability
            );
            if (vulnCard) return vulnCard;
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: momentum
        if (engine.momentum.chain > 0) {
            const chainCard = availableCards.find(
                card => card.type === engine.momentum.type
            );
            if (chainCard && Math.random() > 0.3) return chainCard;
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: —ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        if (actor.logic <= 2 && actor.emotion > 2) {
            const emotionCards = availableCards.filter(c => c.type === CardType.EMOTION);
            if (emotionCards.length > 0) {
                return emotionCards[Math.floor(Math.random() * emotionCards.length)];
            }
        }
        if (actor.emotion <= 2 && actor.logic > 2) {
            const logicCards = availableCards.filter(c => c.type === CardType.LOGIC);
            if (logicCards.length > 0) {
                return logicCards[Math.floor(Math.random() * logicCards.length)];
            }
        }

        // –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞
        return availableCards[Math.floor(Math.random() * availableCards.length)];
    }

    simulateSingleGame() {
        const engine = new GameEngine();
        engine.initGame(playerCards, enemyCards);

        const gameData = {
            turns: 0,
            rounds: 0,
            finalScales: 0,
            winner: null,
            reason: null,
            playerFinalLogic: 0,
            playerFinalEmotion: 0,
            enemyFinalLogic: 0,
            enemyFinalEmotion: 0,
            vulnerabilities: 0,
            momentumChains: 0,
            maxMomentum: 0
        };

        let infiniteLoopProtection = 0;
        const MAX_TURNS = 100;

        while (engine.gameState === 'playing' && infiniteLoopProtection < MAX_TURNS) {
            infiniteLoopProtection++;

            // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            const playerCard = this.chooseCard(engine, true);
            if (!playerCard) {
                console.warn('Player has no valid moves');
                break;
            }

            const playerTurn = engine.playCard(playerCard, true);
            if (!playerTurn) break;

            gameData.turns++;
            if (playerTurn.vulnerabilityTriggered) gameData.vulnerabilities++;
            if (playerTurn.momentumBonus > 0) {
                gameData.momentumChains++;
                gameData.maxMomentum = Math.max(gameData.maxMomentum, engine.momentum.chain);
            }

            if (engine.gameState !== 'playing') break;

            // –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            const enemyCard = this.chooseCard(engine, false);
            if (!enemyCard) {
                console.warn('Enemy has no valid moves');
                break;
            }

            const enemyTurn = engine.playCard(enemyCard, false);
            if (!enemyTurn) break;

            gameData.turns++;
            if (enemyTurn.vulnerabilityTriggered) gameData.vulnerabilities++;
            if (enemyTurn.momentumBonus > 0) {
                gameData.momentumChains++;
                gameData.maxMomentum = Math.max(gameData.maxMomentum, engine.momentum.chain);
            }
        }

        gameData.rounds = engine.currentRound;
        gameData.finalScales = engine.scalesValue;
        gameData.winner = engine.gameState;
        gameData.reason = engine.winReason || engine.loseReason || 'timeout';
        gameData.playerFinalLogic = engine.player.logic;
        gameData.playerFinalEmotion = engine.player.emotion;
        gameData.enemyFinalLogic = engine.enemy.logic;
        gameData.enemyFinalEmotion = engine.enemy.emotion;

        return gameData;
    }

    runSimulation(gamesCount = 100) {
        console.log(`\nüéÆ === –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò ${gamesCount} –ò–ì–† ===\n`);

        const startTime = Date.now();

        for (let i = 0; i < gamesCount; i++) {
            const gameData = this.simulateSingleGame();
            this.results.gamesData.push(gameData);
            this.results.totalGames++;

            // –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (gameData.winner === 'won') {
                this.results.playerWins++;
                this.results.winReasons[gameData.reason] =
                    (this.results.winReasons[gameData.reason] || 0) + 1;
            } else if (gameData.winner === 'lost') {
                this.results.enemyWins++;
                this.results.loseReasons[gameData.reason] =
                    (this.results.loseReasons[gameData.reason] || 0) + 1;
            } else {
                this.results.draws++;
            }

            this.results.totalTurns += gameData.turns;
            this.results.totalRounds += gameData.rounds;
            this.results.totalScales += gameData.finalScales;
            this.results.totalVulnerabilities += gameData.vulnerabilities;
            this.results.totalMomentumChains += gameData.momentumChains;
            this.results.maxMomentumSeen = Math.max(this.results.maxMomentumSeen, gameData.maxMomentum);
            this.results.totalPlayerLogic += gameData.playerFinalLogic;
            this.results.totalPlayerEmotion += gameData.playerFinalEmotion;
            this.results.totalEnemyLogic += gameData.enemyFinalLogic;
            this.results.totalEnemyEmotion += gameData.enemyFinalEmotion;

            if ((i + 1) % 100 === 0) {
                console.log(`  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${gamesCount} –∏–≥—Ä...`);
            }
        }

        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        console.log(`\n‚è±Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥\n`);

        this.printResults();
        return this.getAnalysis();
    }

    printResults() {
        const r = this.results;
        const avgTurns = (r.totalTurns / r.totalGames).toFixed(1);
        const avgRounds = (r.totalRounds / r.totalGames).toFixed(1);
        const avgScales = (r.totalScales / r.totalGames).toFixed(2);
        const avgPlayerLogic = (r.totalPlayerLogic / r.totalGames).toFixed(1);
        const avgPlayerEmotion = (r.totalPlayerEmotion / r.totalGames).toFixed(1);
        const avgEnemyLogic = (r.totalEnemyLogic / r.totalGames).toFixed(1);
        const avgEnemyEmotion = (r.totalEnemyEmotion / r.totalGames).toFixed(1);

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

        console.log('üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`  –í—Å–µ–≥–æ –∏–≥—Ä: ${r.totalGames}`);
        console.log(`  –ü–æ–±–µ–¥ –∏–≥—Ä–æ–∫–∞: ${r.playerWins} (${(r.playerWins/r.totalGames*100).toFixed(1)}%)`);
        console.log(`  –ü–æ–±–µ–¥ —Å–∫–µ–ø—Ç–∏–∫–∞: ${r.enemyWins} (${(r.enemyWins/r.totalGames*100).toFixed(1)}%)`);
        console.log(`  –ù–∏—á—å–∏—Ö: ${r.draws} (${(r.draws/r.totalGames*100).toFixed(1)}%)\n`);

        const winRate = r.playerWins / r.totalGames * 100;
        console.log('‚öñÔ∏è  –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê:');
        if (winRate >= 45 && winRate <= 55) {
            console.log('  ‚úÖ –ò–î–ï–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° (45-55% –ø–æ–±–µ–¥)');
        } else if (winRate >= 40 && winRate <= 60) {
            console.log('  ‚úÖ –•–û–†–û–®–ò–ô –ë–ê–õ–ê–ù–° (40-60% –ø–æ–±–µ–¥)');
        } else if (winRate >= 35 && winRate <= 65) {
            console.log('  ‚ö†Ô∏è  –ü–†–ò–ï–ú–õ–ï–ú–´–ô –ë–ê–õ–ê–ù–° (35-65% –ø–æ–±–µ–¥)');
        } else {
            console.log('  ‚ùå –ö–†–ò–¢–ò–ß–ù–´–ô –î–ò–°–ë–ê–õ–ê–ù–°! –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ö–∞–Ω–∏–∫');
        }
        console.log('');

        console.log('üèÜ –ü–†–ò–ß–ò–ù–´ –ü–û–ë–ï–î –ò–ì–†–û–ö–ê:');
        for (const [reason, count] of Object.entries(r.winReasons)) {
            console.log(`  ${reason}: ${count} (${(count/r.playerWins*100).toFixed(1)}%)`);
        }
        console.log('');

        console.log('üíÄ –ü–†–ò–ß–ò–ù–´ –ü–û–†–ê–ñ–ï–ù–ò–ô –ò–ì–†–û–ö–ê:');
        for (const [reason, count] of Object.entries(r.loseReasons)) {
            console.log(`  ${reason}: ${count} (${(count/r.enemyWins*100).toFixed(1)}%)`);
        }
        console.log('');

        console.log('üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:');
        console.log(`  –•–æ–¥–æ–≤ –∑–∞ –∏–≥—Ä—É: ${avgTurns}`);
        console.log(`  –†–∞—É–Ω–¥–æ–≤ –∑–∞ –∏–≥—Ä—É: ${avgRounds}`);
        console.log(`  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–µ—Å–æ–≤: ${avgScales}`);
        console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫–∞: ${avgPlayerLogic}üß† ${avgPlayerEmotion}‚ù§Ô∏è`);
        console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∫–µ–ø—Ç–∏–∫–∞: ${avgEnemyLogic}üß† ${avgEnemyEmotion}‚ù§Ô∏è\n`);

        console.log('üîß –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ú–ï–•–ê–ù–ò–ö:');
        const vulnRate = (r.totalVulnerabilities / r.totalTurns * 100).toFixed(1);
        const momentumRate = (r.totalMomentumChains / r.totalTurns * 100).toFixed(1);
        console.log(`  –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π Vulnerability: ${r.totalVulnerabilities} (${vulnRate}% —Ö–æ–¥–æ–≤)`);
        console.log(`  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π Momentum: ${r.totalMomentumChains} (${momentumRate}% —Ö–æ–¥–æ–≤)`);
        console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–ø—å Momentum: ${r.maxMomentumSeen}\n`);

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    }

    getAnalysis() {
        const r = this.results;
        const winRate = r.playerWins / r.totalGames * 100;
        const avgRounds = r.totalRounds / r.totalGames;
        const avgTurns = r.totalTurns / r.totalGames;
        const vulnRate = (r.totalVulnerabilities / r.totalTurns) * 100;
        const momentumRate = (r.totalMomentumChains / r.totalTurns) * 100;

        const scalesWins = (r.winReasons['scales'] || 0) / Math.max(r.playerWins, 1) * 100;
        const resourceWins = ((r.winReasons['resources'] || 0) + (r.winReasons['resources_tie'] || 0)) / Math.max(r.playerWins, 1) * 100;

        return {
            balance: {
                status: winRate >= 45 && winRate <= 55 ? 'ideal' :
                       winRate >= 40 && winRate <= 60 ? 'good' :
                       winRate >= 35 && winRate <= 65 ? 'acceptable' : 'critical',
                winRate: winRate.toFixed(1)
            },
            gameDuration: {
                status: avgRounds < 3 ? 'too_short' :
                       avgRounds > 8 ? 'too_long' : 'optimal',
                avgRounds: avgRounds.toFixed(1),
                avgTurns: avgTurns.toFixed(1)
            },
            mechanics: {
                vulnerability: {
                    status: vulnRate < 10 ? 'underused' :
                           vulnRate > 30 ? 'overused' : 'good',
                    rate: vulnRate.toFixed(1)
                },
                momentum: {
                    status: momentumRate < 15 ? 'underused' :
                           momentumRate > 40 ? 'overused' : 'good',
                    rate: momentumRate.toFixed(1),
                    maxChain: r.maxMomentumSeen
                }
            },
            winConditions: {
                scalesWinPercent: scalesWins.toFixed(1),
                resourceWinPercent: resourceWins.toFixed(1),
                balance: scalesWins > 80 ? 'scales_dominant' :
                        resourceWins > 80 ? 'resources_dominant' : 'balanced'
            }
        };
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('üß™ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
if (typeof GameEngine === 'undefined') {
    console.error('‚ùå GameEngine –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –º–æ–¥—É–ª–∏.');
} else if (typeof playerCards === 'undefined' || typeof enemyCards === 'undefined') {
    console.error('‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω cards_v2.js');
} else {
    console.log('‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n');

    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    const simulator = new GameSimulator();
    const analysis = simulator.runSimulation(1000);

    console.log('üí° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:');
    console.log(`  –ë–∞–ª–∞–Ω—Å: ${analysis.balance.status} (${analysis.balance.winRate}% –ø–æ–±–µ–¥)`);
    console.log(`  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${analysis.gameDuration.status} (${analysis.gameDuration.avgRounds} —Ä–∞—É–Ω–¥–æ–≤)`);
    console.log(`  Vulnerability: ${analysis.mechanics.vulnerability.status} (${analysis.mechanics.vulnerability.rate}%)`);
    console.log(`  Momentum: ${analysis.mechanics.momentum.status} (${analysis.mechanics.momentum.rate}%)`);
    console.log(`  –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã: ${analysis.winConditions.balance}`);
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}
